// Generated by dart2js (NullSafetyMode.sound, csp, deferred-serialization, intern-composite-values), the Dart to JavaScript compiler version: 2.19.6.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        A.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          A.throwLateFieldADI(name);
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number")
      funType += typesOffset;
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var A = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable(source, $S, $T) {
      if ($S._eval$1("EfficientLengthIterable<0>")._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldADI(fieldName) {
      return new A.LateError("Field '" + fieldName + string$.x27_has_);
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI(localName) {
      return new A.LateError("Local '" + localName + "' has not been initialized.");
    },
    LateError$fieldAI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has already been initialized.");
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_, type$.int);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_, type$.int);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    Sort_sort(a, compare, $E) {
      A.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort(a, left, right, compare, $E) {
      if (right - left <= 32)
        A.Sort__insertionSort(a, left, right, compare, $E);
      else
        A.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare, $E) {
      var t0, less, great, k, ak, comp, great0, less0, pivots_are_equal,
        sixth = B.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = B.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      A.Sort__doSort(a, left, less - 2, compare, $E);
      A.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        A.Sort__doSort(a, less, great, compare, $E);
      } else
        A.Sort__doSort(a, less, great, compare, $E);
    },
    CastStream: function CastStream(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastStreamSubscription: function CastStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._source = t0;
      _.__internal$_zone = t1;
      _._handleError = _._handleData = null;
      _.$ti = t2;
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastSet: function CastSet(t0, t1, t2) {
      this._source = t0;
      this._emptySet = t1;
      this.$ti = t2;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this._name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap_ConstantMap$from(other, $K, $V) {
      var allStrings, k, object, t2,
        keys = A.List_List$from(new A.LinkedHashMapKeyIterable(other, A._instanceType(other)._eval$1("LinkedHashMapKeyIterable<1>")), true, $K),
        t1 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k != "string" || "__proto__" === k) {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (_i = 0; t2 = keys.length, _i < t2; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
          k = keys[_i];
          object[k] = $V._as(other.$index(0, k));
        }
        return new A.ConstantStringMap(t2, object, keys, $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
      }
      return new A.ConstantMapView(A.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    ConstantMap__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((B.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_currentUri() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
      return t1;
    },
    Primitives_getMonth(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
      return t1;
    },
    Primitives_getDay(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
      return t1;
    },
    Primitives_getHours(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
      return t1;
    },
    Primitives_getMinutes(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
      return t1;
    },
    Primitives_getSeconds(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
      return t1;
    },
    Primitives_getMilliseconds(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
      return t1;
    },
    Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      B.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
        namedArguments.forEach$1(0, new A.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new A.JSInvocationMirror(B.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction($function, positionalArguments, namedArguments) {
      var t1, argumentCount, jsStub;
      if (Array.isArray(positionalArguments))
        t1 = namedArguments == null || namedArguments.__js_helper$_length === 0;
      else
        t1 = false;
      if (t1) {
        argumentCount = positionalArguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1(positionalArguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2(positionalArguments[0], positionalArguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3(positionalArguments[0], positionalArguments[1], positionalArguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3], positionalArguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, positionalArguments);
      }
      return A.Primitives__generalApplyFunction($function, positionalArguments, namedArguments);
    },
    Primitives__generalApplyFunction($function, positionalArguments, namedArguments) {
      var defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, maxArguments, missingDefaults, keys, _i, defaultValue, used, key,
        $arguments = Array.isArray(positionalArguments) ? positionalArguments : A.List_List$of(positionalArguments, true, type$.dynamic),
        argumentCount = $arguments.length,
        requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (Array.isArray(defaultValues)) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        maxArguments = requiredParameterCount + defaultValues.length;
        if (argumentCount > maxArguments)
          return A.Primitives_functionNoSuchMethod($function, $arguments, null);
        if (argumentCount < maxArguments) {
          missingDefaults = defaultValues.slice(argumentCount - requiredParameterCount);
          if ($arguments === positionalArguments)
            $arguments = A.List_List$of($arguments, true, type$.dynamic);
          B.JSArray_methods.addAll$1($arguments, missingDefaults);
        }
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if ($arguments === positionalArguments)
          $arguments = A.List_List$of($arguments, true, type$.dynamic);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[A._asString(keys[_i])];
            if (B.C__Required === defaultValue)
              return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            B.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            key = A._asString(keys[_i]);
            if (namedArguments.containsKey$1(key)) {
              ++used;
              B.JSArray_methods.add$1($arguments, namedArguments.$index(0, key));
            } else {
              defaultValue = defaultValues[key];
              if (B.C__Required === defaultValue)
                return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              B.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments.__js_helper$_length)
            return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new A.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              t1 = A.S(message);
              return A.saveStackTrace(ex, new A.NullError(t1 + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              A._asString(message);
              return A.saveStackTrace(ex, new A.NullError(message, match == null ? _null : match.method));
            }
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new A._StackTrace(exception);
    },
    objectHashCode(object) {
      if (object == null || typeof object != "object")
        return J.get$hashCode$(object);
      else
        return A.Primitives_objectHashCode(object);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    fillLiteralSet(values, result) {
      var index,
        $length = values.length;
      for (index = 0; index < $length; ++index)
        result.add$1(0, values[index]);
      return result;
    },
    invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else
        $constructor = function tear_off(a, b) {
          this.$initialize(a, b);
        };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      var arity, t1;
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      arity = $function.length;
      t1 = A.Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw A.wrapException(new A._AssertionError(message));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    LinkedHashMapKeyIterator$(_map, _modifications, $E) {
      var t1 = new A.LinkedHashMapKeyIterator(_map, _modifications, $E._eval$1("LinkedHashMapKeyIterator<0>"));
      t1._cell = _map._first;
      return t1;
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof A.JSSyntaxRegExp) {
        t1 = B.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else {
        t1 = J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex));
        return !t1.get$isEmpty(t1);
      }
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var t1 = A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    _stringIdentity(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
      var t1, t2, startIndex, t3, match, t4, t5;
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new A._AllMatchesIterator(t1._re, t1._string, t1.__js_helper$_start), t2 = type$.RegExpMatch, startIndex = 0, t3 = ""; t1.moveNext$0();) {
        match = t1.__js_helper$_current;
        if (match == null)
          match = t2._as(match);
        t4 = match._match;
        t5 = t4.index;
        t3 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$2(receiver, startIndex, t5))) + A.S(onMatch.call$1(match));
        startIndex = t5 + t4[0].length;
      }
      t1 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      return receiver.substring(0, start) + replacement + receiver.substring(end);
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _.__js_helper$_previous = _.__js_helper$_next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _.__js_helper$_map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldNI(fieldName) {
      return A.throwExpression(A.LateError$fieldNI(fieldName));
    },
    throwLateFieldAI(fieldName) {
      return A.throwExpression(A.LateError$fieldAI(fieldName));
    },
    throwLateFieldADI(fieldName) {
      return A.throwExpression(A.LateError$fieldADI(fieldName));
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1.__late_helper$_value = t1;
    },
    _InitializedCell$named(_name, _initializer) {
      var t1 = new A._InitializedCell(_name, _initializer);
      return t1.__late_helper$_value = t1;
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this.__late_helper$_value = null;
    },
    _InitializedCell: function _InitializedCell(t0, t1) {
      this.__late_helper$_name = t0;
      this.__late_helper$_value = null;
      this._initializer = t1;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      var t1, result, i;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = A.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      for (i = 0; i < t1.get$length(list); ++i)
        B.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
      return result;
    },
    NativeByteData_NativeByteData$view(buffer, offsetInBytes, $length) {
      var t1;
      A._checkViewArguments(buffer, offsetInBytes, $length);
      t1 = new DataView(buffer, offsetInBytes);
      return t1;
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    NativeUint16List__create1(arg) {
      return new Uint16Array(arg);
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 12 || kind === 13;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 12:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 13:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 14:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var t1,
        signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        t1 = closure.$signature();
        return t1;
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      var rti;
      if (object instanceof A.Object) {
        rti = object.$ti;
        return rti != null ? rti : A._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeType(object) {
      var rti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      return A.createRuntimeType(rti == null ? A.instanceType(object) : rti);
    },
    createRuntimeType(rti) {
      var s, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
      if (type != null)
        return type;
      s = rti._canonicalRecipe;
      starErasedRecipe = s.replace(/\*/g, "");
      if (starErasedRecipe === s)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      type = starErasedRti._cachedRuntimeType;
      return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new A._Type(starErasedRti) : type;
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, isFn, $name, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t1,
        kind = testRti._kind;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              if (!(kind === 6 && A._nullIs(testRti._primary)))
                t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A._isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = A.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A.instanceOrFunctionType(object, testRti), A._rtiToString(testRti, null))));
    },
    checkTypeBound(type, bound, variable, methodName) {
      var _null = null;
      if (A._isSubtype(init.typeUniverse, type, _null, bound, _null))
        return type;
      throw A.wrapException(A._TypeError$fromMessage("The type argument '" + A._rtiToString(type, _null) + "' is not a subtype of the type variable bound '" + A._rtiToString(bound, _null) + "' of type variable '" + variable + "' in '" + methodName + "'."));
    },
    _Error_compose(object, objectRti, checkedTypeDescription) {
      var objectDescription = A.Error_safeToString(object);
      return objectDescription + ": type '" + A._rtiToString(objectRti == null ? A.instanceType(object) : objectRti, null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, null, type));
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = A._setArrayType([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = A._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 12 || argumentKind === 13 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 12)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 13)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 14) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 14;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, head, base, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(A._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = A._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 12:
                    t1.push(A._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(A._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleArguments(parser, stack) {
      var optionalPositional, named, requiredPositional, returnType, parameters, _null = null,
        t1 = parser.u,
        head = stack.pop();
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            named = _null;
            break;
          case -2:
            named = stack.pop();
            optionalPositional = _null;
            break;
          default:
            stack.push(head);
            named = _null;
            optionalPositional = named;
            break;
        }
      else {
        stack.push(head);
        named = _null;
        optionalPositional = named;
      }
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 14;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 12;
      if ((!t1 || sKind === 13) && t === type$.Function)
        return true;
      if (tKind === 13) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 13)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      t1 = sKind === 11;
      if (t1 && t === type$.Record)
        return true;
      if (t1 && tKind === 11)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      t1 = s._rest;
      t2 = t._rest;
      return A._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i, t1, t2,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!A._isSubtype(universe, t1, sEnv, t2, tEnv))
          return false;
      }
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv))
          return false;
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType(t) {
      var t1;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Timer__createPeriodicTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl(true);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic(milliseconds, callback) {
      var t1 = new A._TimerImpl(false);
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(0, thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _asyncStarHelper(object, bodyFunctionOrErrorCode, controller) {
      var t1, t2, t3,
        _s10_ = "controller";
      if (bodyFunctionOrErrorCode === 0) {
        t1 = controller.cancelationFuture;
        if (t1 != null)
          t1._completeWithValue$1(null);
        else {
          t1 = controller.___AsyncStarStreamController_controller_A;
          t1 === $ && A.throwLateFieldNI(_s10_);
          t1.close$0();
        }
        return;
      } else if (bodyFunctionOrErrorCode === 1) {
        t1 = controller.cancelationFuture;
        if (t1 != null)
          t1._completeError$2(A.unwrapException(object), A.getTraceFromException(object));
        else {
          t1 = A.unwrapException(object);
          t2 = A.getTraceFromException(object);
          t3 = controller.___AsyncStarStreamController_controller_A;
          t3 === $ && A.throwLateFieldNI(_s10_);
          t3.addError$2(t1, t2);
          controller.___AsyncStarStreamController_controller_A.close$0();
        }
        return;
      }
      type$.void_Function_int_dynamic._as(bodyFunctionOrErrorCode);
      if (object instanceof A._IterationMarker) {
        if (controller.cancelationFuture != null) {
          bodyFunctionOrErrorCode.call$2(2, null);
          return;
        }
        t1 = object.state;
        if (t1 === 0) {
          t1 = object.value;
          t2 = controller.___AsyncStarStreamController_controller_A;
          t2 === $ && A.throwLateFieldNI(_s10_);
          t2.add$1(0, controller.$ti._precomputed1._as(t1));
          A.scheduleMicrotask(new A._asyncStarHelper_closure(controller, bodyFunctionOrErrorCode));
          return;
        } else if (t1 === 1) {
          t1 = controller.$ti._eval$1("Stream<1>")._as(type$.Stream_dynamic._as(object.value));
          t2 = controller.___AsyncStarStreamController_controller_A;
          t2 === $ && A.throwLateFieldNI(_s10_);
          t2.addStream$2$cancelOnError(t1, false).then$1$1(0, new A._asyncStarHelper_closure0(controller, bodyFunctionOrErrorCode), type$.Null);
          return;
        }
      }
      A._awaitOnObject(object, bodyFunctionOrErrorCode);
    },
    _streamOfController(controller) {
      var t1 = controller.___AsyncStarStreamController_controller_A;
      t1 === $ && A.throwLateFieldNI("controller");
      return new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    _AsyncStarStreamController$(body, $T) {
      var t1 = new A._AsyncStarStreamController($T._eval$1("_AsyncStarStreamController<0>"));
      t1._AsyncStarStreamController$1(body, $T);
      return t1;
    },
    _makeAsyncStarStreamController(body, $T) {
      return A._AsyncStarStreamController$(body, $T);
    },
    _IterationMarker_yieldStar(values) {
      return new A._IterationMarker(values, 1);
    },
    _IterationMarker_endOfIteration() {
      return B._IterationMarker_null_2;
    },
    _IterationMarker_yieldSingle(value) {
      return new A._IterationMarker(value, 0);
    },
    _IterationMarker_uncaughtError(error) {
      return new A._IterationMarker(error, 3);
    },
    _makeSyncStarIterable(body, $T) {
      return new A._SyncStarIterable(body, $T._eval$1("_SyncStarIterable<0>"));
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B.C__StringStackTrace;
    },
    Future_Future(computation, $T) {
      var result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.Timer_Timer(B.Duration_0, new A.Future_Future_closure(result, computation));
      return result;
    },
    Future_Future$value(value, $T) {
      var t1, t2;
      if (value == null) {
        $T._as(value);
        t1 = value;
      } else
        t1 = value;
      t2 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t2._asyncComplete$1(t1);
      return t2;
    },
    _completeWithErrorCallback(result, error, stackTrace) {
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      result._completeError$2(error, stackTrace);
    },
    _Future__chainCoreFuture(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, (t2 & 4) !== 0;)
        source = t1._as(source._resultOrListeners);
      if ((t2 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = target._state & 1 | 4;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t5 = t1._state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
          if (hasError && (t5 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            A._rootHandleError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t5 = t5._zone === zone;
            t5 = !(t5 || t5);
          } else
            t5 = false;
          if (t5) {
            t2._as(sourceResult);
            A._rootHandleError(sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t4._is(t1)) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if (t1 instanceof A._Future)
              if ((t1._state & 24) !== 0) {
                current = t3._as(result._resultOrListeners);
                result._resultOrListeners = null;
                listeners = result._reverseListeners$1(current);
                result._state = t1._state & 30 | result._state & 1;
                result._resultOrListeners = t1._resultOrListeners;
                _box_1.source = t1;
                continue;
              } else
                A._Future__chainCoreFuture(t1, result);
            else
              result._chainForeignFuture$1(t1);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      t1 = false;
      if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(callback));
        return;
      }
      A._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    StreamIterator_StreamIterator(stream, $T) {
      A.checkNotNullable(stream, "stream", type$.Object);
      return new A._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    StreamController_StreamController(onCancel, onListen, onResume, sync, $T) {
      return sync ? new A._SyncStreamController(onListen, null, onResume, onCancel, $T._eval$1("_SyncStreamController<0>")) : new A._AsyncStreamController(onListen, null, onResume, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    _runGuarded(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    _ControllerSubscription$(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0;
      return new A._ControllerSubscription(_controller, A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T), A._BufferingStreamSubscription__registerErrorHandler(t1, onError), A._BufferingStreamSubscription__registerDoneHandler(t1, onDone), t1, t2, $T._eval$1("_ControllerSubscription<0>"));
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
      var t1 = handleData == null ? A.async___nullDataHandler$closure() : handleData;
      return type$.$env_1_1_void._bind$1($T)._eval$1("1(2)")._as(t1);
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (handleError == null)
        handleError = A.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return type$.dynamic_Function_Object._as(handleError);
      throw A.wrapException(A.ArgumentError$(string$.handle, null));
    },
    _BufferingStreamSubscription__registerDoneHandler(zone, handleDone) {
      var t1 = handleDone == null ? A.async___nullDoneHandler$closure() : handleDone;
      return type$.void_Function._as(t1);
    },
    _nullDataHandler(value) {
    },
    _nullErrorHandler(error, stackTrace) {
      A._rootHandleError(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    _nullDoneHandler() {
    },
    _DoneStreamSubscription$(_onDone, $T) {
      var t1 = new A._DoneStreamSubscription($.Zone__current, _onDone, $T._eval$1("_DoneStreamSubscription<0>"));
      t1._schedule$0();
      return t1;
    },
    _cancelAndValue(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(),
        t1 = $.$get$Future__nullFuture();
      if (cancelFuture !== t1)
        cancelFuture.whenComplete$1(new A._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return A.Timer__createTimer(duration, type$.void_Function._as(callback));
      return A.Timer__createTimer(duration, type$.void_Function._as(t1.bindCallbackGuarded$1(callback)));
    },
    Timer_Timer$periodic(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return A.Timer__createPeriodicTimer(duration, type$.void_Function_Timer._as(callback));
      return A.Timer__createPeriodicTimer(duration, type$.void_Function_Timer._as(t1.bindUnaryCallbackGuarded$1$1(callback, type$.Timer)));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this._once = t0;
      this._handle = null;
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _asyncStarHelper_closure: function _asyncStarHelper_closure(t0, t1) {
      this.controller = t0;
      this.bodyFunction = t1;
    },
    _asyncStarHelper_closure0: function _asyncStarHelper_closure0(t0, t1) {
      this.controller = t0;
      this.bodyFunction = t1;
    },
    _AsyncStarStreamController: function _AsyncStarStreamController(t0) {
      var _ = this;
      _.___AsyncStarStreamController_controller_A = $;
      _.isSuspended = false;
      _.cancelationFuture = null;
      _.$ti = t0;
    },
    _AsyncStarStreamController__resumeBody: function _AsyncStarStreamController__resumeBody(t0) {
      this.body = t0;
    },
    _AsyncStarStreamController__resumeBody_closure: function _AsyncStarStreamController__resumeBody_closure(t0) {
      this.body = t0;
    },
    _AsyncStarStreamController_closure0: function _AsyncStarStreamController_closure0(t0) {
      this._resumeBody = t0;
    },
    _AsyncStarStreamController_closure1: function _AsyncStarStreamController_closure1(t0, t1) {
      this.$this = t0;
      this._resumeBody = t1;
    },
    _AsyncStarStreamController_closure: function _AsyncStarStreamController_closure(t0, t1) {
      this.$this = t0;
      this.body = t1;
    },
    _AsyncStarStreamController__closure: function _AsyncStarStreamController__closure(t0) {
      this.body = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._async$_body = t0;
      _._suspendedBodies = _._nestedIterator = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _BroadcastStream: function _BroadcastStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._eventState = 0;
      _._previous = _._next = null;
      _._controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _SyncBroadcastStreamController: function _SyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    _SyncBroadcastStreamController__sendData_closure: function _SyncBroadcastStreamController__sendData_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _SyncBroadcastStreamController__sendError_closure: function _SyncBroadcastStreamController__sendError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _SyncBroadcastStreamController__sendDone_closure: function _SyncBroadcastStreamController__sendDone_closure(t0) {
      this.$this = t0;
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    Future_Future_closure: function Future_Future_closure(t0, t1) {
      this.result = t0;
      this.computation = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_first_closure: function Stream_first_closure(t0) {
      this.future = t0;
    },
    Stream_first_closure0: function Stream_first_closure0(t0, t1, t2) {
      this.$this = t0;
      this.subscription = t1;
      this.future = t2;
    },
    StreamView: function StreamView() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _StreamSinkWrapper: function _StreamSinkWrapper(t0, t1) {
      this._target = t0;
      this.$ti = t1;
    },
    _AddStreamState: function _AddStreamState() {
    },
    _AddStreamState_cancel_closure: function _AddStreamState_cancel_closure(t0) {
      this.$this = t0;
    },
    _StreamControllerAddStreamState: function _StreamControllerAddStreamState(t0, t1, t2, t3) {
      var _ = this;
      _.varData = t0;
      _.addStreamFuture = t1;
      _.addSubscription = t2;
      _.$ti = t3;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents(t0) {
      var _ = this;
      _._state = 0;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _.$ti = t0;
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._zone = t0;
      _._state = 0;
      _._onDone = t1;
      _.$ti = t2;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _EmptyStream: function _EmptyStream(t0) {
      this.$ti = t0;
    },
    _MultiStream: function _MultiStream(t0, t1, t2) {
      this.isBroadcast = t0;
      this._onListen = t1;
      this.$ti = t2;
    },
    _MultiStream_listen_closure: function _MultiStream_listen_closure(t0, t1) {
      this.$this = t0;
      this.controller = t1;
    },
    _MultiStreamController: function _MultiStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1) {
      this.future = t0;
      this.value = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap(equals, hashCode, isValidKey, $K, $V) {
      if (isValidKey == null)
        if (hashCode == null) {
          if (equals == null)
            return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
          hashCode = A.collection___defaultHashCode$closure();
        } else {
          if (A.core__identityHashCode$closure() === hashCode && A.core__identical$closure() === equals)
            return new A._LinkedIdentityHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedIdentityHashMap<1,2>"));
          if (equals == null)
            equals = A.collection___defaultEquals$closure();
        }
      else {
        if (hashCode == null)
          hashCode = A.collection___defaultHashCode$closure();
        if (equals == null)
          equals = A.collection___defaultEquals$closure();
      }
      return A._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new A._LinkedCustomHashMap_closure($K);
      return new A._LinkedCustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_literal(values, $E) {
      return $E._eval$1("LinkedHashSet<0>")._as(A.fillLiteralSet(values, new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"))));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    IterableBase_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    ListMixin__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A._isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _HashMap: function _HashMap() {
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._collection$_keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedIdentityHashMap: function _LinkedIdentityHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    IterableBase: function IterableBase() {
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
      this.$this = t0;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    SetMixin: function SetMixin() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSetMixin: function _UnmodifiableSetMixin() {
    },
    _UnmodifiableSet: function _UnmodifiableSet(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    __SetBase_Object_SetMixin: function __SetBase_Object_SetMixin() {
    },
    __UnmodifiableSet__SetBase__UnmodifiableSetMixin: function __UnmodifiableSet__SetBase__UnmodifiableSetMixin() {
    },
    _parseJson(source, reviver) {
      var e, exception, t1, parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.FormatException$(String(e), null, null);
        throw A.wrapException(t1);
      }
      t1 = A._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy(object) {
      var i;
      if (object == null)
        return null;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new A._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = A._convertJsonToDartLazy(object[i]);
      return object;
    },
    Utf8Decoder__convertIntercepted(allowMalformed, codeUnits, start, end) {
      var casted, result;
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        end = casted.length;
        if (end - start < 15)
          return null;
        result = A.Utf8Decoder__convertInterceptedUint8List(allowMalformed, casted, start, end);
        if (result != null && allowMalformed)
          if (result.indexOf("\ufffd") >= 0)
            return null;
        return result;
      }
      return null;
    },
    Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$Utf8Decoder__decoderNonfatal() : $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A.Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A.Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, A.RangeError_checkValidRange(start, end, codeUnits.length)));
    },
    Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, t2, i, byteOr, byte, outputIndex0, t3, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = J.getInterceptor$asx(bytes), t2 = output.length, i = start, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t3 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 18 & 63);
          if (!(outputIndex < t2))
            return A.ioore(output, outputIndex);
          output[outputIndex] = t3;
          outputIndex = outputIndex0 + 1;
          t3 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 12 & 63);
          if (!(outputIndex0 < t2))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = t3;
          outputIndex0 = outputIndex + 1;
          t3 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 6 & 63);
          if (!(outputIndex < t2))
            return A.ioore(output, outputIndex);
          output[outputIndex] = t3;
          outputIndex = outputIndex0 + 1;
          t3 = B.JSString_methods._codeUnitAt$1(alphabet, bits & 63);
          if (!(outputIndex0 < t2))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = t3;
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (isLast && expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t1 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 2 & 63);
            if (!(outputIndex < t2))
              return A.ioore(output, outputIndex);
            output[outputIndex] = t1;
            t1 = B.JSString_methods._codeUnitAt$1(alphabet, bits << 4 & 63);
            if (!(outputIndex0 < t2))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = t1;
            outputIndex = outputIndex1 + 1;
            if (!(outputIndex1 < t2))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (!(outputIndex < t2))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t1 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 10 & 63);
            if (!(outputIndex < t2))
              return A.ioore(output, outputIndex);
            output[outputIndex] = t1;
            t1 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 4 & 63);
            if (!(outputIndex0 < t2))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = t1;
            outputIndex = outputIndex1 + 1;
            t1 = B.JSString_methods._codeUnitAt$1(alphabet, bits << 2 & 63);
            if (!(outputIndex1 < t2))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = t1;
            if (!(outputIndex < t2))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw A.wrapException(A.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + J.toRadixString$1$n(t1.$index(bytes, i), 16), null));
    },
    Encoding_getByName($name) {
      return $.$get$Encoding__nameToEncoding().$index(0, $name.toLowerCase());
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      return new A._JsonStringStringifier(_sink, [], A.convert___defaultToEncodable$closure());
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var t1,
        output = new A.StringBuffer("");
      A._JsonStringStringifier_printOn(object, output, toEncodable, indent);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonStringStringifier_printOn(object, output, toEncodable, indent) {
      var stringifier = A._JsonStringStringifier$(output, toEncodable);
      stringifier.writeObject$1(object);
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__makeUint8List(codeUnits, start, end) {
      var t1, i, b,
        $length = end - start,
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        if ((b & 4294967040) >>> 0 !== 0)
          b = 255;
        if (!(i < $length))
          return A.ioore(bytes, i);
        bytes[i] = b;
      }
      return bytes;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._data = null;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._parent = t0;
    },
    Utf8Decoder__decoder_closure: function Utf8Decoder__decoder_closure() {
    },
    Utf8Decoder__decoderNonfatal_closure: function Utf8Decoder__decoderNonfatal_closure() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    ByteConversionSinkBase: function ByteConversionSinkBase() {
    },
    _ByteAdapterSink: function _ByteAdapterSink(t0) {
      this._sink = t0;
    },
    _ByteCallbackSink: function _ByteCallbackSink(t0, t1) {
      this._callback = t0;
      this._buffer = t1;
      this._bufferIndex = 0;
    },
    ChunkedConversionSink: function ChunkedConversionSink() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    Latin1Codec: function Latin1Codec() {
    },
    Latin1Encoder: function Latin1Encoder(t0) {
      this._subsetMask = t0;
    },
    Latin1Decoder: function Latin1Decoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    StringConversionSinkMixin: function StringConversionSinkMixin() {
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = this._carry = 0;
      this._buffer = t0;
    },
    _Utf8EncoderSink: function _Utf8EncoderSink(t0, t1) {
      var _ = this;
      _._sink = t0;
      _._bufferIndex = _._carry = 0;
      _._buffer = t1;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin: function __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin() {
    },
    identityHashCode(object) {
      return A.objectHashCode(object);
    },
    Function_apply($function, positionalArguments) {
      return A.Primitives_applyFunction($function, positionalArguments, null);
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    Error__objectToString(object) {
      if (object instanceof A.Closure)
        return object.toString$0(0);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list, $E);
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return A.List_List$_of(elements, $E);
      t1 = J.JSArray_markFixedList(A.List_List$_of(elements, $E), $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      return J.JSArray_markUnmodifiableList(A.List_List$from(elements, false, $E));
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var array, len;
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = A.RangeError_checkValidRange(start, end, len);
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.Primitives_stringFromNativeUint8List(charCodes, start, A.RangeError_checkValidRange(start, end, charCodes.length));
      return A.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode(charCode) {
      return A.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromIterable(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw A.wrapException(A.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw A.wrapException(A.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw A.wrapException(A.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw A.wrapException(A.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current());
        }
      return A.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp(source) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, false, true, false, false, false));
    },
    identical(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    NoSuchMethodError$_(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
      return new A.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
    },
    Uri_base() {
      var uri = A.Primitives_currentUri();
      if (uri != null)
        return A.Uri_parse(uri, 0, null);
      throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
    },
    _Uri__uriEncode(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte, t3,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding()._nativeRegExp;
        t1 = t1.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = encoding.encode$1(text);
      for (t1 = J.getInterceptor$asx(bytes), i = 0, t2 = ""; i < t1.get$length(bytes); ++i) {
        byte = t1.$index(bytes, i);
        if (byte < 128) {
          t3 = B.JSInt_methods._shrOtherPositive$1(byte, 4);
          if (!(t3 < 8))
            return A.ioore(canonicalTable, t3);
          t3 = (canonicalTable[t3] & 1 << (byte & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          t2 += A.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[B.JSInt_methods._shrOtherPositive$1(byte, 4) & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$(milliseconds) {
      return new A.Duration(1000 * milliseconds);
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Error__objectToString(object);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument;
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$(invalidValue, indexable) {
      var t1 = indexable._typed_buffer$_length;
      return new A.IndexError(t1, true, invalidValue, null, "Index out of range");
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Object_hash(object1, object2, object3) {
      var t1, t2;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      t2 = $.$get$_hashSeed();
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(t2, t1), object2), object3));
    },
    Object_hashAll(objects) {
      var t1, _i,
        hash = $.$get$_hashSeed();
      for (t1 = objects.length, _i = 0; _i < t1; ++_i)
        hash = A.SystemHash_combine(hash, B.JSInt_methods.get$hashCode(objects[_i]));
      return A.SystemHash_finish(hash);
    },
    print(object) {
      A.printString(A.S(object));
    },
    Set_castFrom(source, newSet, $S, $T) {
      return new A.CastSet(source, newSet, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastSet<1,2>"));
    },
    Uri_parse(uri, start, end) {
      var t1, delta, indices, t2, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t3, schemeAuth, userInfoStart, userInfo, host, portNumber, port, path, query, _null = null;
      end = uri.length;
      t1 = start + 5;
      if (end >= t1) {
        delta = ((B.JSString_methods._codeUnitAt$1(uri, start + 4) ^ 58) * 3 | B.JSString_methods._codeUnitAt$1(uri, start) ^ 100 | B.JSString_methods._codeUnitAt$1(uri, start + 1) ^ 97 | B.JSString_methods._codeUnitAt$1(uri, start + 2) ^ 116 | B.JSString_methods._codeUnitAt$1(uri, start + 3) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(start > 0 || end < end ? B.JSString_methods.substring$2(uri, start, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, t1, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      B.JSArray_methods.$indexSet(indices, 0, 0);
      t2 = start - 1;
      B.JSArray_methods.$indexSet(indices, 1, t2);
      B.JSArray_methods.$indexSet(indices, 2, t2);
      B.JSArray_methods.$indexSet(indices, 7, t2);
      B.JSArray_methods.$indexSet(indices, 3, start);
      B.JSArray_methods.$indexSet(indices, 4, start);
      B.JSArray_methods.$indexSet(indices, 5, end);
      B.JSArray_methods.$indexSet(indices, 6, end);
      if (A._scan(uri, start, end, 0, indices) >= 14)
        B.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (schemeEnd >= start)
        if (A._scan(uri, start, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < start;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t2 = portStart > start;
          if (t2 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!B.JSString_methods.startsWith$2(uri, "\\", pathStart))
              if (hostStart > start)
                t3 = B.JSString_methods.startsWith$2(uri, "\\", hostStart - 1) || B.JSString_methods.startsWith$2(uri, "\\", hostStart - 2);
              else
                t3 = false;
            else
              t3 = true;
            if (t3) {
              scheme = _null;
              isSimple = false;
            } else {
              if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
                t3 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
              else
                t3 = true;
              if (t3) {
                scheme = _null;
                isSimple = false;
              } else {
                if (schemeEnd === start + 4)
                  if (B.JSString_methods.startsWith$2(uri, "file", start)) {
                    if (hostStart <= start) {
                      if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                        schemeAuth = "file:///";
                        delta = 3;
                      } else {
                        schemeAuth = "file://";
                        delta = 2;
                      }
                      uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                      schemeEnd -= start;
                      t1 = delta - start;
                      queryStart += t1;
                      fragmentStart += t1;
                      end = uri.length;
                      start = 0;
                      hostStart = 7;
                      portStart = 7;
                      pathStart = 7;
                    } else if (pathStart === queryStart)
                      if (start === 0 && true) {
                        uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                        ++queryStart;
                        ++fragmentStart;
                        ++end;
                      } else {
                        uri = B.JSString_methods.substring$2(uri, start, pathStart) + "/" + B.JSString_methods.substring$2(uri, queryStart, end);
                        schemeEnd -= start;
                        hostStart -= start;
                        portStart -= start;
                        pathStart -= start;
                        t1 = 1 - start;
                        queryStart += t1;
                        fragmentStart += t1;
                        end = uri.length;
                        start = 0;
                      }
                    scheme = "file";
                  } else if (B.JSString_methods.startsWith$2(uri, "http", start)) {
                    if (t2 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1))
                      if (start === 0 && true) {
                        uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                        pathStart -= 3;
                        queryStart -= 3;
                        fragmentStart -= 3;
                        end -= 3;
                      } else {
                        uri = B.JSString_methods.substring$2(uri, start, portStart) + B.JSString_methods.substring$2(uri, pathStart, end);
                        schemeEnd -= start;
                        hostStart -= start;
                        portStart -= start;
                        t1 = 3 + start;
                        pathStart -= t1;
                        queryStart -= t1;
                        fragmentStart -= t1;
                        end = uri.length;
                        start = 0;
                      }
                    scheme = "http";
                  } else
                    scheme = _null;
                else if (schemeEnd === t1 && B.JSString_methods.startsWith$2(uri, "https", start)) {
                  if (t2 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1))
                    if (start === 0 && true) {
                      uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                      pathStart -= 4;
                      queryStart -= 4;
                      fragmentStart -= 4;
                      end -= 3;
                    } else {
                      uri = B.JSString_methods.substring$2(uri, start, portStart) + B.JSString_methods.substring$2(uri, pathStart, end);
                      schemeEnd -= start;
                      hostStart -= start;
                      portStart -= start;
                      t1 = 4 + start;
                      pathStart -= t1;
                      queryStart -= t1;
                      fragmentStart -= t1;
                      end = uri.length;
                      start = 0;
                    }
                  scheme = "https";
                } else
                  scheme = _null;
                isSimple = true;
              }
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        if (start > 0 || end < uri.length) {
          uri = B.JSString_methods.substring$2(uri, start, end);
          schemeEnd -= start;
          hostStart -= start;
          portStart -= start;
          pathStart -= start;
          queryStart -= start;
          fragmentStart -= start;
        }
        return new A._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      if (scheme == null)
        if (schemeEnd > start)
          scheme = A._Uri__makeScheme(uri, start, schemeEnd);
        else {
          if (schemeEnd === start)
            A._Uri__fail(uri, start, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > start) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        } else
          port = _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      A._asString(encodedComponent);
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri_splitQueryString(query) {
      var t1 = type$.String;
      return B.JSArray_methods.fold$1$2(A._setArrayType(query.split("&"), type$.JSArray_String), A.LinkedHashMap_LinkedHashMap$_empty(t1, t1), new A.Uri_splitQueryString_closure(B.C_Utf8Codec), type$.Map_String_String);
    },
    Uri__parseIPv4Address(host, start, end) {
      var i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(host, i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (!(partIndex < 4))
            return A.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (!(partIndex < 4))
        return A.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, wildCardLength, index, value, j, t2, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (B.JSString_methods.codeUnitAt$1(host, i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            B.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          B.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          B.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (!(index >= 0 && index < 16))
              return A.ioore(bytes, index);
            bytes[index] = 0;
            t2 = index + 1;
            if (!(t2 < 16))
              return A.ioore(bytes, t2);
            bytes[t2] = 0;
            index += 2;
          }
        else {
          t2 = B.JSInt_methods._shrOtherPositive$1(value, 8);
          if (!(index >= 0 && index < 16))
            return A.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (!(t2 < 16))
            return A.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, _i, segment;
      for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
        segment = segments[_i];
        if (J.contains$1$asx(segment, "/")) {
          t1 = A.UnsupportedError$("Illegal path character " + A.S(segment));
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsPathReservedCharacters(segments, argumentError, firstSegment) {
      var t1, t2, t3;
      for (t1 = A.SubListIterable$(segments, firstSegment, null, A._arrayInstanceType(segments)._precomputed1), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (B.JSString_methods.contains$1(t3, A.RegExp_RegExp('["*/:<>?\\\\|]'))) {
          t1 = A.UnsupportedError$("Illegal character in path: " + t3);
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsDriveLetter(charCode, argumentError) {
      var t1;
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      t1 = A.UnsupportedError$("Illegal drive letter " + A.String_String$fromCharCode(charCode));
      throw A.wrapException(t1);
    },
    _Uri__computeQueryParametersAll(query) {
      var queryParameterLists;
      if (query.length === 0)
        return B.Map_empty0;
      queryParameterLists = A._Uri__splitQueryStringAll(query);
      queryParameterLists.updateAll$1(A.core___toUnmodifiableStringList$closure());
      return A.ConstantMap_ConstantMap$from(queryParameterLists, type$.String, type$.List_String);
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      if (B.JSString_methods.codeUnitAt$1(host, start) === 91) {
        t1 = end - 1;
        if (B.JSString_methods.codeUnitAt$1(host, t1) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t2 = start + 1;
        index = A._Uri__checkZoneID(host, t2, t1);
        if (index < t1) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t1, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t2, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i)
        if (B.JSString_methods.codeUnitAt$1(host, i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var index, sectionStart, isNormalized, char, replacement, t1, t2, tail, sourceLength, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (index = start, sectionStart = index, isNormalized = true; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t2 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t1)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t2 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (!(t1 < 8))
              return A.ioore(B.List_nxB, t1);
            t1 = (B.List_nxB[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = B.JSString_methods.codeUnitAt$1(host, index + 1);
              if ((tail & 64512) === 56320) {
                char = (char & 1023) << 10 | tail & 1023 | 65536;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            slice = B.JSString_methods.substring$2(host, sectionStart, index);
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t1 = buffer;
            } else
              t1 = buffer;
            t1._contents += slice;
            t1._contents += A._Uri__escapeChar(char);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(host, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail;
      for (index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          t2 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t1) {
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (!(t1 < 8))
              return A.ioore(B.List_qNA, t1);
            t1 = (B.List_qNA[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t1 = char >>> 4;
              if (!(t1 < 8))
                return A.ioore(B.List_2Vk, t1);
              t1 = (B.List_2Vk[t1] & 1 << (char & 15)) !== 0;
            } else
              t1 = false;
            if (t1)
              A._Uri__fail(host, index, "Invalid character");
            else {
              if ((char & 64512) === 55296 && index + 1 < end) {
                tail = B.JSString_methods.codeUnitAt$1(host, index + 1);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              slice = B.JSString_methods.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              if (buffer == null) {
                buffer = new A.StringBuffer("");
                t1 = buffer;
              } else
                t1 = buffer;
              t1._contents += slice;
              t1._contents += A._Uri__escapeChar(char);
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var i, containsUpperCase, codeUnit, t1;
      if (start === end)
        return "";
      if (!A._Uri__isAlphabeticCharacter(B.JSString_methods._codeUnitAt$1(scheme, start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(scheme, i);
        if (codeUnit < 128) {
          t1 = codeUnit >>> 4;
          if (!(t1 < 8))
            return A.ioore(B.List_JYB, t1);
          t1 = (B.List_JYB[t1] & 1 << (codeUnit & 15)) !== 0;
        } else
          t1 = false;
        if (!t1)
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, B.List_gRj, false, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null)
        return isFile ? "/" : "";
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, B.List_qg4, true, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/") && !B.JSString_methods.startsWith$1(path, "\\"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      var result, t1 = {};
      if (query != null) {
        if (queryParameters != null)
          throw A.wrapException(A.ArgumentError$("Both query and queryParameters specified", null));
        return A._Uri__normalizeOrSubstring(query, start, end, B.List_CVk, true, false);
      }
      if (queryParameters == null)
        return null;
      result = new A.StringBuffer("");
      t1.separator = "";
      queryParameters.forEach$1(0, new A._Uri__makeQuery_closure(new A._Uri__makeQuery_writeParameter(t1, result)));
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, B.List_CVk, true, false);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = B.JSString_methods.codeUnitAt$1(source, index + 1);
      secondDigit = B.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = B.JSInt_methods._shrOtherPositive$1(value, 4);
        if (!(t1 < 8))
          return A.ioore(B.List_nxB, t1);
        t1 = (B.List_nxB[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, flag, encodedBytes, t1, index, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        codeUnits[1] = B.JSString_methods._codeUnitAt$1(_s16_, char >>> 4);
        codeUnits[2] = B.JSString_methods._codeUnitAt$1(_s16_, char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = 3 * encodedBytes;
        codeUnits = new Uint8Array(t1);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          if (!(index < t1))
            return A.ioore(codeUnits, index);
          codeUnits[index] = 37;
          t2 = index + 1;
          t3 = B.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4);
          if (!(t2 < t1))
            return A.ioore(codeUnits, t2);
          codeUnits[t2] = t3;
          t3 = index + 2;
          t2 = B.JSString_methods._codeUnitAt$1(_s16_, byte & 15);
          if (!(t3 < t1))
            return A.ioore(codeUnits, t3);
          codeUnits[t3] = t2;
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1 = A._Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1, index, sectionStart, buffer, char, t2, replacement, sourceLength, tail, t3, _null = null;
      for (t1 = !escapeDelimiters, index = start, sectionStart = index, buffer = _null; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(component, index);
        if (char < 127) {
          t2 = char >>> 4;
          if (!(t2 < 8))
            return A.ioore(charTable, t2);
          t2 = (charTable[t2] & 1 << (char & 15)) !== 0;
        } else
          t2 = false;
        if (t2)
          ++index;
        else {
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement) {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
          } else if (char === 92 && replaceBackslash) {
            replacement = "/";
            sourceLength = 1;
          } else {
            if (t1)
              if (char <= 93) {
                t2 = char >>> 4;
                if (!(t2 < 8))
                  return A.ioore(B.List_2Vk, t2);
                t2 = (B.List_2Vk[t2] & 1 << (char & 15)) !== 0;
              } else
                t2 = false;
            else
              t2 = false;
            if (t2) {
              A._Uri__fail(component, index, "Invalid character");
              sourceLength = _null;
              replacement = sourceLength;
            } else {
              if ((char & 64512) === 55296) {
                t2 = index + 1;
                if (t2 < end) {
                  tail = B.JSString_methods.codeUnitAt$1(component, t2);
                  if ((tail & 64512) === 56320) {
                    char = (char & 1023) << 10 | tail & 1023 | 65536;
                    sourceLength = 2;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              replacement = A._Uri__escapeChar(char);
            }
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t3 = t2._contents += B.JSString_methods.substring$2(component, sectionStart, index);
          t2._contents = t3 + A.S(replacement);
          if (typeof sourceLength !== "number")
            return A.iae(sourceLength);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              B.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          B.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        B.JSArray_methods.add$1(output, "");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && B.JSArray_methods.get$last(output) !== "..") {
            if (0 >= output.length)
              return A.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            B.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          B.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return A.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        B.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return A.ioore(output, 0);
        B.JSArray_methods.$indexSet(output, 0, A._Uri__escapeScheme(output[0]));
      }
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(B.JSString_methods._codeUnitAt$1(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = B.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_JYB, t2);
            t2 = (B.List_JYB[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && uri._host == null)
        return A._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__toWindowsFilePath(uri) {
      var hasDriveLetter, t2, host,
        segments = uri.get$pathSegments(),
        t1 = segments.length;
      if (t1 > 0 && J.get$length$asx(segments[0]) === 2 && J.codeUnitAt$1$s(segments[0], 1) === 58) {
        if (0 >= t1)
          return A.ioore(segments, 0);
        A._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(segments[0], 0), false);
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? "" + "\\" : "";
      if (uri.get$hasAuthority()) {
        host = uri.get$host();
        if (host.length !== 0)
          t2 = t2 + "\\" + host + "\\";
      }
      t2 = A.StringBuffer__writeAll(t2, segments, "\\");
      t1 = hasDriveLetter && t1 === 1 ? t2 + "\\" : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__createList() {
      return A._setArrayType([], type$.JSArray_String);
    },
    _Uri__splitQueryStringAll(query) {
      var t1, i, start, equalsIndex, char,
        result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_String),
        parsePair = new A._Uri__splitQueryStringAll_parsePair(query, B.C_Utf8Codec, result);
      for (t1 = query.length, i = 0, start = 0, equalsIndex = -1; i < t1;) {
        char = B.JSString_methods._codeUnitAt$1(query, i);
        if (char === 61) {
          if (equalsIndex < 0)
            equalsIndex = i;
        } else if (char === 38) {
          parsePair.call$3(start, equalsIndex, i);
          start = i + 1;
          equalsIndex = -1;
        }
        ++i;
      }
      parsePair.call$3(start, equalsIndex, i);
      return result;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var byte, i, charCode;
      for (byte = 0, i = 0; i < 2; ++i) {
        charCode = B.JSString_methods.codeUnitAt$1(s, pos + i);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t1, bytes,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = B.JSString_methods.codeUnitAt$1(text, i);
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t1 = plusToSpace && codeUnit === 43;
          else
            t1 = true;
        else
          t1 = true;
        if (t1) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple) {
        if (B.C_Utf8Codec !== encoding)
          t1 = false;
        else
          t1 = true;
        if (t1)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      } else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (t1 = text.length, i = start; i < end; ++i) {
          codeUnit = B.JSString_methods.codeUnitAt$1(text, i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            B.JSArray_methods.add$1(bytes, A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else if (plusToSpace && codeUnit === 43)
            B.JSArray_methods.add$1(bytes, 32);
          else
            B.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      return encoding.decode$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = B.JSString_methods._codeUnitAt$1(text, i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        B.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = B.JSString_methods._codeUnitAt$1(text, i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          B.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      B.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.C_Base64Codec.normalize$3(text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, B.List_CVk, true, false);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    _createTables() {
      var _i, t1, t2, t3, t4, b,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "\\", _s1_3 = "?", _s1_4 = "#", _s2_ = "/\\",
        tables = A._setArrayType(new Array(22), type$.JSArray_Uint8List);
      for (_i = 0; _i < 22; ++_i)
        tables[_i] = new Uint8Array(96);
      t1 = new A._createTables_build(tables);
      t2 = new A._createTables_setChars();
      t3 = new A._createTables_setRange();
      t4 = type$.Uint8List._as(t1.call$2(0, 225));
      t2.call$3(t4, _s77_, 1);
      t2.call$3(t4, _s1_, 14);
      t2.call$3(t4, _s1_0, 34);
      t2.call$3(t4, _s1_1, 3);
      t2.call$3(t4, _s1_2, 227);
      t2.call$3(t4, _s1_3, 172);
      t2.call$3(t4, _s1_4, 205);
      b = t1.call$2(14, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(15, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(1, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(2, 235);
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_2, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(3, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_2, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(4, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(5, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(6, 231);
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(7, 231);
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      t2.call$3(t1.call$2(8, 8), "]", 5);
      b = t1.call$2(9, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(16, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(17, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(10, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(18, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(19, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(11, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(12, 236);
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_3, 12);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(13, 237);
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_3, 13);
      t3.call$3(t1.call$2(20, 245), "az", 21);
      b = t1.call$2(21, 245);
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan(uri, start, end, state, indices) {
      var i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (i = start; i < end; ++i) {
        if (!(state >= 0 && state < tables.length))
          return A.ioore(tables, state);
        table = tables[state];
        char = B.JSString_methods._codeUnitAt$1(uri, i) ^ 96;
        transition = table[char > 95 ? 31 : char];
        state = transition & 31;
        B.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _SimpleUri__packageNameEnd(uri) {
      if (uri._schemeEnd === 7 && B.JSString_methods.startsWith$1(uri._uri, "package") && uri._hostStart <= 0)
        return A._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _toUnmodifiableStringList(key, list) {
      A._asString(key);
      return A.List_List$unmodifiable(type$.List_String._as(list), type$.String);
    },
    _skipPackageNameChars(source, start, end) {
      var i, dots, char;
      for (i = start, dots = 0; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(source, i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    _caseInsensitiveCompareStart(prefix, string, start) {
      var t1, result, i, prefixChar, stringChar, delta, lowerChar;
      for (t1 = prefix.length, result = 0, i = 0; i < t1; ++i) {
        prefixChar = B.JSString_methods._codeUnitAt$1(prefix, i);
        stringChar = B.JSString_methods._codeUnitAt$1(string, start + i);
        delta = prefixChar ^ stringChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = stringChar | delta;
            if (97 <= lowerChar && lowerChar <= 122) {
              result = 32;
              continue;
            }
          }
          return -1;
        }
      }
      return result;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3, t4) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
      _._existingArgumentNames = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    Sink: function Sink() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri_splitQueryString_closure: function Uri_splitQueryString_closure(t0) {
      this.encoding = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_queryParametersAll_FI = _.___Uri_queryParameters_FI = _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    _Uri__makeQuery_writeParameter: function _Uri__makeQuery_writeParameter(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _Uri__makeQuery_closure: function _Uri__makeQuery_closure(t0) {
      this.writeParameter = t0;
    },
    _Uri__splitQueryStringAll_parsePair: function _Uri__splitQueryStringAll_parsePair(t0, t1, t2) {
      this.query = t0;
      this.encoding = t1;
      this.result = t2;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_queryParametersAll_FI = _.___Uri_queryParameters_FI = _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    _callDartFunction(callback, captureThis, $self, $arguments) {
      var arguments0, t1, dartArgs;
      A._asBool(captureThis);
      type$.List_dynamic._as($arguments);
      if (captureThis) {
        arguments0 = [$self];
        B.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      t1 = type$.dynamic;
      dartArgs = A.List_List$from(J.map$1$1$ax($arguments, A.js___convertToDart$closure(), t1), true, t1);
      return A._convertToJS(A.Function_apply(type$.Function._as(callback), dartArgs));
    },
    JsObject__convertDataTree(data) {
      return new A.JsObject__convertDataTree__convert(new A._IdentityHashMap(type$._IdentityHashMap_dynamic_dynamic)).call$1(data);
    },
    _castToJsObject(o) {
      return o;
    },
    _defineProperty(o, $name, value) {
      var exception;
      try {
        if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
          Object.defineProperty(o, $name, {value: value});
          return true;
        }
      } catch (exception) {
      }
      return false;
    },
    _getOwnProperty(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return null;
    },
    _convertToJS(o) {
      if (o == null || typeof o == "string" || typeof o == "number" || A._isBool(o))
        return o;
      if (o instanceof A.JsObject)
        return o._js$_jsObject;
      if (type$.TypedData._is(o))
        return o;
      if (o instanceof A.DateTime)
        return A.Primitives_lazyAsJsDate(o);
      if (type$.Function._is(o))
        return A._getJsProxy(o, "$dart_jsFunction", new A._convertToJS_closure());
      return A._getJsProxy(o, "_$dart_jsObject", new A._convertToJS_closure0($.$get$_dartProxyCtor()));
    },
    _getJsProxy(o, propertyName, createProxy) {
      var jsProxy = A._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        A._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart(o) {
      var t1, t2;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else {
        o instanceof Object;
        if (o instanceof Object && type$.TypedData._is(o))
          return o;
        else if (o instanceof Date) {
          t1 = A._asInt(o.getTime());
          if (Math.abs(t1) <= 864e13)
            t2 = false;
          else
            t2 = true;
          if (t2)
            A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + t1, null));
          A.checkNotNullable(false, "isUtc", type$.bool);
          return new A.DateTime(t1, false);
        } else if (o.constructor === $.$get$_dartProxyCtor())
          return o.o;
        else
          return A._wrapToDart(o);
      }
    },
    _wrapToDart(o) {
      if (typeof o == "function")
        return A._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new A._wrapToDart_closure());
      if (o instanceof Array)
        return A._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new A._wrapToDart_closure0());
      return A._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new A._wrapToDart_closure1());
    },
    _getDartProxy(o, propertyName, createProxy) {
      var dartProxy = A._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        A._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    _convertDartFunctionFast(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast(callback, $arguments) {
      type$.List_dynamic._as($arguments);
      return A.Function_apply(type$.Function._as(callback), $arguments);
    },
    allowInterop(f, $F) {
      if (typeof f == "function")
        return f;
      else
        return $F._as(A._convertDartFunctionFast(f));
    },
    JsObject__convertDataTree__convert: function JsObject__convertDataTree__convert(t0) {
      this._convertedObjects = t0;
    },
    _convertToJS_closure: function _convertToJS_closure() {
    },
    _convertToJS_closure0: function _convertToJS_closure0(t0) {
      this.ctor = t0;
    },
    _wrapToDart_closure: function _wrapToDart_closure() {
    },
    _wrapToDart_closure0: function _wrapToDart_closure0() {
    },
    _wrapToDart_closure1: function _wrapToDart_closure1() {
    },
    JsObject: function JsObject(t0) {
      this._js$_jsObject = t0;
    },
    JsFunction: function JsFunction(t0) {
      this._js$_jsObject = t0;
    },
    JsArray: function JsArray(t0, t1) {
      this._js$_jsObject = t0;
      this.$ti = t1;
    },
    _JsArray_JsObject_ListMixin: function _JsArray_JsObject_ListMixin() {
    },
    jsify(object) {
      if (!type$.Map_dynamic_dynamic._is(object) && !type$.Iterable_dynamic._is(object))
        throw A.wrapException(A.ArgumentError$("object must be a Map or Iterable", null));
      return A._convertDataTree(object);
    },
    _convertDataTree(data) {
      var t1 = new A._convertDataTree__convert(new A._IdentityHashMap(type$._IdentityHashMap_dynamic_dynamic)).call$1(data);
      t1.toString;
      return t1;
    },
    promiseToFuture(jsPromise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer, $T), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    _convertDataTree__convert: function _convertDataTree__convert(t0) {
      this._convertedObjects = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    Endian: function Endian() {
    },
    CanonicalizedMap: function CanonicalizedMap() {
    },
    CanonicalizedMap_addAll_closure: function CanonicalizedMap_addAll_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_forEach_closure: function CanonicalizedMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CanonicalizedMap_keys_closure: function CanonicalizedMap_keys_closure(t0) {
      this.$this = t0;
    },
    _hexEncode(bytes) {
      var i, j, byte, j0, t3,
        _s16_ = "0123456789abcdef",
        t1 = bytes.length,
        t2 = t1 * 2,
        charCodes = new Uint8Array(t2);
      for (i = 0, j = 0; i < t1; ++i) {
        byte = bytes[i];
        j0 = j + 1;
        t3 = B.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4 & 15);
        if (!(j < t2))
          return A.ioore(charCodes, j);
        charCodes[j] = t3;
        j = j0 + 1;
        t3 = B.JSString_methods._codeUnitAt$1(_s16_, byte & 15);
        if (!(j0 < t2))
          return A.ioore(charCodes, j0);
        charCodes[j0] = t3;
      }
      return A.String_String$fromCharCodes(charCodes, 0, null);
    },
    Digest: function Digest(t0) {
      this.bytes = t0;
    },
    DigestSink: function DigestSink() {
      this._digest_sink$_value = null;
    },
    Hash: function Hash() {
    },
    HashSink: function HashSink() {
    },
    _HmacSink$(sink, hash, key) {
      var t1 = new A._HmacSink(new A._ByteAdapterSink(A._Sha1Sink$(type$.Sink_Digest._as(sink))), new A.DigestSink());
      t1._HmacSink$3(sink, hash, key);
      return t1;
    },
    Hmac: function Hmac(t0, t1) {
      this._hash = t0;
      this._key = t1;
    },
    _HmacSink: function _HmacSink(t0, t1) {
      var _ = this;
      _._outerSink = t0;
      _._innerResultSink = t1;
      _.___HmacSink__innerSink_F = $;
      _._isClosed = false;
    },
    _Sha1Sink$(sink) {
      var t1 = new Uint32Array(5),
        t2 = new Uint32Array(80),
        t3 = new Uint8Array(0),
        t4 = new Uint32Array(16);
      t1[0] = 1732584193;
      t1[1] = 4023233417;
      t1[2] = 2562383102;
      t1[3] = 271733878;
      t1[4] = 3285377520;
      return new A._Sha1Sink(t1, t2, sink, t4, new A.Uint8Buffer(t3, 0));
    },
    _Sha1: function _Sha1() {
    },
    _Sha1Sink: function _Sha1Sink(t0, t1, t2, t3, t4) {
      var _ = this;
      _.digest = t0;
      _._extended = t1;
      _._hash_sink$_sink = t2;
      _._currentChunk = t3;
      _._lengthInBytes = 0;
      _._pendingData = t4;
      _._hash_sink$_isClosed = false;
    },
    Env: function Env() {
    },
    DirEntry: function DirEntry() {
    },
    ReadFileOptions: function ReadFileOptions() {
    },
    EdgeHttpClient: function EdgeHttpClient(t0) {
      this._ioClient = t0;
    },
    EdgeHttpClient_send_closure: function EdgeHttpClient_send_closure(t0) {
      this.resHeaders = t0;
    },
    AbortController: function AbortController(t0) {
      this._abort$_delegate = t0;
    },
    AbortSignal: function AbortSignal(t0) {
      this._abort$_delegate = t0;
    },
    Headers: function Headers(t0) {
      this._headers$_delegate = t0;
    },
    HeadersProps_get_entries(_this) {
      var t1 = A.fromJSIterator(_this.entries(), type$.dynamic),
        t2 = t1.$ti;
      return A.MappedIterable_MappedIterable(t1, t2._eval$1("List<String>(Iterable.E)")._as(new A.HeadersProps_get_entries_closure()), t2._eval$1("Iterable.E"), type$.List_String);
    },
    HeadersProps_toMap(_this) {
      var t2, t3, t4,
        t1 = type$.String,
        map = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t1 = A.HeadersProps_get_entries(_this), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1]; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        t4 = J.getInterceptor$asx(t3);
        map.$indexSet(0, t4.$index(t3, 0), t4.$index(t3, 1));
      }
      return map;
    },
    Headers0: function Headers0() {
    },
    HeadersProps_get_entries_closure: function HeadersProps_get_entries_closure() {
    },
    fromJSIterator(jsIterable, $T) {
      return A.fromJSIterator$body(jsIterable, $T, $T);
    },
    fromJSIterator$body($async$jsIterable, $async$$T, $async$type) {
      return A._makeSyncStarIterable(function() {
        var jsIterable = $async$jsIterable,
          $T = $async$$T;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, t4, result;
        return function $async$fromJSIterator($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = type$.JavaScriptObject, t2 = jsIterable == null, t3 = type$.Object;
              case 2:
                // for condition
                // trivial condition
                t4 = t2 ? t3._as(jsIterable) : jsIterable;
                result = t1._as(t4.next());
                if (A._asBool(result.done)) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                $async$goto = 4;
                return $T._as(result.value);
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return A._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return A._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, $async$type);
    },
    Symbol1: function Symbol1() {
    },
    Iterator0: function Iterator0() {
    },
    AsyncIterator: function AsyncIterator() {
    },
    IteratorResult: function IteratorResult() {
    },
    futureToPromise(future, $T) {
      return new self.Promise(A.allowInterop(new A.futureToPromise_closure(future, $T), $T._eval$1("~(~(0),Function)")), $T);
    },
    Promise: function Promise() {
    },
    futureToPromise_closure: function futureToPromise_closure(t0, t1) {
      this.future = t0;
      this.T = t1;
    },
    ReadableStreamReaderProps_read(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.ReadResult),
        $async$returnValue, t2, done, promise, t1, result;
      var $async$ReadableStreamReaderProps_read = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              promise = _this.read();
              t1 = promise == null ? type$.Object._as(promise) : promise;
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(t1, type$.dynamic), $async$ReadableStreamReaderProps_read);
            case 3:
              // returning from await.
              result = $async$result;
              t1 = result == null;
              t2 = t1 ? type$.Object._as(result) : result;
              done = A._asBool(t2.done);
              t1 = t1 ? type$.Object._as(result) : result;
              $async$returnValue = new A.ReadResult(done, type$.nullable_Uint8List._as(t1.value));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$ReadableStreamReaderProps_read, $async$completer);
    },
    streamFromJSReader(reader) {
      var $async$streamFromJSReader = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        switch ($async$errorCode) {
          case 2:
            $async$next = $async$nextWhenCanceled;
            $async$goto = $async$next.pop();
            break;
          case 1:
            $async$currentError = $async$result;
            $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
            case 3:
              // for condition
              // trivial condition
              $async$goto = 5;
              return A._asyncStarHelper(A.ReadableStreamReaderProps_read(reader), $async$streamFromJSReader, $async$controller);
            case 5:
              // returning from await.
              result = $async$result;
              if (result.done) {
                // goto after for
                $async$goto = 4;
                break;
              }
              t1 = result.value;
              t1.toString;
              $async$goto = 6;
              $async$nextWhenCanceled = [1];
              return A._asyncStarHelper(A._IterationMarker_yieldSingle(t1), $async$streamFromJSReader, $async$controller);
            case 6:
              // after yield
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
            case 1:
              // return
              return A._asyncStarHelper(null, 0, $async$controller);
            case 2:
              // rethrow
              return A._asyncStarHelper($async$currentError, 1, $async$controller);
          }
      });
      var $async$goto = 0,
        $async$controller = A._makeAsyncStarStreamController($async$streamFromJSReader, type$.List_int),
        $async$nextWhenCanceled, $async$handler = 2, $async$currentError, $async$next = [], result, t1;
      return A._streamOfController($async$controller);
    },
    ReadableStream: function ReadableStream() {
    },
    ReadResult: function ReadResult(t0, t1) {
      this.done = t0;
      this.value = t1;
    },
    ReadableStreamDefaultReader: function ReadableStreamDefaultReader() {
    },
    requestFromResource(resource) {
      switch (A.getRuntimeType(resource)) {
        case B.Type_StringValue_KTQ:
          return A.Request__staticInteropFactoryStub(type$.StringValue._as(resource).get$url());
        case B.Type_UriValue_MMc:
          return A.Request__staticInteropFactoryStub(resource.uri.toString$0(0));
        case B.Type_RequestValue_EkK:
          return A.RequestExtension_get_delegate(type$.RequestValue._as(resource).get$request());
        default:
          throw A.wrapException(A.Exception_Exception("Unknown resource type " + A.getRuntimeType(resource).toString$0(0)));
      }
    },
    isBasicType(value) {
      if (value == null || typeof value == "number" || A._isBool(value) || typeof value == "string")
        return true;
      return false;
    },
    dartify(jsObject, $T) {
      var t1, result, t2, t3, t4, t5, t6;
      if (A.isBasicType(jsObject))
        return $T._as(jsObject);
      if (type$.List_dynamic._is(jsObject))
        return $T._as(J.map$1$1$ax(jsObject, B.CONSTANT0, type$.dynamic).toList$0(0));
      t1 = type$.dynamic;
      result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, t1);
      for (t2 = J.get$iterator$ax(self.Object.keys(jsObject)), t3 = jsObject == null, t4 = type$.Object; t2.moveNext$0();) {
        t5 = A._asString(t2.get$current());
        t6 = t3 ? t4._as(jsObject) : jsObject;
        result.$indexSet(0, t5, A.dartify(t6[t5], t1));
      }
      return $T._as(result);
    },
    JavaScriptObject0: function JavaScriptObject0() {
    },
    HttpClientRequest$_(method, _resource, _abortController, pendingRequests) {
      var t1 = new A.HttpClientRequest(new A.HttpHeaders(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Set_String)), method, _resource, new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_HttpClientResponse), type$._AsyncCompleter_HttpClientResponse), _abortController);
      t1.HttpClientRequest$_$4(method, _resource, _abortController, pendingRequests);
      return t1;
    },
    HttpHeaders_HttpHeaders$fromFetchResponseHeaders(headers) {
      var ioHeaders = new A.HttpHeaders(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Set_String));
      A.HeadersProps_toMap(headers._headers$_delegate).forEach$1(0, new A.HttpHeaders_HttpHeaders$fromFetchResponseHeaders_closure(ioHeaders));
      return ioHeaders;
    },
    HttpClient: function HttpClient(t0) {
      this._pendingRequests = t0;
    },
    HttpClientRequest: function HttpClientRequest(t0, t1, t2, t3, t4) {
      var _ = this;
      _.headers = t0;
      _.method = t1;
      _.__HttpClientRequest_uri_F = $;
      _._resource = t2;
      _._io_http_client$_body = null;
      _._doneCompleter = t3;
      _._abortController = t4;
    },
    HttpClientRequest$__closure: function HttpClientRequest$__closure(t0, t1) {
      this.$this = t0;
      this.pendingRequests = t1;
    },
    HttpHeaders: function HttpHeaders(t0) {
      this._io_http_client$_headers = t0;
    },
    HttpHeaders_HttpHeaders$fromFetchResponseHeaders_closure: function HttpHeaders_HttpHeaders$fromFetchResponseHeaders_closure(t0) {
      this.ioHeaders = t0;
    },
    HttpHeaders_forEach_closure: function HttpHeaders_forEach_closure(t0) {
      this.action = t0;
    },
    HttpHeaders_toMap_closure: function HttpHeaders_toMap_closure(t0) {
      this.map = t0;
    },
    HttpClientResponse: function HttpClientResponse(t0) {
      var _ = this;
      _._response = t0;
      _.__HttpClientResponse__body_F = _.__HttpClientResponse_headers_F = _.__HttpClientResponse_contentLength_F = $;
    },
    RequestExtension_get_delegate(_this) {
      return _this.get$_request$_delegate();
    },
    Request: function Request(t0) {
      this._request$_delegate = t0;
    },
    Resource_getUri(resource) {
      return resource.uri;
    },
    UriValue: function UriValue(t0) {
      this.uri = t0;
    },
    Response_Response$json(data) {
      var t1 = A.jsify(data),
        t2 = self.undefined;
      t2 = t2;
      if (t2 == null)
        t2 = window.undefined;
      return new A.Response(self.Response.json(t1, type$.JavaScriptObject._as({status: 200, statusText: "", headers: t2})));
    },
    Response: function Response(t0) {
      this._delegate = t0;
    },
    QueueMedia___fromMap_tearOff(map) {
      var t1 = J.getInterceptor$asx(map);
      return new A.QueueMedia(A._asString(t1.$index(map, "media_id")), A._asStringQ(t1.$index(map, "url")), A._asString(t1.$index(map, "type")), A._asString(t1.$index(map, "name")), A._asString(t1.$index(map, "extension_name")));
    },
    QueueTweetModelEdge: function QueueTweetModelEdge(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.id = t0;
      _.content = t1;
      _.media = t2;
      _.polls = t3;
      _.mediaIds = t4;
      _.createdAt = t5;
    },
    QueueTweetModelEdge_toJson_closure: function QueueTweetModelEdge_toJson_closure() {
    },
    QueueMedia: function QueueMedia(t0, t1, t2, t3, t4) {
      var _ = this;
      _.mediaId = t0;
      _.url = t1;
      _.type = t2;
      _.name = t3;
      _.extensionName = t4;
    },
    Signature: function Signature(t0, t1, t2, t3) {
      var _ = this;
      _.url = t0;
      _.params = t1;
      _.apiSecretKey = t2;
      _.tokenSecretKey = t3;
    },
    Signature_signatureDate_closure: function Signature_signatureDate_closure(t0) {
      this.encodedParams = t0;
    },
    Signature_encodeParams_closure: function Signature_encodeParams_closure(t0) {
      this.encodedParams = t0;
    },
    Signature_encodeParams_closure0: function Signature_encodeParams_closure0(t0) {
      this.encodedParams = t0;
    },
    generateAuthHeader(params) {
      var t1 = A._instanceType(params)._eval$1("LinkedHashMapKeyIterable<1>");
      return "OAuth " + A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(params, t1), t1._eval$1("String(Iterable.E)")._as(new A.generateAuthHeader_closure(params)), t1._eval$1("Iterable.E"), type$.String).join$1(0, ", ");
    },
    httpPost(url, authParams, body, apiKey, apiSecretKey, tokenSecret) {
      return A.httpPost$body(url, authParams, body, apiKey, apiSecretKey, tokenSecret);
    },
    httpPost$body(url, authParams, body, apiKey, apiSecretKey, tokenSecret) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.TwitterApiResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, signature, header, res, t1, consumerSecret, key, text, key0, t2, t3, t4, exception, $async$exception;
      var $async$httpPost = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              signature = new A.Signature(url, authParams, apiSecretKey, tokenSecret);
              t1 = signature;
              consumerSecret = A._Uri__uriEncode(B.List_KIf, t1.apiSecretKey, B.C_Utf8Codec, false);
              tokenSecret = A._Uri__uriEncode(B.List_KIf, t1.tokenSecretKey, B.C_Utf8Codec, false);
              key = consumerSecret + "&" + tokenSecret;
              text = t1.signatureDate$0();
              key0 = new A.CodeUnits(key);
              t1 = new Uint8Array(64);
              key = key.length > 64 ? B.C__Sha1.convert$1(key0).bytes : key0;
              B.NativeUint8List_methods.setRange$3(t1, 0, J.get$length$asx(key), key);
              t1 = type$.Base64Codec._eval$1("Codec.S")._as(new A.Hmac(B.C__Sha1, t1).convert$1(new A.CodeUnits(text)).bytes);
              authParams.$indexSet(0, "oauth_signature", B.C_Base64Codec.get$encoder().convert$1(t1));
              A.print(authParams.$index(0, "oauth_signature"));
              header = A.generateAuthHeader(authParams);
              t1 = A.Uri_parse(url, 0, null);
              t2 = B.C_JsonCodec.encode$2$toEncodable(body, null);
              t3 = header;
              t3.toString;
              t4 = type$.String;
              $async$goto = 7;
              return A._asyncAwait(new A.EdgeHttpClient(new A.HttpClient(A.LinkedHashSet_LinkedHashSet$_empty(type$.HttpClientRequest_2))).post$3$body$headers(t1, t2, A.LinkedHashMap_LinkedHashMap$_literal(["Authorization", t3, "Content-Type", "application/json"], t4, t4)), $async$httpPost);
            case 7:
              // returning from await.
              res = $async$result;
              if (res.statusCode !== 201) {
                t1 = res.statusCode;
                t2 = res.reasonPhrase;
                $async$returnValue = new A.TwitterApiResponse(null, t1, t2);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = res;
              t1 = A._asStringQ(J.$index$asx(J.$index$asx(B.C_JsonCodec.decode$2$reviver(A.encodingForCharset(A._contentTypeForHeaders(t1.headers).parameters._map.$index(0, "charset")).decode$1(t1.bodyBytes), null), "data"), "id"));
              $async$returnValue = new A.TwitterApiResponse(t1, 200, "Tweet created successfully");
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              $async$returnValue = new A.TwitterApiResponse(null, 500, "INTERNAL SERVER ERROR");
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$httpPost, $async$completer);
    },
    generateAuthHeader_closure: function generateAuthHeader_closure(t0) {
      this.params = t0;
    },
    TwitterApiResponse: function TwitterApiResponse(t0, t1, t2) {
      this.id = t0;
      this.statusCode = t1;
      this.message = t2;
    },
    FunctionsClient: function FunctionsClient(t0) {
      this._headers = t0;
    },
    GotrueFetch: function GotrueFetch() {
    },
    GoTrueAdminApi: function GoTrueAdminApi(t0, t1, t2) {
      var _ = this;
      _._url = t0;
      _._gotrue_admin_api$_headers = t1;
      _._httpClient = t2;
      _.__GoTrueAdminApi_mfa_F = _.__GoTrueAdminApi__fetch_FI = $;
    },
    GoTrueAdminMFAApi: function GoTrueAdminMFAApi() {
    },
    GoTrueClient: function GoTrueClient(t0, t1) {
      var _ = this;
      _.__GoTrueClient_mfa_F = _.__GoTrueClient_admin_F = $;
      _._gotrue_client$_httpClient = t0;
      _.__GoTrueClient__fetch_FI = $;
      _._onAuthStateChangeController = t1;
    },
    GoTrueMFAApi: function GoTrueMFAApi() {
    },
    BaseRequest: function BaseRequest() {
    },
    BaseRequest_closure: function BaseRequest_closure() {
    },
    BaseRequest_closure0: function BaseRequest_closure0() {
    },
    BaseResponse: function BaseResponse() {
    },
    ByteStream: function ByteStream(t0) {
      this._stream = t0;
    },
    ByteStream_toBytes_closure: function ByteStream_toBytes_closure(t0) {
      this.completer = t0;
    },
    Request$(method, url) {
      var t1 = new Uint8Array(0),
        t2 = $.$get$BaseRequest__tokenRE()._nativeRegExp;
      if (!t2.test(method))
        A.throwExpression(A.ArgumentError$value(method, "method", "Not a valid method"));
      t2 = type$.String;
      return new A.Request0(t1, method, url, A.LinkedHashMap_LinkedHashMap(new A.BaseRequest_closure(), new A.BaseRequest_closure0(), null, t2, t2));
    },
    Request0: function Request0(t0, t1, t2, t3) {
      var _ = this;
      _._bodyBytes = t0;
      _.method = t1;
      _.url = t2;
      _.headers = t3;
      _._finalized = false;
    },
    Response_fromStream(response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, body, t1, t2, t3, t4, t5, t6, t7, t8;
      var $async$Response_fromStream = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(response.stream.toBytes$0(), $async$Response_fromStream);
            case 3:
              // returning from await.
              body = $async$result;
              t1 = response.statusCode;
              t2 = response.request;
              t3 = response.headers;
              t4 = response.isRedirect;
              t5 = response.persistentConnection;
              t6 = response.reasonPhrase;
              t7 = A.toUint8List(body);
              t8 = body.length;
              t7 = new A.Response0(t7, t2, t1, t6, t8, t3, t4, t5);
              t7.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t1, t8, t3, t4, t5, t6, t2);
              $async$returnValue = t7;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Response_fromStream, $async$completer);
    },
    _contentTypeForHeaders(headers) {
      var contentType = headers.$index(0, "content-type");
      if (contentType != null)
        return A.MediaType_MediaType$parse(contentType);
      return A.MediaType$("application", "octet-stream", null);
    },
    Response0: function Response0(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.bodyBytes = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    StreamedRequest$(method, url) {
      var _null = null,
        t1 = A.StreamController_StreamController(_null, _null, _null, true, type$.List_int),
        t2 = $.$get$BaseRequest__tokenRE()._nativeRegExp;
      if (!t2.test(method))
        A.throwExpression(A.ArgumentError$value(method, "method", "Not a valid method"));
      t2 = type$.String;
      return new A.StreamedRequest(t1, method, url, A.LinkedHashMap_LinkedHashMap(new A.BaseRequest_closure(), new A.BaseRequest_closure0(), _null, t2, t2));
    },
    StreamedRequest: function StreamedRequest(t0, t1, t2, t3) {
      var _ = this;
      _._streamed_request$_controller = t0;
      _.method = t1;
      _.url = t2;
      _.headers = t3;
      _._finalized = false;
    },
    StreamedResponse: function StreamedResponse(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.stream = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    CaseInsensitiveMap$from(other, $V) {
      var t1 = new A.CaseInsensitiveMap(new A.CaseInsensitiveMap$from_closure(), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, $V._eval$1("MapEntry<String,0>")), $V._eval$1("CaseInsensitiveMap<0>"));
      t1.addAll$1(0, other);
      return t1;
    },
    CaseInsensitiveMap: function CaseInsensitiveMap(t0, t1, t2) {
      this._canonicalize = t0;
      this._base = t1;
      this.$ti = t2;
    },
    CaseInsensitiveMap$from_closure: function CaseInsensitiveMap$from_closure() {
    },
    MediaType_MediaType$parse(mediaType) {
      return A.wrapFormatException("media type", mediaType, new A.MediaType_MediaType$parse_closure(mediaType), type$.MediaType);
    },
    MediaType$(type, subtype, parameters) {
      var t1 = type$.String;
      t1 = parameters == null ? A.LinkedHashMap_LinkedHashMap$_empty(t1, t1) : A.CaseInsensitiveMap$from(parameters, t1);
      return new A.MediaType(type.toLowerCase(), subtype.toLowerCase(), new A.UnmodifiableMapView(t1, type$.UnmodifiableMapView_String_String));
    },
    MediaType: function MediaType(t0, t1, t2) {
      this.type = t0;
      this.subtype = t1;
      this.parameters = t2;
    },
    MediaType_MediaType$parse_closure: function MediaType_MediaType$parse_closure(t0) {
      this.mediaType = t0;
    },
    MediaType_toString_closure: function MediaType_toString_closure(t0) {
      this.buffer = t0;
    },
    MediaType_toString__closure: function MediaType_toString__closure() {
    },
    expectQuotedString(scanner) {
      var string;
      scanner.expect$2$name($.$get$_quotedString(), "quoted string");
      string = scanner.get$lastMatch().$index(0, 0);
      return A.stringReplaceAllFuncUnchecked(B.JSString_methods.substring$2(string, 1, string.length - 1), type$.Pattern._as($.$get$_quotedPair()), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new A.expectQuotedString_closure())), type$.nullable_String_Function_String._as(null));
    },
    expectQuotedString_closure: function expectQuotedString_closure() {
    },
    Accelerometer: function Accelerometer() {
    },
    AccelerometerSensorOptions: function AccelerometerSensorOptions() {
    },
    LinearAccelerationSensor: function LinearAccelerationSensor() {
    },
    GravitySensor: function GravitySensor() {
    },
    AccelerometerReadingValues: function AccelerometerReadingValues() {
    },
    LinearAccelerationReadingValues: function LinearAccelerationReadingValues() {
    },
    GravityReadingValues: function GravityReadingValues() {
    },
    AmbientLightSensor: function AmbientLightSensor() {
    },
    AmbientLightReadingValues: function AmbientLightReadingValues() {
    },
    XRAnchor: function XRAnchor() {
    },
    XRAnchorSet: function XRAnchorSet() {
    },
    ANGLEInstancedArrays: function ANGLEInstancedArrays() {
    },
    HTMLAttributionSrcElementUtils: function HTMLAttributionSrcElementUtils() {
    },
    AudioOutputOptions: function AudioOutputOptions() {
    },
    BackgroundFetchManager: function BackgroundFetchManager() {
    },
    BackgroundFetchUIOptions: function BackgroundFetchUIOptions() {
    },
    BackgroundFetchOptions: function BackgroundFetchOptions() {
    },
    BackgroundFetchRegistration: function BackgroundFetchRegistration() {
    },
    BackgroundFetchRecord: function BackgroundFetchRecord() {
    },
    BackgroundFetchEvent: function BackgroundFetchEvent() {
    },
    BackgroundFetchEventInit: function BackgroundFetchEventInit() {
    },
    BackgroundFetchUpdateUIEvent: function BackgroundFetchUpdateUIEvent() {
    },
    SyncManager: function SyncManager() {
    },
    SyncEvent: function SyncEvent() {
    },
    SyncEventInit: function SyncEventInit() {
    },
    NavigatorBadge: function NavigatorBadge() {
    },
    BatteryManager: function BatteryManager() {
    },
    CaptureHandleConfig: function CaptureHandleConfig() {
    },
    CaptureHandle: function CaptureHandle() {
    },
    ClipboardEventInit: function ClipboardEventInit() {
    },
    ClipboardEvent: function ClipboardEvent() {
    },
    ClipboardItem: function ClipboardItem() {
    },
    ClipboardItemOptions: function ClipboardItemOptions() {
    },
    Clipboard: function Clipboard() {
    },
    ClipboardPermissionDescriptor: function ClipboardPermissionDescriptor() {
    },
    CloseWatcher: function CloseWatcher() {
    },
    CloseWatcherOptions: function CloseWatcherOptions() {
    },
    CompressionStream: function CompressionStream() {
    },
    DecompressionStream: function DecompressionStream() {
    },
    PressureObserver: function PressureObserver() {
    },
    PressureRecord: function PressureRecord() {
    },
    PressureObserverOptions: function PressureObserverOptions() {
    },
    Console: function Console() {
    },
    ContactAddress: function ContactAddress() {
    },
    ContactInfo: function ContactInfo() {
    },
    ContactsSelectOptions: function ContactsSelectOptions() {
    },
    ContactsManager: function ContactsManager() {
    },
    ContentDescription: function ContentDescription() {
    },
    ContentIndex: function ContentIndex() {
    },
    ContentIndexEventInit: function ContentIndexEventInit() {
    },
    ContentIndexEvent: function ContentIndexEvent() {
    },
    CookieStore: function CookieStore() {
    },
    CookieStoreGetOptions: function CookieStoreGetOptions() {
    },
    CookieInit: function CookieInit() {
    },
    CookieStoreDeleteOptions: function CookieStoreDeleteOptions() {
    },
    CookieListItem: function CookieListItem() {
    },
    CookieStoreManager: function CookieStoreManager() {
    },
    CookieChangeEvent: function CookieChangeEvent() {
    },
    CookieChangeEventInit: function CookieChangeEventInit() {
    },
    ExtendableCookieChangeEvent: function ExtendableCookieChangeEvent() {
    },
    ExtendableCookieChangeEventInit: function ExtendableCookieChangeEventInit() {
    },
    CrashReportBody: function CrashReportBody() {
    },
    Credential: function Credential() {
    },
    CredentialUserData: function CredentialUserData() {
    },
    CredentialsContainer: function CredentialsContainer() {
    },
    CredentialData: function CredentialData() {
    },
    CredentialRequestOptions: function CredentialRequestOptions() {
    },
    CredentialCreationOptions: function CredentialCreationOptions() {
    },
    PasswordCredential: function PasswordCredential() {
    },
    PasswordCredentialData: function PasswordCredentialData() {
    },
    FederatedCredential: function FederatedCredential() {
    },
    FederatedCredentialRequestOptions: function FederatedCredentialRequestOptions() {
    },
    FederatedCredentialInit: function FederatedCredentialInit() {
    },
    CSPViolationReportBody: function CSPViolationReportBody() {
    },
    SecurityPolicyViolationEvent: function SecurityPolicyViolationEvent() {
    },
    SecurityPolicyViolationEventInit: function SecurityPolicyViolationEventInit() {
    },
    ScriptingPolicyReportBody: function ScriptingPolicyReportBody() {
    },
    AnimationWorkletGlobalScope: function AnimationWorkletGlobalScope() {
    },
    WorkletAnimationEffect: function WorkletAnimationEffect() {
    },
    WorkletAnimation: function WorkletAnimation() {
    },
    WorkletGroupEffect: function WorkletGroupEffect() {
    },
    AnimationEvent: function AnimationEvent() {
    },
    AnimationEventInit: function AnimationEventInit() {
    },
    CSSKeyframeRule: function CSSKeyframeRule() {
    },
    CSSKeyframesRule: function CSSKeyframesRule() {
    },
    CSSAnimation: function CSSAnimation() {
    },
    CSSLayerBlockRule: function CSSLayerBlockRule() {
    },
    CSSLayerStatementRule: function CSSLayerStatementRule() {
    },
    CSSConditionRule: function CSSConditionRule() {
    },
    CSSMediaRule: function CSSMediaRule() {
    },
    CSSSupportsRule: function CSSSupportsRule() {
    },
    ContentVisibilityAutoStateChangedEvent: function ContentVisibilityAutoStateChangedEvent() {
    },
    ContentVisibilityAutoStateChangedEventInit: function ContentVisibilityAutoStateChangedEventInit() {
    },
    CSSContainerRule: function CSSContainerRule() {
    },
    CSSCounterStyleRule: function CSSCounterStyleRule() {
    },
    CSSViewportRule: function CSSViewportRule() {
    },
    FontFaceDescriptors: function FontFaceDescriptors() {
    },
    FontFace: function FontFace() {
    },
    FontFaceFeatures: function FontFaceFeatures() {
    },
    FontFaceVariationAxis: function FontFaceVariationAxis() {
    },
    FontFaceVariations: function FontFaceVariations() {
    },
    FontFacePalette: function FontFacePalette() {
    },
    FontFacePalettes: function FontFacePalettes() {
    },
    FontFaceSetLoadEventInit: function FontFaceSetLoadEventInit() {
    },
    FontFaceSetLoadEvent: function FontFaceSetLoadEvent() {
    },
    FontFaceSet: function FontFaceSet() {
    },
    FontFaceSource: function FontFaceSource() {
    },
    CSSFontFaceRule: function CSSFontFaceRule() {
    },
    CSSFontFeatureValuesRule: function CSSFontFeatureValuesRule() {
    },
    CSSFontFeatureValuesMap: function CSSFontFeatureValuesMap() {
    },
    CSSFontPaletteValuesRule: function CSSFontPaletteValuesRule() {
    },
    Highlight: function Highlight() {
    },
    HighlightRegistry: function HighlightRegistry() {
    },
    LayoutWorkletGlobalScope: function LayoutWorkletGlobalScope() {
    },
    LayoutOptions: function LayoutOptions() {
    },
    LayoutChild: function LayoutChild() {
    },
    LayoutFragment: function LayoutFragment() {
    },
    IntrinsicSizes: function IntrinsicSizes() {
    },
    LayoutConstraints: function LayoutConstraints() {
    },
    LayoutConstraintsOptions: function LayoutConstraintsOptions() {
    },
    ChildBreakToken: function ChildBreakToken() {
    },
    BreakToken: function BreakToken() {
    },
    BreakTokenOptions: function BreakTokenOptions() {
    },
    LayoutEdges: function LayoutEdges() {
    },
    FragmentResultOptions: function FragmentResultOptions() {
    },
    FragmentResult: function FragmentResult() {
    },
    IntrinsicSizesResultOptions: function IntrinsicSizesResultOptions() {
    },
    SVGClipPathElement: function SVGClipPathElement() {
    },
    SVGMaskElement: function SVGMaskElement() {
    },
    FocusableAreasOption: function FocusableAreasOption() {
    },
    SpatialNavigationSearchOptions: function SpatialNavigationSearchOptions() {
    },
    NavigationEvent: function NavigationEvent() {
    },
    NavigationEventInit: function NavigationEventInit() {
    },
    CSSNestingRule: function CSSNestingRule() {
    },
    PaintWorkletGlobalScope: function PaintWorkletGlobalScope() {
    },
    PaintRenderingContext2DSettings: function PaintRenderingContext2DSettings() {
    },
    PaintRenderingContext2D: function PaintRenderingContext2D() {
    },
    PaintSize: function PaintSize() {
    },
    CSSParserOptions: function CSSParserOptions() {
    },
    CSSParserRule: function CSSParserRule() {
    },
    CSSParserAtRule: function CSSParserAtRule() {
    },
    CSSParserQualifiedRule: function CSSParserQualifiedRule() {
    },
    CSSParserDeclaration: function CSSParserDeclaration() {
    },
    CSSParserValue: function CSSParserValue() {
    },
    CSSParserBlock: function CSSParserBlock() {
    },
    CSSParserFunction: function CSSParserFunction() {
    },
    PropertyDefinition: function PropertyDefinition() {
    },
    CSSPropertyRule: function CSSPropertyRule() {
    },
    CSSPseudoElement: function CSSPseudoElement() {
    },
    NamedFlowMap: function NamedFlowMap() {
    },
    NamedFlow: function NamedFlow() {
    },
    Region: function Region() {
    },
    TransitionEvent: function TransitionEvent() {
    },
    TransitionEventInit: function TransitionEventInit() {
    },
    CSSTransition: function CSSTransition() {
    },
    CSSStyleValue: function CSSStyleValue() {
    },
    StylePropertyMapReadOnly: function StylePropertyMapReadOnly() {
    },
    StylePropertyMap: function StylePropertyMap() {
    },
    CSSUnparsedValue: function CSSUnparsedValue() {
    },
    CSSVariableReferenceValue: function CSSVariableReferenceValue() {
    },
    CSSKeywordValue: function CSSKeywordValue() {
    },
    CSSNumericType: function CSSNumericType() {
    },
    CSSNumericValue: function CSSNumericValue() {
    },
    CSSUnitValue: function CSSUnitValue() {
    },
    CSSMathValue: function CSSMathValue() {
    },
    CSSMathSum: function CSSMathSum() {
    },
    CSSMathProduct: function CSSMathProduct() {
    },
    CSSMathNegate: function CSSMathNegate() {
    },
    CSSMathInvert: function CSSMathInvert() {
    },
    CSSMathMin: function CSSMathMin() {
    },
    CSSMathMax: function CSSMathMax() {
    },
    CSSMathClamp: function CSSMathClamp() {
    },
    CSSNumericArray: function CSSNumericArray() {
    },
    CSSTransformValue: function CSSTransformValue() {
    },
    CSSTransformComponent: function CSSTransformComponent() {
    },
    CSSTranslate: function CSSTranslate() {
    },
    CSSRotate: function CSSRotate() {
    },
    CSSScale: function CSSScale() {
    },
    CSSSkew: function CSSSkew() {
    },
    CSSSkewX: function CSSSkewX() {
    },
    CSSSkewY: function CSSSkewY() {
    },
    CSSPerspective: function CSSPerspective() {
    },
    CSSMatrixComponent: function CSSMatrixComponent() {
    },
    CSSMatrixComponentOptions: function CSSMatrixComponentOptions() {
    },
    CSSImageValue: function CSSImageValue() {
    },
    CSSColorValue: function CSSColorValue() {
    },
    Cssrgb: function Cssrgb() {
    },
    Csshsl: function Csshsl() {
    },
    Csshwb: function Csshwb() {
    },
    CSSLab: function CSSLab() {
    },
    Csslch: function Csslch() {
    },
    CSSOKLab: function CSSOKLab() {
    },
    Cssoklch: function Cssoklch() {
    },
    CSSColor: function CSSColor() {
    },
    MediaList: function MediaList() {
    },
    StyleSheet: function StyleSheet() {
    },
    CSSStyleSheet: function CSSStyleSheet() {
    },
    CSSStyleSheetInit: function CSSStyleSheetInit() {
    },
    StyleSheetList: function StyleSheetList() {
    },
    LinkStyle: function LinkStyle() {
    },
    CSSRuleList: function CSSRuleList() {
    },
    CSSRule: function CSSRule() {
    },
    CSSStyleRule: function CSSStyleRule() {
    },
    CSSImportRule: function CSSImportRule() {
    },
    CSSGroupingRule: function CSSGroupingRule() {
    },
    CSSPageRule: function CSSPageRule() {
    },
    CSSMarginRule: function CSSMarginRule() {
    },
    CSSNamespaceRule: function CSSNamespaceRule() {
    },
    CSSStyleDeclaration: function CSSStyleDeclaration() {
    },
    ElementCSSInlineStyle: function ElementCSSInlineStyle() {
    },
    Css: function Css() {
    },
    ScrollOptions: function ScrollOptions() {
    },
    ScrollToOptions: function ScrollToOptions() {
    },
    MediaQueryList: function MediaQueryList() {
    },
    MediaQueryListEvent: function MediaQueryListEvent() {
    },
    MediaQueryListEventInit: function MediaQueryListEventInit() {
    },
    Screen: function Screen() {
    },
    CaretPosition: function CaretPosition() {
    },
    ScrollIntoViewOptions: function ScrollIntoViewOptions() {
    },
    CheckVisibilityOptions: function CheckVisibilityOptions() {
    },
    BoxQuadOptions: function BoxQuadOptions() {
    },
    ConvertCoordinateOptions: function ConvertCoordinateOptions() {
    },
    GeometryUtils: function GeometryUtils() {
    },
    VisualViewport: function VisualViewport() {
    },
    CustomStateSet: function CustomStateSet() {
    },
    DataCue: function DataCue() {
    },
    DeprecationReportBody: function DeprecationReportBody() {
    },
    NavigatorDeviceMemory: function NavigatorDeviceMemory() {
    },
    DevicePosture: function DevicePosture() {
    },
    DigitalGoodsService: function DigitalGoodsService() {
    },
    ItemDetails: function ItemDetails() {
    },
    PurchaseDetails: function PurchaseDetails() {
    },
    Event: function Event() {
    },
    EventInit: function EventInit() {
    },
    CustomEvent: function CustomEvent() {
    },
    CustomEventInit: function CustomEventInit() {
    },
    EventTarget: function EventTarget() {
    },
    EventListenerOptions: function EventListenerOptions() {
    },
    AddEventListenerOptions: function AddEventListenerOptions() {
    },
    AbortController0: function AbortController0() {
    },
    AbortSignal0: function AbortSignal0() {
    },
    NonElementParentNode: function NonElementParentNode() {
    },
    DocumentOrShadowRoot: function DocumentOrShadowRoot() {
    },
    ParentNode: function ParentNode() {
    },
    NonDocumentTypeChildNode: function NonDocumentTypeChildNode() {
    },
    ChildNode: function ChildNode() {
    },
    Slottable: function Slottable() {
    },
    NodeList: function NodeList() {
    },
    HTMLCollection: function HTMLCollection() {
    },
    MutationObserver: function MutationObserver() {
    },
    MutationObserverInit: function MutationObserverInit() {
    },
    MutationRecord: function MutationRecord() {
    },
    Node: function Node() {
    },
    GetRootNodeOptions: function GetRootNodeOptions() {
    },
    Document: function Document() {
    },
    XMLDocument: function XMLDocument() {
    },
    ElementCreationOptions: function ElementCreationOptions() {
    },
    DOMImplementation: function DOMImplementation() {
    },
    DocumentType: function DocumentType() {
    },
    DocumentFragment: function DocumentFragment() {
    },
    ShadowRoot: function ShadowRoot() {
    },
    Element: function Element() {
    },
    ShadowRootInit: function ShadowRootInit() {
    },
    NamedNodeMap: function NamedNodeMap() {
    },
    Attr: function Attr() {
    },
    CharacterData: function CharacterData() {
    },
    Text: function Text() {
    },
    CDATASection: function CDATASection() {
    },
    ProcessingInstruction: function ProcessingInstruction() {
    },
    Comment: function Comment() {
    },
    AbstractRange: function AbstractRange() {
    },
    StaticRangeInit: function StaticRangeInit() {
    },
    StaticRange: function StaticRange() {
    },
    Range: function Range() {
    },
    NodeIterator: function NodeIterator() {
    },
    TreeWalker: function TreeWalker() {
    },
    NodeFilter: function NodeFilter() {
    },
    DOMTokenList: function DOMTokenList() {
    },
    XPathResult: function XPathResult() {
    },
    XPathExpression: function XPathExpression() {
    },
    XPathNSResolver: function XPathNSResolver() {
    },
    XPathEvaluatorBase: function XPathEvaluatorBase() {
    },
    XPathEvaluator: function XPathEvaluator() {
    },
    XSLTProcessor: function XSLTProcessor() {
    },
    XMLSerializer: function XMLSerializer() {
    },
    InnerHTML: function InnerHTML() {
    },
    EditContextInit: function EditContextInit() {
    },
    EditContext: function EditContext() {
    },
    TextUpdateEventInit: function TextUpdateEventInit() {
    },
    TextUpdateEvent: function TextUpdateEvent() {
    },
    TextFormatInit: function TextFormatInit() {
    },
    TextFormat: function TextFormat() {
    },
    TextFormatUpdateEventInit: function TextFormatUpdateEventInit() {
    },
    TextFormatUpdateEvent: function TextFormatUpdateEvent() {
    },
    CharacterBoundsUpdateEventInit: function CharacterBoundsUpdateEventInit() {
    },
    CharacterBoundsUpdateEvent: function CharacterBoundsUpdateEvent() {
    },
    PerformanceElementTiming: function PerformanceElementTiming() {
    },
    TextDecoderCommon: function TextDecoderCommon() {
    },
    TextDecoderOptions: function TextDecoderOptions() {
    },
    TextDecodeOptions: function TextDecodeOptions() {
    },
    TextDecoder: function TextDecoder() {
    },
    TextEncoderCommon: function TextEncoderCommon() {
    },
    TextEncoderEncodeIntoResult: function TextEncoderEncodeIntoResult() {
    },
    TextEncoder: function TextEncoder() {
    },
    TextDecoderStream: function TextDecoderStream() {
    },
    TextEncoderStream: function TextEncoderStream() {
    },
    MediaKeySystemConfiguration: function MediaKeySystemConfiguration() {
    },
    MediaKeySystemMediaCapability: function MediaKeySystemMediaCapability() {
    },
    MediaKeySystemAccess: function MediaKeySystemAccess() {
    },
    MediaKeys: function MediaKeys() {
    },
    MediaKeySession: function MediaKeySession() {
    },
    MediaKeyStatusMap: function MediaKeyStatusMap() {
    },
    MediaKeyMessageEvent: function MediaKeyMessageEvent() {
    },
    MediaKeyMessageEventInit: function MediaKeyMessageEventInit() {
    },
    MediaEncryptedEvent: function MediaEncryptedEvent() {
    },
    MediaEncryptedEventInit: function MediaEncryptedEventInit() {
    },
    FileSystemEntry: function FileSystemEntry() {
    },
    FileSystemDirectoryEntry: function FileSystemDirectoryEntry() {
    },
    FileSystemFlags: function FileSystemFlags() {
    },
    FileSystemDirectoryReader: function FileSystemDirectoryReader() {
    },
    FileSystemFileEntry: function FileSystemFileEntry() {
    },
    FileSystem: function FileSystem() {
    },
    EpubReadingSystem: function EpubReadingSystem() {
    },
    PerformanceEventTiming: function PerformanceEventTiming() {
    },
    EventCounts: function EventCounts() {
    },
    InteractionCounts: function InteractionCounts() {
    },
    EXTBlendMinmax: function EXTBlendMinmax() {
    },
    EXTClipCullDistance: function EXTClipCullDistance() {
    },
    EXTColorBufferFloat: function EXTColorBufferFloat() {
    },
    EXTColorBufferHalfFloat: function EXTColorBufferHalfFloat() {
    },
    WebGLTimerQueryEXT: function WebGLTimerQueryEXT() {
    },
    EXTDisjointTimerQuery: function EXTDisjointTimerQuery() {
    },
    EXTDisjointTimerQueryWebgl2: function EXTDisjointTimerQueryWebgl2() {
    },
    EXTFloatBlend: function EXTFloatBlend() {
    },
    EXTFragDepth: function EXTFragDepth() {
    },
    EXTShaderTextureLod: function EXTShaderTextureLod() {
    },
    EXTSRGB: function EXTSRGB() {
    },
    EXTTextureCompressionBptc: function EXTTextureCompressionBptc() {
    },
    EXTTextureCompressionRgtc: function EXTTextureCompressionRgtc() {
    },
    EXTTextureFilterAnisotropic: function EXTTextureFilterAnisotropic() {
    },
    EXTTextureNorm16: function EXTTextureNorm16() {
    },
    ColorSelectionResult: function ColorSelectionResult() {
    },
    ColorSelectionOptions: function ColorSelectionOptions() {
    },
    EyeDropper: function EyeDropper() {
    },
    IdentityCredential: function IdentityCredential() {
    },
    IdentityCredentialRequestOptions: function IdentityCredentialRequestOptions() {
    },
    IdentityProvider: function IdentityProvider() {
    },
    IdentityCredentialLogoutRPsRequest: function IdentityCredentialLogoutRPsRequest() {
    },
    Request__staticInteropFactoryStub(input) {
      var t1 = window.undefined;
      return type$.JavaScriptObject._as(new self.Request(input, type$.nullable_JavaScriptObject._as(t1)));
    },
    Headers1: function Headers1() {
    },
    Body: function Body() {
    },
    Request1: function Request1() {
    },
    RequestInit: function RequestInit() {
    },
    Response1: function Response1() {
    },
    ResponseInit: function ResponseInit() {
    },
    FileSystemPermissionDescriptor: function FileSystemPermissionDescriptor() {
    },
    FileSystemHandlePermissionDescriptor: function FileSystemHandlePermissionDescriptor() {
    },
    FilePickerAcceptType: function FilePickerAcceptType() {
    },
    FilePickerOptions: function FilePickerOptions() {
    },
    OpenFilePickerOptions: function OpenFilePickerOptions() {
    },
    SaveFilePickerOptions: function SaveFilePickerOptions() {
    },
    DirectoryPickerOptions: function DirectoryPickerOptions() {
    },
    Blob: function Blob() {
    },
    BlobPropertyBag: function BlobPropertyBag() {
    },
    File: function File() {
    },
    FilePropertyBag: function FilePropertyBag() {
    },
    FileList: function FileList() {
    },
    FileReader: function FileReader() {
    },
    FileReaderSync: function FileReaderSync() {
    },
    SVGFilterElement: function SVGFilterElement() {
    },
    SVGFilterPrimitiveStandardAttributes: function SVGFilterPrimitiveStandardAttributes() {
    },
    SVGFEBlendElement: function SVGFEBlendElement() {
    },
    SVGFEColorMatrixElement: function SVGFEColorMatrixElement() {
    },
    SVGFEComponentTransferElement: function SVGFEComponentTransferElement() {
    },
    SVGComponentTransferFunctionElement: function SVGComponentTransferFunctionElement() {
    },
    SVGFEFuncRElement: function SVGFEFuncRElement() {
    },
    SVGFEFuncGElement: function SVGFEFuncGElement() {
    },
    SVGFEFuncBElement: function SVGFEFuncBElement() {
    },
    SVGFEFuncAElement: function SVGFEFuncAElement() {
    },
    SVGFECompositeElement: function SVGFECompositeElement() {
    },
    SVGFEConvolveMatrixElement: function SVGFEConvolveMatrixElement() {
    },
    SVGFEDiffuseLightingElement: function SVGFEDiffuseLightingElement() {
    },
    SVGFEDistantLightElement: function SVGFEDistantLightElement() {
    },
    SVGFEPointLightElement: function SVGFEPointLightElement() {
    },
    SVGFESpotLightElement: function SVGFESpotLightElement() {
    },
    SVGFEDisplacementMapElement: function SVGFEDisplacementMapElement() {
    },
    SVGFEDropShadowElement: function SVGFEDropShadowElement() {
    },
    SVGFEFloodElement: function SVGFEFloodElement() {
    },
    SVGFEGaussianBlurElement: function SVGFEGaussianBlurElement() {
    },
    SVGFEImageElement: function SVGFEImageElement() {
    },
    SVGFEMergeElement: function SVGFEMergeElement() {
    },
    SVGFEMergeNodeElement: function SVGFEMergeNodeElement() {
    },
    SVGFEMorphologyElement: function SVGFEMorphologyElement() {
    },
    SVGFEOffsetElement: function SVGFEOffsetElement() {
    },
    SVGFESpecularLightingElement: function SVGFESpecularLightingElement() {
    },
    SVGFETileElement: function SVGFETileElement() {
    },
    SVGFETurbulenceElement: function SVGFETurbulenceElement() {
    },
    FontMetrics: function FontMetrics() {
    },
    Baseline: function Baseline() {
    },
    Font: function Font() {
    },
    FileSystemHandle: function FileSystemHandle() {
    },
    FileSystemCreateWritableOptions: function FileSystemCreateWritableOptions() {
    },
    FileSystemFileHandle: function FileSystemFileHandle() {
    },
    FileSystemGetFileOptions: function FileSystemGetFileOptions() {
    },
    FileSystemGetDirectoryOptions: function FileSystemGetDirectoryOptions() {
    },
    FileSystemRemoveOptions: function FileSystemRemoveOptions() {
    },
    FileSystemDirectoryHandle: function FileSystemDirectoryHandle() {
    },
    WriteParams: function WriteParams() {
    },
    FileSystemWritableFileStream: function FileSystemWritableFileStream() {
    },
    FullscreenOptions: function FullscreenOptions() {
    },
    Gamepad: function Gamepad() {
    },
    GamepadButton: function GamepadButton() {
    },
    GamepadEvent: function GamepadEvent() {
    },
    GamepadEventInit: function GamepadEventInit() {
    },
    GamepadHapticActuator: function GamepadHapticActuator() {
    },
    GamepadPose: function GamepadPose() {
    },
    GamepadTouch: function GamepadTouch() {
    },
    Sensor: function Sensor() {
    },
    SensorOptions: function SensorOptions() {
    },
    SensorErrorEvent: function SensorErrorEvent() {
    },
    SensorErrorEventInit: function SensorErrorEventInit() {
    },
    MockSensorConfiguration: function MockSensorConfiguration() {
    },
    MockSensor: function MockSensor() {
    },
    MockSensorReadingValues: function MockSensorReadingValues() {
    },
    Geolocation: function Geolocation() {
    },
    PositionOptions: function PositionOptions() {
    },
    GeolocationPosition: function GeolocationPosition() {
    },
    GeolocationCoordinates: function GeolocationCoordinates() {
    },
    GeolocationPositionError: function GeolocationPositionError() {
    },
    GeolocationSensor: function GeolocationSensor() {
    },
    GeolocationSensorOptions: function GeolocationSensorOptions() {
    },
    ReadOptions: function ReadOptions() {
    },
    GeolocationSensorReading: function GeolocationSensorReading() {
    },
    GeolocationReadingValues: function GeolocationReadingValues() {
    },
    DOMPointReadOnly: function DOMPointReadOnly() {
    },
    DOMPoint: function DOMPoint() {
    },
    DOMPointInit: function DOMPointInit() {
    },
    DOMRectReadOnly: function DOMRectReadOnly() {
    },
    DOMRect: function DOMRect() {
    },
    DOMRectInit: function DOMRectInit() {
    },
    DOMRectList: function DOMRectList() {
    },
    DOMQuad: function DOMQuad() {
    },
    DOMQuadInit: function DOMQuadInit() {
    },
    DOMMatrixReadOnly: function DOMMatrixReadOnly() {
    },
    DOMMatrix: function DOMMatrix() {
    },
    DOMMatrix2DInit: function DOMMatrix2DInit() {
    },
    DOMMatrixInit: function DOMMatrixInit() {
    },
    RelatedApplication: function RelatedApplication() {
    },
    Gyroscope: function Gyroscope() {
    },
    GyroscopeSensorOptions: function GyroscopeSensorOptions() {
    },
    GyroscopeReadingValues: function GyroscopeReadingValues() {
    },
    Performance: function Performance() {
    },
    HTMLAllCollection: function HTMLAllCollection() {
    },
    HTMLFormControlsCollection: function HTMLFormControlsCollection() {
    },
    RadioNodeList: function RadioNodeList() {
    },
    HTMLOptionsCollection: function HTMLOptionsCollection() {
    },
    DOMStringList: function DOMStringList() {
    },
    HTMLElement: function HTMLElement() {
    },
    HTMLUnknownElement: function HTMLUnknownElement() {
    },
    HTMLOrSVGElement: function HTMLOrSVGElement() {
    },
    DOMStringMap: function DOMStringMap() {
    },
    HTMLHtmlElement: function HTMLHtmlElement() {
    },
    HTMLHeadElement: function HTMLHeadElement() {
    },
    HTMLTitleElement: function HTMLTitleElement() {
    },
    HTMLBaseElement: function HTMLBaseElement() {
    },
    HTMLLinkElement: function HTMLLinkElement() {
    },
    HTMLMetaElement: function HTMLMetaElement() {
    },
    HTMLStyleElement: function HTMLStyleElement() {
    },
    HTMLBodyElement: function HTMLBodyElement() {
    },
    HTMLHeadingElement: function HTMLHeadingElement() {
    },
    HTMLParagraphElement: function HTMLParagraphElement() {
    },
    HTMLHRElement: function HTMLHRElement() {
    },
    HTMLPreElement: function HTMLPreElement() {
    },
    HTMLQuoteElement: function HTMLQuoteElement() {
    },
    HTMLOListElement: function HTMLOListElement() {
    },
    HTMLUListElement: function HTMLUListElement() {
    },
    HTMLMenuElement: function HTMLMenuElement() {
    },
    HTMLLIElement: function HTMLLIElement() {
    },
    HTMLDListElement: function HTMLDListElement() {
    },
    HTMLDivElement: function HTMLDivElement() {
    },
    HTMLAnchorElement: function HTMLAnchorElement() {
    },
    HTMLDataElement: function HTMLDataElement() {
    },
    HTMLTimeElement: function HTMLTimeElement() {
    },
    HTMLSpanElement: function HTMLSpanElement() {
    },
    HTMLBRElement: function HTMLBRElement() {
    },
    HTMLHyperlinkElementUtils: function HTMLHyperlinkElementUtils() {
    },
    HTMLModElement: function HTMLModElement() {
    },
    HTMLPictureElement: function HTMLPictureElement() {
    },
    HTMLSourceElement: function HTMLSourceElement() {
    },
    HTMLImageElement: function HTMLImageElement() {
    },
    HTMLIFrameElement: function HTMLIFrameElement() {
    },
    HTMLEmbedElement: function HTMLEmbedElement() {
    },
    HTMLObjectElement: function HTMLObjectElement() {
    },
    HTMLVideoElement: function HTMLVideoElement() {
    },
    HTMLAudioElement: function HTMLAudioElement() {
    },
    HTMLTrackElement: function HTMLTrackElement() {
    },
    HTMLMediaElement: function HTMLMediaElement() {
    },
    MediaError: function MediaError() {
    },
    AudioTrackList: function AudioTrackList() {
    },
    AudioTrack: function AudioTrack() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    VideoTrack: function VideoTrack() {
    },
    TextTrackList: function TextTrackList() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TimeRanges: function TimeRanges() {
    },
    TrackEvent: function TrackEvent() {
    },
    TrackEventInit: function TrackEventInit() {
    },
    HTMLMapElement: function HTMLMapElement() {
    },
    HTMLAreaElement: function HTMLAreaElement() {
    },
    HTMLTableElement: function HTMLTableElement() {
    },
    HTMLTableCaptionElement: function HTMLTableCaptionElement() {
    },
    HTMLTableColElement: function HTMLTableColElement() {
    },
    HTMLTableSectionElement: function HTMLTableSectionElement() {
    },
    HTMLTableRowElement: function HTMLTableRowElement() {
    },
    HTMLTableCellElement: function HTMLTableCellElement() {
    },
    HTMLFormElement: function HTMLFormElement() {
    },
    HTMLLabelElement: function HTMLLabelElement() {
    },
    HTMLInputElement: function HTMLInputElement() {
    },
    HTMLButtonElement: function HTMLButtonElement() {
    },
    HTMLSelectElement: function HTMLSelectElement() {
    },
    HTMLDataListElement: function HTMLDataListElement() {
    },
    HTMLOptGroupElement: function HTMLOptGroupElement() {
    },
    HTMLOptionElement: function HTMLOptionElement() {
    },
    HTMLTextAreaElement: function HTMLTextAreaElement() {
    },
    HTMLOutputElement: function HTMLOutputElement() {
    },
    HTMLProgressElement: function HTMLProgressElement() {
    },
    HTMLMeterElement: function HTMLMeterElement() {
    },
    HTMLFieldSetElement: function HTMLFieldSetElement() {
    },
    HTMLLegendElement: function HTMLLegendElement() {
    },
    ValidityState: function ValidityState() {
    },
    SubmitEvent: function SubmitEvent() {
    },
    SubmitEventInit: function SubmitEventInit() {
    },
    FormDataEvent: function FormDataEvent() {
    },
    FormDataEventInit: function FormDataEventInit() {
    },
    HTMLDetailsElement: function HTMLDetailsElement() {
    },
    HTMLDialogElement: function HTMLDialogElement() {
    },
    HTMLScriptElement: function HTMLScriptElement() {
    },
    HTMLTemplateElement: function HTMLTemplateElement() {
    },
    HTMLSlotElement: function HTMLSlotElement() {
    },
    AssignedNodesOptions: function AssignedNodesOptions() {
    },
    HTMLCanvasElement: function HTMLCanvasElement() {
    },
    CanvasRenderingContext2DSettings: function CanvasRenderingContext2DSettings() {
    },
    CanvasRenderingContext2D: function CanvasRenderingContext2D() {
    },
    CanvasState: function CanvasState() {
    },
    CanvasTransform: function CanvasTransform() {
    },
    CanvasCompositing: function CanvasCompositing() {
    },
    CanvasImageSmoothing: function CanvasImageSmoothing() {
    },
    CanvasFillStrokeStyles: function CanvasFillStrokeStyles() {
    },
    CanvasShadowStyles: function CanvasShadowStyles() {
    },
    CanvasFilters: function CanvasFilters() {
    },
    CanvasRect: function CanvasRect() {
    },
    CanvasDrawPath: function CanvasDrawPath() {
    },
    CanvasUserInterface: function CanvasUserInterface() {
    },
    CanvasText: function CanvasText() {
    },
    CanvasDrawImage: function CanvasDrawImage() {
    },
    CanvasImageData: function CanvasImageData() {
    },
    CanvasPathDrawingStyles: function CanvasPathDrawingStyles() {
    },
    CanvasTextDrawingStyles: function CanvasTextDrawingStyles() {
    },
    CanvasPath: function CanvasPath() {
    },
    CanvasGradient: function CanvasGradient() {
    },
    CanvasPattern: function CanvasPattern() {
    },
    TextMetrics: function TextMetrics() {
    },
    ImageDataSettings: function ImageDataSettings() {
    },
    ImageData: function ImageData() {
    },
    Path2D: function Path2D() {
    },
    ImageBitmapRenderingContext: function ImageBitmapRenderingContext() {
    },
    ImageBitmapRenderingContextSettings: function ImageBitmapRenderingContextSettings() {
    },
    ImageEncodeOptions: function ImageEncodeOptions() {
    },
    OffscreenCanvas: function OffscreenCanvas() {
    },
    OffscreenCanvasRenderingContext2D: function OffscreenCanvasRenderingContext2D() {
    },
    CustomElementRegistry: function CustomElementRegistry() {
    },
    ElementDefinitionOptions: function ElementDefinitionOptions() {
    },
    ElementInternals: function ElementInternals() {
    },
    ValidityStateFlags: function ValidityStateFlags() {
    },
    FocusOptions: function FocusOptions() {
    },
    ElementContentEditable: function ElementContentEditable() {
    },
    DataTransfer: function DataTransfer() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DataTransferItem: function DataTransferItem() {
    },
    DragEvent: function DragEvent() {
    },
    DragEventInit: function DragEventInit() {
    },
    Window: function Window() {
    },
    WindowPostMessageOptions: function WindowPostMessageOptions() {
    },
    BarProp: function BarProp() {
    },
    History: function History() {
    },
    Location: function Location() {
    },
    PopStateEvent: function PopStateEvent() {
    },
    PopStateEventInit: function PopStateEventInit() {
    },
    HashChangeEvent: function HashChangeEvent() {
    },
    HashChangeEventInit: function HashChangeEventInit() {
    },
    PageTransitionEvent: function PageTransitionEvent() {
    },
    PageTransitionEventInit: function PageTransitionEventInit() {
    },
    BeforeUnloadEvent: function BeforeUnloadEvent() {
    },
    ErrorEvent: function ErrorEvent() {
    },
    ErrorEventInit: function ErrorEventInit() {
    },
    PromiseRejectionEvent: function PromiseRejectionEvent() {
    },
    PromiseRejectionEventInit: function PromiseRejectionEventInit() {
    },
    GlobalEventHandlers: function GlobalEventHandlers() {
    },
    WindowEventHandlers: function WindowEventHandlers() {
    },
    DocumentAndElementEventHandlers: function DocumentAndElementEventHandlers() {
    },
    WindowOrWorkerGlobalScope: function WindowOrWorkerGlobalScope() {
    },
    DOMParser: function DOMParser() {
    },
    Navigator: function Navigator() {
    },
    NavigatorID: function NavigatorID() {
    },
    NavigatorLanguage: function NavigatorLanguage() {
    },
    NavigatorOnLine: function NavigatorOnLine() {
    },
    NavigatorContentUtils: function NavigatorContentUtils() {
    },
    NavigatorCookies: function NavigatorCookies() {
    },
    NavigatorPlugins: function NavigatorPlugins() {
    },
    PluginArray: function PluginArray() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    Plugin: function Plugin() {
    },
    MimeType: function MimeType() {
    },
    ImageBitmap: function ImageBitmap() {
    },
    ImageBitmapOptions: function ImageBitmapOptions() {
    },
    AnimationFrameProvider: function AnimationFrameProvider() {
    },
    MessageEvent: function MessageEvent() {
    },
    MessageEventInit: function MessageEventInit() {
    },
    EventSource: function EventSource() {
    },
    EventSourceInit: function EventSourceInit() {
    },
    MessageChannel: function MessageChannel() {
    },
    MessagePort: function MessagePort() {
    },
    StructuredSerializeOptions: function StructuredSerializeOptions() {
    },
    BroadcastChannel: function BroadcastChannel() {
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    DedicatedWorkerGlobalScope: function DedicatedWorkerGlobalScope() {
    },
    SharedWorkerGlobalScope: function SharedWorkerGlobalScope() {
    },
    AbstractWorker: function AbstractWorker() {
    },
    Worker: function Worker() {
    },
    WorkerOptions: function WorkerOptions() {
    },
    SharedWorker: function SharedWorker() {
    },
    NavigatorConcurrentHardware: function NavigatorConcurrentHardware() {
    },
    WorkerNavigator: function WorkerNavigator() {
    },
    WorkerLocation: function WorkerLocation() {
    },
    WorkletGlobalScope: function WorkletGlobalScope() {
    },
    Worklet: function Worklet() {
    },
    WorkletOptions: function WorkletOptions() {
    },
    Storage: function Storage() {
    },
    WindowSessionStorage: function WindowSessionStorage() {
    },
    WindowLocalStorage: function WindowLocalStorage() {
    },
    StorageEvent: function StorageEvent() {
    },
    StorageEventInit: function StorageEventInit() {
    },
    HTMLMarqueeElement: function HTMLMarqueeElement() {
    },
    HTMLFrameSetElement: function HTMLFrameSetElement() {
    },
    HTMLFrameElement: function HTMLFrameElement() {
    },
    HTMLDirectoryElement: function HTMLDirectoryElement() {
    },
    HTMLFontElement: function HTMLFontElement() {
    },
    HTMLParamElement: function HTMLParamElement() {
    },
    External: function External() {
    },
    IdleOptions: function IdleOptions() {
    },
    IdleDetector: function IdleDetector() {
    },
    ImageCapture: function ImageCapture() {
    },
    PhotoCapabilities: function PhotoCapabilities() {
    },
    PhotoSettings: function PhotoSettings() {
    },
    MediaSettingsRange: function MediaSettingsRange() {
    },
    ConstrainPoint2DParameters: function ConstrainPoint2DParameters() {
    },
    Point2D: function Point2D() {
    },
    ImageResource: function ImageResource() {
    },
    IDBRequest: function IDBRequest() {
    },
    IDBOpenDBRequest: function IDBOpenDBRequest() {
    },
    IDBVersionChangeEvent: function IDBVersionChangeEvent() {
    },
    IDBVersionChangeEventInit: function IDBVersionChangeEventInit() {
    },
    IDBFactory: function IDBFactory() {
    },
    IDBDatabaseInfo: function IDBDatabaseInfo() {
    },
    IDBDatabase: function IDBDatabase() {
    },
    IDBTransactionOptions: function IDBTransactionOptions() {
    },
    IDBObjectStoreParameters: function IDBObjectStoreParameters() {
    },
    IDBObjectStore: function IDBObjectStore() {
    },
    IDBIndexParameters: function IDBIndexParameters() {
    },
    IDBIndex: function IDBIndex() {
    },
    IDBKeyRange: function IDBKeyRange() {
    },
    IDBCursor: function IDBCursor() {
    },
    IDBCursorWithValue: function IDBCursorWithValue() {
    },
    IDBTransaction: function IDBTransaction() {
    },
    Ink: function Ink() {
    },
    InkPresenterParam: function InkPresenterParam() {
    },
    InkPresenter: function InkPresenter() {
    },
    InkTrailStyle: function InkTrailStyle() {
    },
    InputDeviceCapabilities: function InputDeviceCapabilities() {
    },
    InputDeviceCapabilitiesInit: function InputDeviceCapabilitiesInit() {
    },
    IntersectionObserver: function IntersectionObserver() {
    },
    IntersectionObserverEntry: function IntersectionObserverEntry() {
    },
    IntersectionObserverEntryInit: function IntersectionObserverEntryInit() {
    },
    IntersectionObserverInit: function IntersectionObserverInit() {
    },
    InterventionReportBody: function InterventionReportBody() {
    },
    IsInputPendingOptions: function IsInputPendingOptions() {
    },
    Scheduling: function Scheduling() {
    },
    Profiler: function Profiler() {
    },
    ProfilerTrace: function ProfilerTrace() {
    },
    ProfilerSample: function ProfilerSample() {
    },
    ProfilerStack: function ProfilerStack() {
    },
    ProfilerFrame: function ProfilerFrame() {
    },
    ProfilerInitOptions: function ProfilerInitOptions() {
    },
    JsonLd: function JsonLd() {
    },
    JsonLdProcessor: function JsonLdProcessor() {
    },
    RdfDataset: function RdfDataset() {
    },
    RdfGraph: function RdfGraph() {
    },
    RdfTriple: function RdfTriple() {
    },
    RdfLiteral: function RdfLiteral() {
    },
    JsonLdOptions: function JsonLdOptions() {
    },
    LoadDocumentOptions: function LoadDocumentOptions() {
    },
    RemoteDocument: function RemoteDocument() {
    },
    JsonLdError: function JsonLdError() {
    },
    JsonLdFramingError: function JsonLdFramingError() {
    },
    Keyboard: function Keyboard() {
    },
    KeyboardLayoutMap: function KeyboardLayoutMap() {
    },
    KHRParallelShaderCompile: function KHRParallelShaderCompile() {
    },
    LargestContentfulPaint: function LargestContentfulPaint() {
    },
    LayoutShift: function LayoutShift() {
    },
    LayoutShiftAttribution: function LayoutShiftAttribution() {
    },
    QueryOptions: function QueryOptions() {
    },
    FontData: function FontData() {
    },
    PerformanceLongTaskTiming: function PerformanceLongTaskTiming() {
    },
    TaskAttributionTiming: function TaskAttributionTiming() {
    },
    Magnetometer: function Magnetometer() {
    },
    MagnetometerSensorOptions: function MagnetometerSensorOptions() {
    },
    UncalibratedMagnetometer: function UncalibratedMagnetometer() {
    },
    MagnetometerReadingValues: function MagnetometerReadingValues() {
    },
    UncalibratedMagnetometerReadingValues: function UncalibratedMagnetometerReadingValues() {
    },
    BeforeInstallPromptEvent: function BeforeInstallPromptEvent() {
    },
    PromptResponseObject: function PromptResponseObject() {
    },
    LaunchParams: function LaunchParams() {
    },
    LaunchQueue: function LaunchQueue() {
    },
    MathMLElement: function MathMLElement() {
    },
    MediaConfiguration: function MediaConfiguration() {
    },
    MediaDecodingConfiguration: function MediaDecodingConfiguration() {
    },
    MediaEncodingConfiguration: function MediaEncodingConfiguration() {
    },
    VideoConfiguration: function VideoConfiguration() {
    },
    AudioConfiguration: function AudioConfiguration() {
    },
    MediaCapabilitiesKeySystemConfiguration: function MediaCapabilitiesKeySystemConfiguration() {
    },
    KeySystemTrackConfiguration: function KeySystemTrackConfiguration() {
    },
    MediaCapabilitiesInfo: function MediaCapabilitiesInfo() {
    },
    MediaCapabilitiesDecodingInfo: function MediaCapabilitiesDecodingInfo() {
    },
    MediaCapabilitiesEncodingInfo: function MediaCapabilitiesEncodingInfo() {
    },
    MediaCapabilities: function MediaCapabilities() {
    },
    VideoPlaybackQuality: function VideoPlaybackQuality() {
    },
    MediaSource: function MediaSource() {
    },
    MediaSourceHandle: function MediaSourceHandle() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    MockCapturePromptResultConfiguration: function MockCapturePromptResultConfiguration() {
    },
    MockCaptureDeviceConfiguration: function MockCaptureDeviceConfiguration() {
    },
    MockCameraConfiguration: function MockCameraConfiguration() {
    },
    MockMicrophoneConfiguration: function MockMicrophoneConfiguration() {
    },
    CanvasCaptureMediaStreamTrack: function CanvasCaptureMediaStreamTrack() {
    },
    CaptureActionEvent: function CaptureActionEvent() {
    },
    CaptureActionEventInit: function CaptureActionEventInit() {
    },
    CropTarget: function CropTarget() {
    },
    BrowserCaptureMediaStreamTrack: function BrowserCaptureMediaStreamTrack() {
    },
    MediaStream: function MediaStream() {
    },
    MediaStreamTrack: function MediaStreamTrack() {
    },
    MediaTrackSupportedConstraints: function MediaTrackSupportedConstraints() {
    },
    MediaTrackCapabilities: function MediaTrackCapabilities() {
    },
    MediaTrackConstraints: function MediaTrackConstraints() {
    },
    MediaTrackConstraintSet: function MediaTrackConstraintSet() {
    },
    MediaTrackSettings: function MediaTrackSettings() {
    },
    MediaStreamTrackEvent: function MediaStreamTrackEvent() {
    },
    MediaStreamTrackEventInit: function MediaStreamTrackEventInit() {
    },
    OverconstrainedError: function OverconstrainedError() {
    },
    MediaDevices: function MediaDevices() {
    },
    MediaDeviceInfo: function MediaDeviceInfo() {
    },
    InputDeviceInfo: function InputDeviceInfo() {
    },
    MediaStreamConstraints: function MediaStreamConstraints() {
    },
    DoubleRange: function DoubleRange() {
    },
    ConstrainDoubleRange: function ConstrainDoubleRange() {
    },
    ULongRange: function ULongRange() {
    },
    ConstrainULongRange: function ConstrainULongRange() {
    },
    ConstrainBooleanParameters: function ConstrainBooleanParameters() {
    },
    ConstrainDOMStringParameters: function ConstrainDOMStringParameters() {
    },
    DevicePermissionDescriptor: function DevicePermissionDescriptor() {
    },
    CameraDevicePermissionDescriptor: function CameraDevicePermissionDescriptor() {
    },
    MediaStreamTrackProcessor: function MediaStreamTrackProcessor() {
    },
    MediaStreamTrackProcessorInit: function MediaStreamTrackProcessorInit() {
    },
    VideoTrackGenerator: function VideoTrackGenerator() {
    },
    ViewportMediaStreamConstraints: function ViewportMediaStreamConstraints() {
    },
    MediaSession: function MediaSession() {
    },
    MediaMetadata: function MediaMetadata() {
    },
    MediaMetadataInit: function MediaMetadataInit() {
    },
    MediaImage: function MediaImage() {
    },
    MediaPositionState: function MediaPositionState() {
    },
    MediaSessionActionDetails: function MediaSessionActionDetails() {
    },
    MediaRecorder: function MediaRecorder() {
    },
    MediaRecorderOptions: function MediaRecorderOptions() {
    },
    BlobEvent: function BlobEvent() {
    },
    BlobEventInit: function BlobEventInit() {
    },
    Navigation: function Navigation() {
    },
    NavigationUpdateCurrentEntryOptions: function NavigationUpdateCurrentEntryOptions() {
    },
    NavigationOptions: function NavigationOptions() {
    },
    NavigationNavigateOptions: function NavigationNavigateOptions() {
    },
    NavigationReloadOptions: function NavigationReloadOptions() {
    },
    NavigationResult: function NavigationResult() {
    },
    NavigationCurrentEntryChangeEvent: function NavigationCurrentEntryChangeEvent() {
    },
    NavigationCurrentEntryChangeEventInit: function NavigationCurrentEntryChangeEventInit() {
    },
    NavigationTransition: function NavigationTransition() {
    },
    NavigateEvent: function NavigateEvent() {
    },
    NavigateEventInit: function NavigateEventInit() {
    },
    NavigationInterceptOptions: function NavigationInterceptOptions() {
    },
    NavigationDestination: function NavigationDestination() {
    },
    NavigationHistoryEntry: function NavigationHistoryEntry() {
    },
    PerformanceNavigationTiming: function PerformanceNavigationTiming() {
    },
    PerformanceTiming: function PerformanceTiming() {
    },
    PerformanceNavigation: function PerformanceNavigation() {
    },
    NavigatorNetworkInformation: function NavigatorNetworkInformation() {
    },
    NetworkInformation: function NetworkInformation() {
    },
    Notification: function Notification() {
    },
    NotificationOptions: function NotificationOptions() {
    },
    NotificationAction: function NotificationAction() {
    },
    GetNotificationOptions: function GetNotificationOptions() {
    },
    NotificationEvent: function NotificationEvent() {
    },
    NotificationEventInit: function NotificationEventInit() {
    },
    OESDrawBuffersIndexed: function OESDrawBuffersIndexed() {
    },
    OESElementIndexUint: function OESElementIndexUint() {
    },
    OESFboRenderMipmap: function OESFboRenderMipmap() {
    },
    OESStandardDerivatives: function OESStandardDerivatives() {
    },
    OESTextureFloat: function OESTextureFloat() {
    },
    OESTextureFloatLinear: function OESTextureFloatLinear() {
    },
    OESTextureHalfFloat: function OESTextureHalfFloat() {
    },
    OESTextureHalfFloatLinear: function OESTextureHalfFloatLinear() {
    },
    WebGLVertexArrayObjectOES: function WebGLVertexArrayObjectOES() {
    },
    OESVertexArrayObject: function OESVertexArrayObject() {
    },
    DeviceOrientationEvent: function DeviceOrientationEvent() {
    },
    DeviceOrientationEventInit: function DeviceOrientationEventInit() {
    },
    DeviceMotionEventAcceleration: function DeviceMotionEventAcceleration() {
    },
    DeviceMotionEventRotationRate: function DeviceMotionEventRotationRate() {
    },
    DeviceMotionEvent: function DeviceMotionEvent() {
    },
    DeviceMotionEventAccelerationInit: function DeviceMotionEventAccelerationInit() {
    },
    DeviceMotionEventRotationRateInit: function DeviceMotionEventRotationRateInit() {
    },
    DeviceMotionEventInit: function DeviceMotionEventInit() {
    },
    OrientationSensor: function OrientationSensor() {
    },
    OrientationSensorOptions: function OrientationSensorOptions() {
    },
    AbsoluteOrientationSensor: function AbsoluteOrientationSensor() {
    },
    RelativeOrientationSensor: function RelativeOrientationSensor() {
    },
    AbsoluteOrientationReadingValues: function AbsoluteOrientationReadingValues() {
    },
    RelativeOrientationReadingValues: function RelativeOrientationReadingValues() {
    },
    OVRMultiview2: function OVRMultiview2() {
    },
    PerformancePaintTiming: function PerformancePaintTiming() {
    },
    PaymentManager: function PaymentManager() {
    },
    PaymentInstruments: function PaymentInstruments() {
    },
    PaymentInstrument: function PaymentInstrument() {
    },
    ImageObject: function ImageObject() {
    },
    CanMakePaymentEvent: function CanMakePaymentEvent() {
    },
    CanMakePaymentEventInit: function CanMakePaymentEventInit() {
    },
    PaymentRequestDetailsUpdate: function PaymentRequestDetailsUpdate() {
    },
    PaymentRequestEvent: function PaymentRequestEvent() {
    },
    PaymentRequestEventInit: function PaymentRequestEventInit() {
    },
    PaymentHandlerResponse: function PaymentHandlerResponse() {
    },
    PaymentRequest: function PaymentRequest() {
    },
    PaymentMethodData: function PaymentMethodData() {
    },
    PaymentCurrencyAmount: function PaymentCurrencyAmount() {
    },
    PaymentDetailsBase: function PaymentDetailsBase() {
    },
    PaymentDetailsInit: function PaymentDetailsInit() {
    },
    PaymentDetailsUpdate: function PaymentDetailsUpdate() {
    },
    PaymentDetailsModifier: function PaymentDetailsModifier() {
    },
    PaymentItem: function PaymentItem() {
    },
    PaymentCompleteDetails: function PaymentCompleteDetails() {
    },
    PaymentResponse: function PaymentResponse() {
    },
    PaymentValidationErrors: function PaymentValidationErrors() {
    },
    PaymentMethodChangeEvent: function PaymentMethodChangeEvent() {
    },
    PaymentMethodChangeEventInit: function PaymentMethodChangeEventInit() {
    },
    PaymentRequestUpdateEvent: function PaymentRequestUpdateEvent() {
    },
    PaymentRequestUpdateEventInit: function PaymentRequestUpdateEventInit() {
    },
    MemoryMeasurement: function MemoryMeasurement() {
    },
    MemoryBreakdownEntry: function MemoryBreakdownEntry() {
    },
    MemoryAttribution: function MemoryAttribution() {
    },
    MemoryAttributionContainer: function MemoryAttributionContainer() {
    },
    PerformanceEntry: function PerformanceEntry() {
    },
    PerformanceObserver: function PerformanceObserver() {
    },
    PerformanceObserverCallbackOptions: function PerformanceObserverCallbackOptions() {
    },
    PerformanceObserverInit: function PerformanceObserverInit() {
    },
    PerformanceObserverEntryList: function PerformanceObserverEntryList() {
    },
    PeriodicSyncManager: function PeriodicSyncManager() {
    },
    BackgroundSyncOptions: function BackgroundSyncOptions() {
    },
    PeriodicSyncEventInit: function PeriodicSyncEventInit() {
    },
    PeriodicSyncEvent: function PeriodicSyncEvent() {
    },
    Permissions: function Permissions() {
    },
    PermissionDescriptor: function PermissionDescriptor() {
    },
    PermissionStatus: function PermissionStatus() {
    },
    PermissionSetParameters: function PermissionSetParameters() {
    },
    PermissionsPolicy: function PermissionsPolicy() {
    },
    PermissionsPolicyViolationReportBody: function PermissionsPolicyViolationReportBody() {
    },
    PictureInPictureWindow: function PictureInPictureWindow() {
    },
    PictureInPictureEvent: function PictureInPictureEvent() {
    },
    PictureInPictureEventInit: function PictureInPictureEventInit() {
    },
    PointerEventInit: function PointerEventInit() {
    },
    PointerEvent: function PointerEvent() {
    },
    HTMLPortalElement: function HTMLPortalElement() {
    },
    PortalActivateOptions: function PortalActivateOptions() {
    },
    PortalHost: function PortalHost() {
    },
    PortalActivateEvent: function PortalActivateEvent() {
    },
    PortalActivateEventInit: function PortalActivateEventInit() {
    },
    Presentation: function Presentation() {
    },
    PresentationRequest: function PresentationRequest() {
    },
    PresentationAvailability: function PresentationAvailability() {
    },
    PresentationConnectionAvailableEvent: function PresentationConnectionAvailableEvent() {
    },
    PresentationConnectionAvailableEventInit: function PresentationConnectionAvailableEventInit() {
    },
    PresentationConnection: function PresentationConnection() {
    },
    PresentationConnectionCloseEvent: function PresentationConnectionCloseEvent() {
    },
    PresentationConnectionCloseEventInit: function PresentationConnectionCloseEventInit() {
    },
    PresentationReceiver: function PresentationReceiver() {
    },
    PresentationConnectionList: function PresentationConnectionList() {
    },
    ProximitySensor: function ProximitySensor() {
    },
    ProximityReadingValues: function ProximityReadingValues() {
    },
    PushPermissionDescriptor: function PushPermissionDescriptor() {
    },
    PushManager: function PushManager() {
    },
    PushSubscriptionOptions: function PushSubscriptionOptions() {
    },
    PushSubscriptionOptionsInit: function PushSubscriptionOptionsInit() {
    },
    PushSubscription: function PushSubscription() {
    },
    PushSubscriptionJSON: function PushSubscriptionJSON() {
    },
    PushMessageData: function PushMessageData() {
    },
    PushEvent: function PushEvent() {
    },
    PushEventInit: function PushEventInit() {
    },
    PushSubscriptionChangeEvent: function PushSubscriptionChangeEvent() {
    },
    PushSubscriptionChangeEventInit: function PushSubscriptionChangeEventInit() {
    },
    RemotePlayback: function RemotePlayback() {
    },
    ReportBody: function ReportBody() {
    },
    Report: function Report() {
    },
    ReportingObserver: function ReportingObserver() {
    },
    ReportingObserverOptions: function ReportingObserverOptions() {
    },
    GenerateTestReportParameters: function GenerateTestReportParameters() {
    },
    IdleRequestOptions: function IdleRequestOptions() {
    },
    IdleDeadline: function IdleDeadline() {
    },
    ResizeObserverOptions: function ResizeObserverOptions() {
    },
    ResizeObserver: function ResizeObserver() {
    },
    ResizeObserverEntry: function ResizeObserverEntry() {
    },
    ResizeObserverSize: function ResizeObserverSize() {
    },
    PerformanceResourceTiming: function PerformanceResourceTiming() {
    },
    Sanitizer: function Sanitizer() {
    },
    SetHTMLOptions: function SetHTMLOptions() {
    },
    SanitizerConfig: function SanitizerConfig() {
    },
    NetworkInformationSaveData: function NetworkInformationSaveData() {
    },
    SchedulerPostTaskOptions: function SchedulerPostTaskOptions() {
    },
    Scheduler: function Scheduler() {
    },
    TaskPriorityChangeEvent: function TaskPriorityChangeEvent() {
    },
    TaskPriorityChangeEventInit: function TaskPriorityChangeEventInit() {
    },
    TaskControllerInit: function TaskControllerInit() {
    },
    TaskController: function TaskController() {
    },
    TaskSignal: function TaskSignal() {
    },
    DisplayMediaStreamOptions: function DisplayMediaStreamOptions() {
    },
    ScreenOrientation: function ScreenOrientation() {
    },
    WakeLock: function WakeLock() {
    },
    WakeLockSentinel: function WakeLockSentinel() {
    },
    ScrollTimelineOptions: function ScrollTimelineOptions() {
    },
    ScrollTimeline: function ScrollTimeline() {
    },
    ViewTimelineOptions: function ViewTimelineOptions() {
    },
    ViewTimeline: function ViewTimeline() {
    },
    FragmentDirective: function FragmentDirective() {
    },
    SecurePaymentConfirmationRequest: function SecurePaymentConfirmationRequest() {
    },
    AuthenticationExtensionsPaymentInputs: function AuthenticationExtensionsPaymentInputs() {
    },
    CollectedClientPaymentData: function CollectedClientPaymentData() {
    },
    CollectedClientAdditionalPaymentData: function CollectedClientAdditionalPaymentData() {
    },
    PaymentCredentialInstrument: function PaymentCredentialInstrument() {
    },
    Selection: function Selection() {
    },
    Serial: function Serial() {
    },
    SerialPortRequestOptions: function SerialPortRequestOptions() {
    },
    SerialPortFilter: function SerialPortFilter() {
    },
    SerialPort: function SerialPort() {
    },
    SerialPortInfo: function SerialPortInfo() {
    },
    SerialOptions: function SerialOptions() {
    },
    SerialOutputSignals: function SerialOutputSignals() {
    },
    SerialInputSignals: function SerialInputSignals() {
    },
    PerformanceServerTiming: function PerformanceServerTiming() {
    },
    ServiceWorker: function ServiceWorker() {
    },
    ServiceWorkerRegistration: function ServiceWorkerRegistration() {
    },
    ServiceWorkerContainer: function ServiceWorkerContainer() {
    },
    RegistrationOptions: function RegistrationOptions() {
    },
    NavigationPreloadManager: function NavigationPreloadManager() {
    },
    NavigationPreloadState: function NavigationPreloadState() {
    },
    ServiceWorkerGlobalScope: function ServiceWorkerGlobalScope() {
    },
    Client0: function Client0() {
    },
    WindowClient: function WindowClient() {
    },
    Clients: function Clients() {
    },
    ClientQueryOptions: function ClientQueryOptions() {
    },
    ExtendableEvent: function ExtendableEvent() {
    },
    ExtendableEventInit: function ExtendableEventInit() {
    },
    FetchEvent: function FetchEvent() {
    },
    FetchEventInit: function FetchEventInit() {
    },
    ExtendableMessageEvent: function ExtendableMessageEvent() {
    },
    ExtendableMessageEventInit: function ExtendableMessageEventInit() {
    },
    Cache: function Cache() {
    },
    CacheQueryOptions: function CacheQueryOptions() {
    },
    CacheStorage: function CacheStorage() {
    },
    MultiCacheQueryOptions: function MultiCacheQueryOptions() {
    },
    FaceDetector: function FaceDetector() {
    },
    FaceDetectorOptions: function FaceDetectorOptions() {
    },
    DetectedFace: function DetectedFace() {
    },
    Landmark: function Landmark() {
    },
    BarcodeDetector: function BarcodeDetector() {
    },
    BarcodeDetectorOptions: function BarcodeDetectorOptions() {
    },
    DetectedBarcode: function DetectedBarcode() {
    },
    SpeechRecognition: function SpeechRecognition() {
    },
    SpeechRecognitionErrorEvent: function SpeechRecognitionErrorEvent() {
    },
    SpeechRecognitionErrorEventInit: function SpeechRecognitionErrorEventInit() {
    },
    SpeechRecognitionAlternative: function SpeechRecognitionAlternative() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    SpeechRecognitionResultList: function SpeechRecognitionResultList() {
    },
    SpeechRecognitionEvent: function SpeechRecognitionEvent() {
    },
    SpeechRecognitionEventInit: function SpeechRecognitionEventInit() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechSynthesis: function SpeechSynthesis() {
    },
    SpeechSynthesisUtterance: function SpeechSynthesisUtterance() {
    },
    SpeechSynthesisEvent: function SpeechSynthesisEvent() {
    },
    SpeechSynthesisEventInit: function SpeechSynthesisEventInit() {
    },
    SpeechSynthesisErrorEvent: function SpeechSynthesisErrorEvent() {
    },
    SpeechSynthesisErrorEventInit: function SpeechSynthesisErrorEventInit() {
    },
    SpeechSynthesisVoice: function SpeechSynthesisVoice() {
    },
    NavigatorStorage: function NavigatorStorage() {
    },
    StorageManager: function StorageManager() {
    },
    StorageEstimate: function StorageEstimate() {
    },
    ReadableStream0: function ReadableStream0() {
    },
    ReadableStreamGetReaderOptions: function ReadableStreamGetReaderOptions() {
    },
    ReadableStreamIteratorOptions: function ReadableStreamIteratorOptions() {
    },
    ReadableWritablePair: function ReadableWritablePair() {
    },
    StreamPipeOptions: function StreamPipeOptions() {
    },
    UnderlyingSource: function UnderlyingSource() {
    },
    ReadableStreamGenericReader: function ReadableStreamGenericReader() {
    },
    ReadableStreamDefaultReader0: function ReadableStreamDefaultReader0() {
    },
    ReadableStreamReadResult: function ReadableStreamReadResult() {
    },
    ReadableStreamBYOBReader: function ReadableStreamBYOBReader() {
    },
    ReadableStreamDefaultController: function ReadableStreamDefaultController() {
    },
    ReadableByteStreamController: function ReadableByteStreamController() {
    },
    ReadableStreamBYOBRequest: function ReadableStreamBYOBRequest() {
    },
    WritableStream: function WritableStream() {
    },
    UnderlyingSink: function UnderlyingSink() {
    },
    WritableStreamDefaultWriter: function WritableStreamDefaultWriter() {
    },
    WritableStreamDefaultController: function WritableStreamDefaultController() {
    },
    TransformStream: function TransformStream() {
    },
    Transformer: function Transformer() {
    },
    TransformStreamDefaultController: function TransformStreamDefaultController() {
    },
    QueuingStrategy: function QueuingStrategy() {
    },
    QueuingStrategyInit: function QueuingStrategyInit() {
    },
    ByteLengthQueuingStrategy: function ByteLengthQueuingStrategy() {
    },
    CountQueuingStrategy: function CountQueuingStrategy() {
    },
    GenericTransformStream: function GenericTransformStream() {
    },
    SVGElement: function SVGElement() {
    },
    SVGBoundingBoxOptions: function SVGBoundingBoxOptions() {
    },
    SVGGraphicsElement: function SVGGraphicsElement() {
    },
    SVGGeometryElement: function SVGGeometryElement() {
    },
    SVGNumber: function SVGNumber() {
    },
    SVGLength: function SVGLength() {
    },
    SVGAngle: function SVGAngle() {
    },
    SVGNumberList: function SVGNumberList() {
    },
    SVGLengthList: function SVGLengthList() {
    },
    SVGStringList: function SVGStringList() {
    },
    SVGAnimatedBoolean: function SVGAnimatedBoolean() {
    },
    SVGAnimatedEnumeration: function SVGAnimatedEnumeration() {
    },
    SVGAnimatedInteger: function SVGAnimatedInteger() {
    },
    SVGAnimatedNumber: function SVGAnimatedNumber() {
    },
    SVGAnimatedLength: function SVGAnimatedLength() {
    },
    SVGAnimatedAngle: function SVGAnimatedAngle() {
    },
    SVGAnimatedString: function SVGAnimatedString() {
    },
    SVGAnimatedRect: function SVGAnimatedRect() {
    },
    SVGAnimatedNumberList: function SVGAnimatedNumberList() {
    },
    SVGAnimatedLengthList: function SVGAnimatedLengthList() {
    },
    SVGUnitTypes: function SVGUnitTypes() {
    },
    SVGTests: function SVGTests() {
    },
    SVGFitToViewBox: function SVGFitToViewBox() {
    },
    SVGURIReference: function SVGURIReference() {
    },
    SVGSVGElement: function SVGSVGElement() {
    },
    SVGGElement: function SVGGElement() {
    },
    SVGDefsElement: function SVGDefsElement() {
    },
    SVGDescElement: function SVGDescElement() {
    },
    SVGMetadataElement: function SVGMetadataElement() {
    },
    SVGTitleElement: function SVGTitleElement() {
    },
    SVGSymbolElement: function SVGSymbolElement() {
    },
    SVGUseElement: function SVGUseElement() {
    },
    SVGUseElementShadowRoot: function SVGUseElementShadowRoot() {
    },
    SVGElementInstance: function SVGElementInstance() {
    },
    ShadowAnimation: function ShadowAnimation() {
    },
    SVGSwitchElement: function SVGSwitchElement() {
    },
    GetSVGDocument: function GetSVGDocument() {
    },
    SVGStyleElement: function SVGStyleElement() {
    },
    SVGTransform: function SVGTransform() {
    },
    SVGTransformList: function SVGTransformList() {
    },
    SVGAnimatedTransformList: function SVGAnimatedTransformList() {
    },
    SVGPreserveAspectRatio: function SVGPreserveAspectRatio() {
    },
    SVGAnimatedPreserveAspectRatio: function SVGAnimatedPreserveAspectRatio() {
    },
    SVGPathElement: function SVGPathElement() {
    },
    SVGRectElement: function SVGRectElement() {
    },
    SVGCircleElement: function SVGCircleElement() {
    },
    SVGEllipseElement: function SVGEllipseElement() {
    },
    SVGLineElement: function SVGLineElement() {
    },
    SVGAnimatedPoints: function SVGAnimatedPoints() {
    },
    SVGPointList: function SVGPointList() {
    },
    SVGPolylineElement: function SVGPolylineElement() {
    },
    SVGPolygonElement: function SVGPolygonElement() {
    },
    SVGTextContentElement: function SVGTextContentElement() {
    },
    SVGTextPositioningElement: function SVGTextPositioningElement() {
    },
    SVGTextElement: function SVGTextElement() {
    },
    SVGTSpanElement: function SVGTSpanElement() {
    },
    SVGTextPathElement: function SVGTextPathElement() {
    },
    SVGImageElement: function SVGImageElement() {
    },
    SVGForeignObjectElement: function SVGForeignObjectElement() {
    },
    SVGMarkerElement: function SVGMarkerElement() {
    },
    SVGGradientElement: function SVGGradientElement() {
    },
    SVGLinearGradientElement: function SVGLinearGradientElement() {
    },
    SVGRadialGradientElement: function SVGRadialGradientElement() {
    },
    SVGStopElement: function SVGStopElement() {
    },
    SVGPatternElement: function SVGPatternElement() {
    },
    SVGScriptElement: function SVGScriptElement() {
    },
    SVGAElement: function SVGAElement() {
    },
    SVGViewElement: function SVGViewElement() {
    },
    TimeEvent: function TimeEvent() {
    },
    SVGAnimationElement: function SVGAnimationElement() {
    },
    SVGAnimateElement: function SVGAnimateElement() {
    },
    SVGSetElement: function SVGSetElement() {
    },
    SVGAnimateMotionElement: function SVGAnimateMotionElement() {
    },
    SVGMPathElement: function SVGMPathElement() {
    },
    SVGAnimateTransformElement: function SVGAnimateTransformElement() {
    },
    SVGDiscardElement: function SVGDiscardElement() {
    },
    TestUtils: function TestUtils() {
    },
    TextDetector: function TextDetector() {
    },
    DetectedText: function DetectedText() {
    },
    TouchInit: function TouchInit() {
    },
    Touch: function Touch() {
    },
    TouchList: function TouchList() {
    },
    TouchEventInit: function TouchEventInit() {
    },
    TouchEvent: function TouchEvent() {
    },
    TrustedHTML: function TrustedHTML() {
    },
    TrustedScript: function TrustedScript() {
    },
    TrustedScriptURL: function TrustedScriptURL() {
    },
    TrustedTypePolicyFactory: function TrustedTypePolicyFactory() {
    },
    TrustedTypePolicy: function TrustedTypePolicy() {
    },
    TrustedTypePolicyOptions: function TrustedTypePolicyOptions() {
    },
    NavigatorUABrandVersion: function NavigatorUABrandVersion() {
    },
    UADataValues: function UADataValues() {
    },
    UALowEntropyJSON: function UALowEntropyJSON() {
    },
    NavigatorUAData: function NavigatorUAData() {
    },
    NavigatorUA: function NavigatorUA() {
    },
    UIEvent: function UIEvent() {
    },
    UIEventInit: function UIEventInit() {
    },
    FocusEvent: function FocusEvent() {
    },
    FocusEventInit: function FocusEventInit() {
    },
    MouseEvent: function MouseEvent() {
    },
    MouseEventInit: function MouseEventInit() {
    },
    EventModifierInit: function EventModifierInit() {
    },
    WheelEvent: function WheelEvent() {
    },
    WheelEventInit: function WheelEventInit() {
    },
    InputEvent: function InputEvent() {
    },
    InputEventInit: function InputEventInit() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    KeyboardEventInit: function KeyboardEventInit() {
    },
    CompositionEvent: function CompositionEvent() {
    },
    CompositionEventInit: function CompositionEventInit() {
    },
    MutationEvent: function MutationEvent() {
    },
    Url: function Url() {
    },
    URLSearchParams: function URLSearchParams() {
    },
    URLPattern: function URLPattern() {
    },
    URLPatternInit: function URLPatternInit() {
    },
    URLPatternResult: function URLPatternResult() {
    },
    URLPatternComponentResult: function URLPatternComponentResult() {
    },
    PerformanceMarkOptions: function PerformanceMarkOptions() {
    },
    PerformanceMeasureOptions: function PerformanceMeasureOptions() {
    },
    PerformanceMark: function PerformanceMark() {
    },
    PerformanceMeasure: function PerformanceMeasure() {
    },
    VideoFrameMetadata: function VideoFrameMetadata() {
    },
    VirtualKeyboard: function VirtualKeyboard() {
    },
    ARIAMixin: function ARIAMixin() {
    },
    WebAssemblyInstantiatedSource: function WebAssemblyInstantiatedSource() {
    },
    WebAssembly: function WebAssembly() {
    },
    ModuleExportDescriptor: function ModuleExportDescriptor() {
    },
    ModuleImportDescriptor: function ModuleImportDescriptor() {
    },
    Module: function Module() {
    },
    Instance: function Instance() {
    },
    MemoryDescriptor: function MemoryDescriptor() {
    },
    Memory: function Memory() {
    },
    TableDescriptor: function TableDescriptor() {
    },
    Table: function Table() {
    },
    GlobalDescriptor: function GlobalDescriptor() {
    },
    Global: function Global() {
    },
    AnimationTimeline: function AnimationTimeline() {
    },
    DocumentTimelineOptions: function DocumentTimelineOptions() {
    },
    DocumentTimeline: function DocumentTimeline() {
    },
    Animation: function Animation() {
    },
    AnimationEffect: function AnimationEffect() {
    },
    EffectTiming: function EffectTiming() {
    },
    OptionalEffectTiming: function OptionalEffectTiming() {
    },
    ComputedEffectTiming: function ComputedEffectTiming() {
    },
    KeyframeEffect: function KeyframeEffect() {
    },
    BaseComputedKeyframe: function BaseComputedKeyframe() {
    },
    BasePropertyIndexedKeyframe: function BasePropertyIndexedKeyframe() {
    },
    BaseKeyframe: function BaseKeyframe() {
    },
    KeyframeEffectOptions: function KeyframeEffectOptions() {
    },
    Animatable: function Animatable() {
    },
    KeyframeAnimationOptions: function KeyframeAnimationOptions() {
    },
    GetAnimationsOptions: function GetAnimationsOptions() {
    },
    GroupEffect: function GroupEffect() {
    },
    AnimationNodeList: function AnimationNodeList() {
    },
    SequenceEffect: function SequenceEffect() {
    },
    AnimationPlaybackEvent: function AnimationPlaybackEvent() {
    },
    AnimationPlaybackEventInit: function AnimationPlaybackEventInit() {
    },
    BluetoothDataFilterInit: function BluetoothDataFilterInit() {
    },
    BluetoothManufacturerDataFilterInit: function BluetoothManufacturerDataFilterInit() {
    },
    BluetoothServiceDataFilterInit: function BluetoothServiceDataFilterInit() {
    },
    BluetoothLEScanFilterInit: function BluetoothLEScanFilterInit() {
    },
    RequestDeviceOptions: function RequestDeviceOptions() {
    },
    Bluetooth: function Bluetooth() {
    },
    BluetoothPermissionDescriptor: function BluetoothPermissionDescriptor() {
    },
    AllowedBluetoothDevice: function AllowedBluetoothDevice() {
    },
    BluetoothPermissionStorage: function BluetoothPermissionStorage() {
    },
    BluetoothPermissionResult: function BluetoothPermissionResult() {
    },
    ValueEvent: function ValueEvent() {
    },
    ValueEventInit: function ValueEventInit() {
    },
    BluetoothDevice: function BluetoothDevice() {
    },
    WatchAdvertisementsOptions: function WatchAdvertisementsOptions() {
    },
    BluetoothManufacturerDataMap: function BluetoothManufacturerDataMap() {
    },
    BluetoothServiceDataMap: function BluetoothServiceDataMap() {
    },
    BluetoothAdvertisingEvent: function BluetoothAdvertisingEvent() {
    },
    BluetoothAdvertisingEventInit: function BluetoothAdvertisingEventInit() {
    },
    BluetoothRemoteGATTServer: function BluetoothRemoteGATTServer() {
    },
    BluetoothRemoteGATTService: function BluetoothRemoteGATTService() {
    },
    BluetoothRemoteGATTCharacteristic: function BluetoothRemoteGATTCharacteristic() {
    },
    BluetoothCharacteristicProperties: function BluetoothCharacteristicProperties() {
    },
    BluetoothRemoteGATTDescriptor: function BluetoothRemoteGATTDescriptor() {
    },
    CharacteristicEventHandlers: function CharacteristicEventHandlers() {
    },
    BluetoothDeviceEventHandlers: function BluetoothDeviceEventHandlers() {
    },
    ServiceEventHandlers: function ServiceEventHandlers() {
    },
    BluetoothUUID: function BluetoothUUID() {
    },
    NavigatorLocks: function NavigatorLocks() {
    },
    LockManager: function LockManager() {
    },
    LockOptions: function LockOptions() {
    },
    LockManagerSnapshot: function LockManagerSnapshot() {
    },
    LockInfo: function LockInfo() {
    },
    Lock: function Lock() {
    },
    NDEFMessage: function NDEFMessage() {
    },
    NDEFMessageInit: function NDEFMessageInit() {
    },
    NDEFRecord: function NDEFRecord() {
    },
    NDEFRecordInit: function NDEFRecordInit() {
    },
    NDEFReader: function NDEFReader() {
    },
    NDEFReadingEvent: function NDEFReadingEvent() {
    },
    NDEFReadingEventInit: function NDEFReadingEventInit() {
    },
    NDEFWriteOptions: function NDEFWriteOptions() {
    },
    NDEFMakeReadOnlyOptions: function NDEFMakeReadOnlyOptions() {
    },
    NDEFScanOptions: function NDEFScanOptions() {
    },
    OTPCredential: function OTPCredential() {
    },
    OTPCredentialRequestOptions: function OTPCredentialRequestOptions() {
    },
    ShareData: function ShareData() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    AudioContext: function AudioContext() {
    },
    AudioContextOptions: function AudioContextOptions() {
    },
    AudioTimestamp: function AudioTimestamp() {
    },
    AudioRenderCapacity: function AudioRenderCapacity() {
    },
    AudioRenderCapacityOptions: function AudioRenderCapacityOptions() {
    },
    AudioRenderCapacityEvent: function AudioRenderCapacityEvent() {
    },
    AudioRenderCapacityEventInit: function AudioRenderCapacityEventInit() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    OfflineAudioContextOptions: function OfflineAudioContextOptions() {
    },
    OfflineAudioCompletionEvent: function OfflineAudioCompletionEvent() {
    },
    OfflineAudioCompletionEventInit: function OfflineAudioCompletionEventInit() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioBufferOptions: function AudioBufferOptions() {
    },
    AudioNode: function AudioNode() {
    },
    AudioNodeOptions: function AudioNodeOptions() {
    },
    AudioParam: function AudioParam() {
    },
    AudioScheduledSourceNode: function AudioScheduledSourceNode() {
    },
    AnalyserNode: function AnalyserNode() {
    },
    AnalyserOptions: function AnalyserOptions() {
    },
    AudioBufferSourceNode: function AudioBufferSourceNode() {
    },
    AudioBufferSourceOptions: function AudioBufferSourceOptions() {
    },
    AudioDestinationNode: function AudioDestinationNode() {
    },
    AudioListener: function AudioListener() {
    },
    AudioProcessingEvent: function AudioProcessingEvent() {
    },
    AudioProcessingEventInit: function AudioProcessingEventInit() {
    },
    BiquadFilterNode: function BiquadFilterNode() {
    },
    BiquadFilterOptions: function BiquadFilterOptions() {
    },
    ChannelMergerNode: function ChannelMergerNode() {
    },
    ChannelMergerOptions: function ChannelMergerOptions() {
    },
    ChannelSplitterNode: function ChannelSplitterNode() {
    },
    ChannelSplitterOptions: function ChannelSplitterOptions() {
    },
    ConstantSourceNode: function ConstantSourceNode() {
    },
    ConstantSourceOptions: function ConstantSourceOptions() {
    },
    ConvolverNode: function ConvolverNode() {
    },
    ConvolverOptions: function ConvolverOptions() {
    },
    DelayNode: function DelayNode() {
    },
    DelayOptions: function DelayOptions() {
    },
    DynamicsCompressorNode: function DynamicsCompressorNode() {
    },
    DynamicsCompressorOptions: function DynamicsCompressorOptions() {
    },
    GainNode: function GainNode() {
    },
    GainOptions: function GainOptions() {
    },
    IIRFilterNode: function IIRFilterNode() {
    },
    IIRFilterOptions: function IIRFilterOptions() {
    },
    MediaElementAudioSourceNode: function MediaElementAudioSourceNode() {
    },
    MediaElementAudioSourceOptions: function MediaElementAudioSourceOptions() {
    },
    MediaStreamAudioDestinationNode: function MediaStreamAudioDestinationNode() {
    },
    MediaStreamAudioSourceNode: function MediaStreamAudioSourceNode() {
    },
    MediaStreamAudioSourceOptions: function MediaStreamAudioSourceOptions() {
    },
    MediaStreamTrackAudioSourceNode: function MediaStreamTrackAudioSourceNode() {
    },
    MediaStreamTrackAudioSourceOptions: function MediaStreamTrackAudioSourceOptions() {
    },
    OscillatorNode: function OscillatorNode() {
    },
    OscillatorOptions: function OscillatorOptions() {
    },
    PannerNode: function PannerNode() {
    },
    PannerOptions: function PannerOptions() {
    },
    PeriodicWave: function PeriodicWave() {
    },
    PeriodicWaveConstraints: function PeriodicWaveConstraints() {
    },
    PeriodicWaveOptions: function PeriodicWaveOptions() {
    },
    ScriptProcessorNode: function ScriptProcessorNode() {
    },
    StereoPannerNode: function StereoPannerNode() {
    },
    StereoPannerOptions: function StereoPannerOptions() {
    },
    WaveShaperNode: function WaveShaperNode() {
    },
    WaveShaperOptions: function WaveShaperOptions() {
    },
    AudioWorklet: function AudioWorklet() {
    },
    AudioWorkletGlobalScope: function AudioWorkletGlobalScope() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioWorkletNode: function AudioWorkletNode() {
    },
    AudioWorkletNodeOptions: function AudioWorkletNodeOptions() {
    },
    AudioWorkletProcessor: function AudioWorkletProcessor() {
    },
    AudioParamDescriptor: function AudioParamDescriptor() {
    },
    PublicKeyCredential: function PublicKeyCredential() {
    },
    RegistrationResponseJSON: function RegistrationResponseJSON() {
    },
    AuthenticatorAttestationResponseJSON: function AuthenticatorAttestationResponseJSON() {
    },
    AuthenticationResponseJSON: function AuthenticationResponseJSON() {
    },
    AuthenticatorAssertionResponseJSON: function AuthenticatorAssertionResponseJSON() {
    },
    AuthenticationExtensionsClientOutputsJSON: function AuthenticationExtensionsClientOutputsJSON() {
    },
    PublicKeyCredentialCreationOptionsJSON: function PublicKeyCredentialCreationOptionsJSON() {
    },
    PublicKeyCredentialUserEntityJSON: function PublicKeyCredentialUserEntityJSON() {
    },
    PublicKeyCredentialDescriptorJSON: function PublicKeyCredentialDescriptorJSON() {
    },
    AuthenticationExtensionsClientInputsJSON: function AuthenticationExtensionsClientInputsJSON() {
    },
    PublicKeyCredentialRequestOptionsJSON: function PublicKeyCredentialRequestOptionsJSON() {
    },
    AuthenticatorResponse: function AuthenticatorResponse() {
    },
    AuthenticatorAttestationResponse: function AuthenticatorAttestationResponse() {
    },
    AuthenticatorAssertionResponse: function AuthenticatorAssertionResponse() {
    },
    PublicKeyCredentialParameters: function PublicKeyCredentialParameters() {
    },
    PublicKeyCredentialCreationOptions: function PublicKeyCredentialCreationOptions() {
    },
    PublicKeyCredentialEntity: function PublicKeyCredentialEntity() {
    },
    PublicKeyCredentialRpEntity: function PublicKeyCredentialRpEntity() {
    },
    PublicKeyCredentialUserEntity: function PublicKeyCredentialUserEntity() {
    },
    AuthenticatorSelectionCriteria: function AuthenticatorSelectionCriteria() {
    },
    PublicKeyCredentialRequestOptions: function PublicKeyCredentialRequestOptions() {
    },
    AuthenticationExtensionsClientInputs: function AuthenticationExtensionsClientInputs() {
    },
    AuthenticationExtensionsClientOutputs: function AuthenticationExtensionsClientOutputs() {
    },
    CollectedClientData: function CollectedClientData() {
    },
    TokenBinding: function TokenBinding() {
    },
    PublicKeyCredentialDescriptor: function PublicKeyCredentialDescriptor() {
    },
    CredentialPropertiesOutput: function CredentialPropertiesOutput() {
    },
    AuthenticationExtensionsPRFValues: function AuthenticationExtensionsPRFValues() {
    },
    AuthenticationExtensionsPRFInputs: function AuthenticationExtensionsPRFInputs() {
    },
    AuthenticationExtensionsPRFOutputs: function AuthenticationExtensionsPRFOutputs() {
    },
    AuthenticationExtensionsLargeBlobInputs: function AuthenticationExtensionsLargeBlobInputs() {
    },
    AuthenticationExtensionsLargeBlobOutputs: function AuthenticationExtensionsLargeBlobOutputs() {
    },
    AudioDecoder: function AudioDecoder() {
    },
    AudioDecoderInit: function AudioDecoderInit() {
    },
    VideoDecoder: function VideoDecoder() {
    },
    VideoDecoderInit: function VideoDecoderInit() {
    },
    AudioEncoder: function AudioEncoder() {
    },
    AudioEncoderInit: function AudioEncoderInit() {
    },
    EncodedAudioChunkMetadata: function EncodedAudioChunkMetadata() {
    },
    VideoEncoder: function VideoEncoder() {
    },
    VideoEncoderInit: function VideoEncoderInit() {
    },
    EncodedVideoChunkMetadata: function EncodedVideoChunkMetadata() {
    },
    SvcOutputMetadata: function SvcOutputMetadata() {
    },
    AudioDecoderSupport: function AudioDecoderSupport() {
    },
    VideoDecoderSupport: function VideoDecoderSupport() {
    },
    AudioEncoderSupport: function AudioEncoderSupport() {
    },
    VideoEncoderSupport: function VideoEncoderSupport() {
    },
    AudioDecoderConfig: function AudioDecoderConfig() {
    },
    VideoDecoderConfig: function VideoDecoderConfig() {
    },
    AudioEncoderConfig: function AudioEncoderConfig() {
    },
    VideoEncoderConfig: function VideoEncoderConfig() {
    },
    VideoEncoderEncodeOptions: function VideoEncoderEncodeOptions() {
    },
    EncodedAudioChunk: function EncodedAudioChunk() {
    },
    EncodedAudioChunkInit: function EncodedAudioChunkInit() {
    },
    EncodedVideoChunk: function EncodedVideoChunk() {
    },
    EncodedVideoChunkInit: function EncodedVideoChunkInit() {
    },
    AudioData: function AudioData() {
    },
    AudioDataInit: function AudioDataInit() {
    },
    AudioDataCopyToOptions: function AudioDataCopyToOptions() {
    },
    VideoFrame: function VideoFrame() {
    },
    VideoFrameInit: function VideoFrameInit() {
    },
    VideoFrameBufferInit: function VideoFrameBufferInit() {
    },
    VideoFrameCopyToOptions: function VideoFrameCopyToOptions() {
    },
    PlaneLayout: function PlaneLayout() {
    },
    VideoColorSpace: function VideoColorSpace() {
    },
    VideoColorSpaceInit: function VideoColorSpaceInit() {
    },
    ImageDecoder: function ImageDecoder() {
    },
    ImageDecoderInit: function ImageDecoderInit() {
    },
    ImageDecodeOptions: function ImageDecodeOptions() {
    },
    ImageDecodeResult: function ImageDecodeResult() {
    },
    ImageTrackList: function ImageTrackList() {
    },
    ImageTrack: function ImageTrack() {
    },
    Ed448Params: function Ed448Params() {
    },
    Crypto: function Crypto() {
    },
    Algorithm: function Algorithm() {
    },
    KeyAlgorithm: function KeyAlgorithm() {
    },
    CryptoKey: function CryptoKey() {
    },
    SubtleCrypto: function SubtleCrypto() {
    },
    RsaOtherPrimesInfo: function RsaOtherPrimesInfo() {
    },
    JsonWebKey: function JsonWebKey() {
    },
    CryptoKeyPair: function CryptoKeyPair() {
    },
    RsaKeyGenParams: function RsaKeyGenParams() {
    },
    RsaHashedKeyGenParams: function RsaHashedKeyGenParams() {
    },
    RsaKeyAlgorithm: function RsaKeyAlgorithm() {
    },
    RsaHashedKeyAlgorithm: function RsaHashedKeyAlgorithm() {
    },
    RsaHashedImportParams: function RsaHashedImportParams() {
    },
    RsaPssParams: function RsaPssParams() {
    },
    RsaOaepParams: function RsaOaepParams() {
    },
    EcdsaParams: function EcdsaParams() {
    },
    EcKeyGenParams: function EcKeyGenParams() {
    },
    EcKeyAlgorithm: function EcKeyAlgorithm() {
    },
    EcKeyImportParams: function EcKeyImportParams() {
    },
    EcdhKeyDeriveParams: function EcdhKeyDeriveParams() {
    },
    AesCtrParams: function AesCtrParams() {
    },
    AesKeyAlgorithm: function AesKeyAlgorithm() {
    },
    AesKeyGenParams: function AesKeyGenParams() {
    },
    AesDerivedKeyParams: function AesDerivedKeyParams() {
    },
    AesCbcParams: function AesCbcParams() {
    },
    AesGcmParams: function AesGcmParams() {
    },
    HmacImportParams: function HmacImportParams() {
    },
    HmacKeyAlgorithm: function HmacKeyAlgorithm() {
    },
    HmacKeyGenParams: function HmacKeyGenParams() {
    },
    HkdfParams: function HkdfParams() {
    },
    Pbkdf2Params: function Pbkdf2Params() {
    },
    NavigatorAutomationInformation: function NavigatorAutomationInformation() {
    },
    WebGLContextAttributes: function WebGLContextAttributes() {
    },
    WebGLObject: function WebGLObject() {
    },
    WebGLBuffer: function WebGLBuffer() {
    },
    WebGLFramebuffer: function WebGLFramebuffer() {
    },
    WebGLProgram: function WebGLProgram() {
    },
    WebGLRenderbuffer: function WebGLRenderbuffer() {
    },
    WebGLShader: function WebGLShader() {
    },
    WebGLTexture: function WebGLTexture() {
    },
    WebGLUniformLocation: function WebGLUniformLocation() {
    },
    WebGLActiveInfo: function WebGLActiveInfo() {
    },
    WebGLShaderPrecisionFormat: function WebGLShaderPrecisionFormat() {
    },
    WebGLRenderingContextBase: function WebGLRenderingContextBase() {
    },
    WebGLRenderingContextOverloads: function WebGLRenderingContextOverloads() {
    },
    WebGLRenderingContext: function WebGLRenderingContext() {
    },
    WebGLContextEvent: function WebGLContextEvent() {
    },
    WebGLContextEventInit: function WebGLContextEventInit() {
    },
    WebGLQuery: function WebGLQuery() {
    },
    WebGLSampler: function WebGLSampler() {
    },
    WebGLSync: function WebGLSync() {
    },
    WebGLTransformFeedback: function WebGLTransformFeedback() {
    },
    WebGLVertexArrayObject: function WebGLVertexArrayObject() {
    },
    WebGL2RenderingContextBase: function WebGL2RenderingContextBase() {
    },
    WebGL2RenderingContextOverloads: function WebGL2RenderingContextOverloads() {
    },
    WebGL2RenderingContext: function WebGL2RenderingContext() {
    },
    WEBGLBlendEquationAdvancedCoherent: function WEBGLBlendEquationAdvancedCoherent() {
    },
    WEBGLColorBufferFloat: function WEBGLColorBufferFloat() {
    },
    WEBGLCompressedTextureAstc: function WEBGLCompressedTextureAstc() {
    },
    WEBGLCompressedTextureEtc: function WEBGLCompressedTextureEtc() {
    },
    WEBGLCompressedTextureEtc1: function WEBGLCompressedTextureEtc1() {
    },
    WEBGLCompressedTexturePvrtc: function WEBGLCompressedTexturePvrtc() {
    },
    WEBGLCompressedTextureS3tc: function WEBGLCompressedTextureS3tc() {
    },
    WEBGLCompressedTextureS3tcSrgb: function WEBGLCompressedTextureS3tcSrgb() {
    },
    WEBGLDebugRendererInfo: function WEBGLDebugRendererInfo() {
    },
    WEBGLDebugShaders: function WEBGLDebugShaders() {
    },
    WEBGLDepthTexture: function WEBGLDepthTexture() {
    },
    WEBGLDrawBuffers: function WEBGLDrawBuffers() {
    },
    WEBGLDrawInstancedBaseVertexBaseInstance: function WEBGLDrawInstancedBaseVertexBaseInstance() {
    },
    WEBGLLoseContext: function WEBGLLoseContext() {
    },
    WEBGLMultiDraw: function WEBGLMultiDraw() {
    },
    WEBGLMultiDrawInstancedBaseVertexBaseInstance: function WEBGLMultiDrawInstancedBaseVertexBaseInstance() {
    },
    GPUObjectBase: function GPUObjectBase() {
    },
    GPUObjectDescriptorBase: function GPUObjectDescriptorBase() {
    },
    GPUSupportedLimits: function GPUSupportedLimits() {
    },
    GPUSupportedFeatures: function GPUSupportedFeatures() {
    },
    GPUAdapterInfo: function GPUAdapterInfo() {
    },
    NavigatorGPU: function NavigatorGPU() {
    },
    Gpu: function Gpu() {
    },
    GPURequestAdapterOptions: function GPURequestAdapterOptions() {
    },
    GPUAdapter: function GPUAdapter() {
    },
    GPUDeviceDescriptor: function GPUDeviceDescriptor() {
    },
    GPUDevice: function GPUDevice() {
    },
    GPUBuffer: function GPUBuffer() {
    },
    GPUBufferDescriptor: function GPUBufferDescriptor() {
    },
    GPUBufferUsage: function GPUBufferUsage() {
    },
    GPUMapMode: function GPUMapMode() {
    },
    GPUTexture: function GPUTexture() {
    },
    GPUTextureDescriptor: function GPUTextureDescriptor() {
    },
    GPUTextureUsage: function GPUTextureUsage() {
    },
    GPUTextureView: function GPUTextureView() {
    },
    GPUTextureViewDescriptor: function GPUTextureViewDescriptor() {
    },
    GPUExternalTexture: function GPUExternalTexture() {
    },
    GPUExternalTextureDescriptor: function GPUExternalTextureDescriptor() {
    },
    GPUSampler: function GPUSampler() {
    },
    GPUSamplerDescriptor: function GPUSamplerDescriptor() {
    },
    GPUBindGroupLayout: function GPUBindGroupLayout() {
    },
    GPUBindGroupLayoutDescriptor: function GPUBindGroupLayoutDescriptor() {
    },
    GPUBindGroupLayoutEntry: function GPUBindGroupLayoutEntry() {
    },
    GPUShaderStage: function GPUShaderStage() {
    },
    GPUBufferBindingLayout: function GPUBufferBindingLayout() {
    },
    GPUSamplerBindingLayout: function GPUSamplerBindingLayout() {
    },
    GPUTextureBindingLayout: function GPUTextureBindingLayout() {
    },
    GPUStorageTextureBindingLayout: function GPUStorageTextureBindingLayout() {
    },
    GPUExternalTextureBindingLayout: function GPUExternalTextureBindingLayout() {
    },
    GPUBindGroup: function GPUBindGroup() {
    },
    GPUBindGroupDescriptor: function GPUBindGroupDescriptor() {
    },
    GPUBindGroupEntry: function GPUBindGroupEntry() {
    },
    GPUBufferBinding: function GPUBufferBinding() {
    },
    GPUPipelineLayout: function GPUPipelineLayout() {
    },
    GPUPipelineLayoutDescriptor: function GPUPipelineLayoutDescriptor() {
    },
    GPUShaderModule: function GPUShaderModule() {
    },
    GPUShaderModuleDescriptor: function GPUShaderModuleDescriptor() {
    },
    GPUShaderModuleCompilationHint: function GPUShaderModuleCompilationHint() {
    },
    GPUCompilationMessage: function GPUCompilationMessage() {
    },
    GPUCompilationInfo: function GPUCompilationInfo() {
    },
    GPUPipelineDescriptorBase: function GPUPipelineDescriptorBase() {
    },
    GPUPipelineBase: function GPUPipelineBase() {
    },
    GPUProgrammableStage: function GPUProgrammableStage() {
    },
    GPUComputePipeline: function GPUComputePipeline() {
    },
    GPUComputePipelineDescriptor: function GPUComputePipelineDescriptor() {
    },
    GPURenderPipeline: function GPURenderPipeline() {
    },
    GPURenderPipelineDescriptor: function GPURenderPipelineDescriptor() {
    },
    GPUPrimitiveState: function GPUPrimitiveState() {
    },
    GPUMultisampleState: function GPUMultisampleState() {
    },
    GPUFragmentState: function GPUFragmentState() {
    },
    GPUColorTargetState: function GPUColorTargetState() {
    },
    GPUBlendState: function GPUBlendState() {
    },
    GPUColorWrite: function GPUColorWrite() {
    },
    GPUBlendComponent: function GPUBlendComponent() {
    },
    GPUDepthStencilState: function GPUDepthStencilState() {
    },
    GPUStencilFaceState: function GPUStencilFaceState() {
    },
    GPUVertexState: function GPUVertexState() {
    },
    GPUVertexBufferLayout: function GPUVertexBufferLayout() {
    },
    GPUVertexAttribute: function GPUVertexAttribute() {
    },
    GPUCommandBuffer: function GPUCommandBuffer() {
    },
    GPUCommandBufferDescriptor: function GPUCommandBufferDescriptor() {
    },
    GPUCommandsMixin: function GPUCommandsMixin() {
    },
    GPUCommandEncoder: function GPUCommandEncoder() {
    },
    GPUCommandEncoderDescriptor: function GPUCommandEncoderDescriptor() {
    },
    GPUImageDataLayout: function GPUImageDataLayout() {
    },
    GPUImageCopyBuffer: function GPUImageCopyBuffer() {
    },
    GPUImageCopyTexture: function GPUImageCopyTexture() {
    },
    GPUImageCopyTextureTagged: function GPUImageCopyTextureTagged() {
    },
    GPUImageCopyExternalImage: function GPUImageCopyExternalImage() {
    },
    GPUBindingCommandsMixin: function GPUBindingCommandsMixin() {
    },
    GPUDebugCommandsMixin: function GPUDebugCommandsMixin() {
    },
    GPUComputePassEncoder: function GPUComputePassEncoder() {
    },
    GPUComputePassTimestampWrite: function GPUComputePassTimestampWrite() {
    },
    GPUComputePassDescriptor: function GPUComputePassDescriptor() {
    },
    GPURenderPassEncoder: function GPURenderPassEncoder() {
    },
    GPURenderPassTimestampWrite: function GPURenderPassTimestampWrite() {
    },
    GPURenderPassDescriptor: function GPURenderPassDescriptor() {
    },
    GPURenderPassColorAttachment: function GPURenderPassColorAttachment() {
    },
    GPURenderPassDepthStencilAttachment: function GPURenderPassDepthStencilAttachment() {
    },
    GPURenderPassLayout: function GPURenderPassLayout() {
    },
    GPURenderCommandsMixin: function GPURenderCommandsMixin() {
    },
    GPURenderBundle: function GPURenderBundle() {
    },
    GPURenderBundleDescriptor: function GPURenderBundleDescriptor() {
    },
    GPURenderBundleEncoder: function GPURenderBundleEncoder() {
    },
    GPURenderBundleEncoderDescriptor: function GPURenderBundleEncoderDescriptor() {
    },
    GPUQueueDescriptor: function GPUQueueDescriptor() {
    },
    GPUQueue: function GPUQueue() {
    },
    GPUQuerySet: function GPUQuerySet() {
    },
    GPUQuerySetDescriptor: function GPUQuerySetDescriptor() {
    },
    GPUCanvasContext: function GPUCanvasContext() {
    },
    GPUCanvasConfiguration: function GPUCanvasConfiguration() {
    },
    GPUDeviceLostInfo: function GPUDeviceLostInfo() {
    },
    GPUError: function GPUError() {
    },
    GPUOutOfMemoryError: function GPUOutOfMemoryError() {
    },
    GPUValidationError: function GPUValidationError() {
    },
    GPUUncapturedErrorEvent: function GPUUncapturedErrorEvent() {
    },
    GPUUncapturedErrorEventInit: function GPUUncapturedErrorEventInit() {
    },
    GPUColorDict: function GPUColorDict() {
    },
    GPUOrigin2DDict: function GPUOrigin2DDict() {
    },
    GPUOrigin3DDict: function GPUOrigin3DDict() {
    },
    GPUExtent3DDict: function GPUExtent3DDict() {
    },
    Hid: function Hid() {
    },
    HIDDeviceRequestOptions: function HIDDeviceRequestOptions() {
    },
    HIDDeviceFilter: function HIDDeviceFilter() {
    },
    HIDDevice: function HIDDevice() {
    },
    HIDConnectionEvent: function HIDConnectionEvent() {
    },
    HIDConnectionEventInit: function HIDConnectionEventInit() {
    },
    HIDInputReportEvent: function HIDInputReportEvent() {
    },
    HIDInputReportEventInit: function HIDInputReportEventInit() {
    },
    HIDCollectionInfo: function HIDCollectionInfo() {
    },
    HIDReportInfo: function HIDReportInfo() {
    },
    HIDReportItem: function HIDReportItem() {
    },
    DOMException: function DOMException() {
    },
    MidiPermissionDescriptor: function MidiPermissionDescriptor() {
    },
    MIDIOptions: function MIDIOptions() {
    },
    MIDIInputMap: function MIDIInputMap() {
    },
    MIDIOutputMap: function MIDIOutputMap() {
    },
    MIDIAccess: function MIDIAccess() {
    },
    MIDIPort: function MIDIPort() {
    },
    MIDIInput: function MIDIInput() {
    },
    MIDIOutput: function MIDIOutput() {
    },
    MIDIMessageEvent: function MIDIMessageEvent() {
    },
    MIDIMessageEventInit: function MIDIMessageEventInit() {
    },
    MIDIConnectionEvent: function MIDIConnectionEvent() {
    },
    MIDIConnectionEventInit: function MIDIConnectionEventInit() {
    },
    NavigatorML: function NavigatorML() {
    },
    MLContextOptions: function MLContextOptions() {
    },
    Ml: function Ml() {
    },
    MLContext: function MLContext() {
    },
    MLOperandDescriptor: function MLOperandDescriptor() {
    },
    MLOperand: function MLOperand() {
    },
    MLOperator: function MLOperator() {
    },
    MLBufferResourceView: function MLBufferResourceView() {
    },
    MLGraphBuilder: function MLGraphBuilder() {
    },
    MLBatchNormalizationOptions: function MLBatchNormalizationOptions() {
    },
    MLClampOptions: function MLClampOptions() {
    },
    MLConv2dOptions: function MLConv2dOptions() {
    },
    MLConvTranspose2dOptions: function MLConvTranspose2dOptions() {
    },
    MLEluOptions: function MLEluOptions() {
    },
    MLGemmOptions: function MLGemmOptions() {
    },
    MLGruOptions: function MLGruOptions() {
    },
    MLGruCellOptions: function MLGruCellOptions() {
    },
    MLHardSigmoidOptions: function MLHardSigmoidOptions() {
    },
    MLInstanceNormalizationOptions: function MLInstanceNormalizationOptions() {
    },
    MLLeakyReluOptions: function MLLeakyReluOptions() {
    },
    MLLinearOptions: function MLLinearOptions() {
    },
    MLPadOptions: function MLPadOptions() {
    },
    MLPool2dOptions: function MLPool2dOptions() {
    },
    MLReduceOptions: function MLReduceOptions() {
    },
    MLResample2dOptions: function MLResample2dOptions() {
    },
    MLSliceOptions: function MLSliceOptions() {
    },
    MLSoftplusOptions: function MLSoftplusOptions() {
    },
    MLSplitOptions: function MLSplitOptions() {
    },
    MLSqueezeOptions: function MLSqueezeOptions() {
    },
    MLTransposeOptions: function MLTransposeOptions() {
    },
    MLGraph: function MLGraph() {
    },
    MLCommandEncoder: function MLCommandEncoder() {
    },
    RTCConfiguration: function RTCConfiguration() {
    },
    RTCIceServer: function RTCIceServer() {
    },
    RTCOfferAnswerOptions: function RTCOfferAnswerOptions() {
    },
    RTCOfferOptions: function RTCOfferOptions() {
    },
    RTCAnswerOptions: function RTCAnswerOptions() {
    },
    RTCPeerConnection: function RTCPeerConnection() {
    },
    RTCSessionDescription: function RTCSessionDescription() {
    },
    RTCSessionDescriptionInit: function RTCSessionDescriptionInit() {
    },
    RTCLocalSessionDescriptionInit: function RTCLocalSessionDescriptionInit() {
    },
    RTCIceCandidate: function RTCIceCandidate() {
    },
    RTCIceCandidateInit: function RTCIceCandidateInit() {
    },
    RTCPeerConnectionIceEvent: function RTCPeerConnectionIceEvent() {
    },
    RTCPeerConnectionIceEventInit: function RTCPeerConnectionIceEventInit() {
    },
    RTCPeerConnectionIceErrorEvent: function RTCPeerConnectionIceErrorEvent() {
    },
    RTCPeerConnectionIceErrorEventInit: function RTCPeerConnectionIceErrorEventInit() {
    },
    RTCCertificateExpiration: function RTCCertificateExpiration() {
    },
    RTCCertificate: function RTCCertificate() {
    },
    RTCRtpTransceiverInit: function RTCRtpTransceiverInit() {
    },
    RTCRtpSender: function RTCRtpSender() {
    },
    RTCRtpParameters: function RTCRtpParameters() {
    },
    RTCRtpSendParameters: function RTCRtpSendParameters() {
    },
    RTCRtpReceiveParameters: function RTCRtpReceiveParameters() {
    },
    RTCRtpCodingParameters: function RTCRtpCodingParameters() {
    },
    RTCRtpEncodingParameters: function RTCRtpEncodingParameters() {
    },
    RTCRtcpParameters: function RTCRtcpParameters() {
    },
    RTCRtpHeaderExtensionParameters: function RTCRtpHeaderExtensionParameters() {
    },
    RTCRtpCodecParameters: function RTCRtpCodecParameters() {
    },
    RTCRtpCapabilities: function RTCRtpCapabilities() {
    },
    RTCRtpCodecCapability: function RTCRtpCodecCapability() {
    },
    RTCRtpHeaderExtensionCapability: function RTCRtpHeaderExtensionCapability() {
    },
    RTCRtpReceiver: function RTCRtpReceiver() {
    },
    RTCRtpContributingSource: function RTCRtpContributingSource() {
    },
    RTCRtpSynchronizationSource: function RTCRtpSynchronizationSource() {
    },
    RTCRtpTransceiver: function RTCRtpTransceiver() {
    },
    RTCDtlsTransport: function RTCDtlsTransport() {
    },
    RTCDtlsFingerprint: function RTCDtlsFingerprint() {
    },
    RTCIceTransport: function RTCIceTransport() {
    },
    RTCIceParameters: function RTCIceParameters() {
    },
    RTCIceCandidatePair: function RTCIceCandidatePair() {
    },
    RTCTrackEvent: function RTCTrackEvent() {
    },
    RTCTrackEventInit: function RTCTrackEventInit() {
    },
    RTCSctpTransport: function RTCSctpTransport() {
    },
    RTCDataChannel: function RTCDataChannel() {
    },
    RTCDataChannelInit: function RTCDataChannelInit() {
    },
    RTCDataChannelEvent: function RTCDataChannelEvent() {
    },
    RTCDataChannelEventInit: function RTCDataChannelEventInit() {
    },
    RTCDTMFSender: function RTCDTMFSender() {
    },
    RTCDTMFToneChangeEvent: function RTCDTMFToneChangeEvent() {
    },
    RTCDTMFToneChangeEventInit: function RTCDTMFToneChangeEventInit() {
    },
    RTCStatsReport: function RTCStatsReport() {
    },
    RTCStats: function RTCStats() {
    },
    RTCError: function RTCError() {
    },
    RTCErrorInit: function RTCErrorInit() {
    },
    RTCErrorEvent: function RTCErrorEvent() {
    },
    RTCErrorEventInit: function RTCErrorEventInit() {
    },
    RTCInsertableStreams: function RTCInsertableStreams() {
    },
    SFrameTransformOptions: function SFrameTransformOptions() {
    },
    SFrameTransform: function SFrameTransform() {
    },
    SFrameTransformErrorEvent: function SFrameTransformErrorEvent() {
    },
    SFrameTransformErrorEventInit: function SFrameTransformErrorEventInit() {
    },
    RTCEncodedVideoFrameMetadata: function RTCEncodedVideoFrameMetadata() {
    },
    RTCEncodedVideoFrame: function RTCEncodedVideoFrame() {
    },
    RTCEncodedAudioFrameMetadata: function RTCEncodedAudioFrameMetadata() {
    },
    RTCEncodedAudioFrame: function RTCEncodedAudioFrame() {
    },
    RTCTransformEvent: function RTCTransformEvent() {
    },
    RTCRtpScriptTransformer: function RTCRtpScriptTransformer() {
    },
    RTCRtpScriptTransform: function RTCRtpScriptTransform() {
    },
    RTCIceGatherOptions: function RTCIceGatherOptions() {
    },
    RTCIdentityProviderGlobalScope: function RTCIdentityProviderGlobalScope() {
    },
    RTCIdentityProviderRegistrar: function RTCIdentityProviderRegistrar() {
    },
    RTCIdentityProvider: function RTCIdentityProvider() {
    },
    RTCIdentityAssertionResult: function RTCIdentityAssertionResult() {
    },
    RTCIdentityProviderDetails: function RTCIdentityProviderDetails() {
    },
    RTCIdentityValidationResult: function RTCIdentityValidationResult() {
    },
    RTCIdentityProviderOptions: function RTCIdentityProviderOptions() {
    },
    RTCIdentityAssertion: function RTCIdentityAssertion() {
    },
    RTCRtpStreamStats: function RTCRtpStreamStats() {
    },
    RTCCodecStats: function RTCCodecStats() {
    },
    RTCReceivedRtpStreamStats: function RTCReceivedRtpStreamStats() {
    },
    RTCInboundRtpStreamStats: function RTCInboundRtpStreamStats() {
    },
    RTCRemoteInboundRtpStreamStats: function RTCRemoteInboundRtpStreamStats() {
    },
    RTCSentRtpStreamStats: function RTCSentRtpStreamStats() {
    },
    RTCOutboundRtpStreamStats: function RTCOutboundRtpStreamStats() {
    },
    RTCRemoteOutboundRtpStreamStats: function RTCRemoteOutboundRtpStreamStats() {
    },
    RTCMediaSourceStats: function RTCMediaSourceStats() {
    },
    RTCAudioSourceStats: function RTCAudioSourceStats() {
    },
    RTCVideoSourceStats: function RTCVideoSourceStats() {
    },
    RTCPeerConnectionStats: function RTCPeerConnectionStats() {
    },
    RTCDataChannelStats: function RTCDataChannelStats() {
    },
    RTCTransportStats: function RTCTransportStats() {
    },
    RTCIceCandidateStats: function RTCIceCandidateStats() {
    },
    RTCIceCandidatePairStats: function RTCIceCandidatePairStats() {
    },
    RTCCertificateStats: function RTCCertificateStats() {
    },
    WebSocket: function WebSocket() {
    },
    CloseEvent: function CloseEvent() {
    },
    CloseEventInit: function CloseEventInit() {
    },
    WebTransportDatagramDuplexStream: function WebTransportDatagramDuplexStream() {
    },
    WebTransport: function WebTransport() {
    },
    WebTransportHash: function WebTransportHash() {
    },
    WebTransportOptions: function WebTransportOptions() {
    },
    WebTransportCloseInfo: function WebTransportCloseInfo() {
    },
    WebTransportStats: function WebTransportStats() {
    },
    WebTransportDatagramStats: function WebTransportDatagramStats() {
    },
    WebTransportSendStream: function WebTransportSendStream() {
    },
    WebTransportSendStreamStats: function WebTransportSendStreamStats() {
    },
    WebTransportReceiveStream: function WebTransportReceiveStream() {
    },
    WebTransportReceiveStreamStats: function WebTransportReceiveStreamStats() {
    },
    WebTransportBidirectionalStream: function WebTransportBidirectionalStream() {
    },
    WebTransportError: function WebTransportError() {
    },
    WebTransportErrorInit: function WebTransportErrorInit() {
    },
    USBDeviceFilter: function USBDeviceFilter() {
    },
    USBDeviceRequestOptions: function USBDeviceRequestOptions() {
    },
    Usb: function Usb() {
    },
    USBConnectionEventInit: function USBConnectionEventInit() {
    },
    USBConnectionEvent: function USBConnectionEvent() {
    },
    USBInTransferResult: function USBInTransferResult() {
    },
    USBOutTransferResult: function USBOutTransferResult() {
    },
    USBIsochronousInTransferPacket: function USBIsochronousInTransferPacket() {
    },
    USBIsochronousInTransferResult: function USBIsochronousInTransferResult() {
    },
    USBIsochronousOutTransferPacket: function USBIsochronousOutTransferPacket() {
    },
    USBIsochronousOutTransferResult: function USBIsochronousOutTransferResult() {
    },
    USBDevice: function USBDevice() {
    },
    USBControlTransferParameters: function USBControlTransferParameters() {
    },
    USBConfiguration: function USBConfiguration() {
    },
    USBInterface: function USBInterface() {
    },
    USBAlternateInterface: function USBAlternateInterface() {
    },
    USBEndpoint: function USBEndpoint() {
    },
    USBPermissionDescriptor: function USBPermissionDescriptor() {
    },
    AllowedUSBDevice: function AllowedUSBDevice() {
    },
    USBPermissionStorage: function USBPermissionStorage() {
    },
    USBPermissionResult: function USBPermissionResult() {
    },
    VTTCue: function VTTCue() {
    },
    VTTRegion: function VTTRegion() {
    },
    XRSystem: function XRSystem() {
    },
    XRSessionInit: function XRSessionInit() {
    },
    XRSession: function XRSession() {
    },
    XRRenderStateInit: function XRRenderStateInit() {
    },
    XRRenderState: function XRRenderState() {
    },
    XRFrame: function XRFrame() {
    },
    XRSpace: function XRSpace() {
    },
    XRReferenceSpace: function XRReferenceSpace() {
    },
    XRBoundedReferenceSpace: function XRBoundedReferenceSpace() {
    },
    XRView: function XRView() {
    },
    XRViewport: function XRViewport() {
    },
    XRRigidTransform: function XRRigidTransform() {
    },
    XRPose: function XRPose() {
    },
    XRViewerPose: function XRViewerPose() {
    },
    XRInputSource: function XRInputSource() {
    },
    XRInputSourceArray: function XRInputSourceArray() {
    },
    XRLayer: function XRLayer() {
    },
    XRWebGLLayerInit: function XRWebGLLayerInit() {
    },
    XRWebGLLayer: function XRWebGLLayer() {
    },
    XRSessionEvent: function XRSessionEvent() {
    },
    XRSessionEventInit: function XRSessionEventInit() {
    },
    XRInputSourceEvent: function XRInputSourceEvent() {
    },
    XRInputSourceEventInit: function XRInputSourceEventInit() {
    },
    XRInputSourcesChangeEvent: function XRInputSourcesChangeEvent() {
    },
    XRInputSourcesChangeEventInit: function XRInputSourcesChangeEventInit() {
    },
    XRReferenceSpaceEvent: function XRReferenceSpaceEvent() {
    },
    XRReferenceSpaceEventInit: function XRReferenceSpaceEventInit() {
    },
    XRSessionSupportedPermissionDescriptor: function XRSessionSupportedPermissionDescriptor() {
    },
    XRPermissionDescriptor: function XRPermissionDescriptor() {
    },
    XRPermissionStatus: function XRPermissionStatus() {
    },
    XRDepthStateInit: function XRDepthStateInit() {
    },
    XRDepthInformation: function XRDepthInformation() {
    },
    XRCPUDepthInformation: function XRCPUDepthInformation() {
    },
    XRWebGLDepthInformation: function XRWebGLDepthInformation() {
    },
    XRDOMOverlayInit: function XRDOMOverlayInit() {
    },
    XRDOMOverlayState: function XRDOMOverlayState() {
    },
    XRHand: function XRHand() {
    },
    XRJointSpace: function XRJointSpace() {
    },
    XRJointPose: function XRJointPose() {
    },
    XRHitTestOptionsInit: function XRHitTestOptionsInit() {
    },
    XRTransientInputHitTestOptionsInit: function XRTransientInputHitTestOptionsInit() {
    },
    XRHitTestSource: function XRHitTestSource() {
    },
    XRTransientInputHitTestSource: function XRTransientInputHitTestSource() {
    },
    XRHitTestResult: function XRHitTestResult() {
    },
    XRTransientInputHitTestResult: function XRTransientInputHitTestResult() {
    },
    XRRayDirectionInit: function XRRayDirectionInit() {
    },
    XRRay: function XRRay() {
    },
    XRLightProbe: function XRLightProbe() {
    },
    XRLightEstimate: function XRLightEstimate() {
    },
    XRLightProbeInit: function XRLightProbeInit() {
    },
    XRCompositionLayer: function XRCompositionLayer() {
    },
    XRProjectionLayer: function XRProjectionLayer() {
    },
    XRQuadLayer: function XRQuadLayer() {
    },
    XRCylinderLayer: function XRCylinderLayer() {
    },
    XREquirectLayer: function XREquirectLayer() {
    },
    XRCubeLayer: function XRCubeLayer() {
    },
    XRSubImage: function XRSubImage() {
    },
    XRWebGLSubImage: function XRWebGLSubImage() {
    },
    XRProjectionLayerInit: function XRProjectionLayerInit() {
    },
    XRLayerInit: function XRLayerInit() {
    },
    XRQuadLayerInit: function XRQuadLayerInit() {
    },
    XRCylinderLayerInit: function XRCylinderLayerInit() {
    },
    XREquirectLayerInit: function XREquirectLayerInit() {
    },
    XRCubeLayerInit: function XRCubeLayerInit() {
    },
    XRWebGLBinding: function XRWebGLBinding() {
    },
    XRMediaLayerInit: function XRMediaLayerInit() {
    },
    XRMediaQuadLayerInit: function XRMediaQuadLayerInit() {
    },
    XRMediaCylinderLayerInit: function XRMediaCylinderLayerInit() {
    },
    XRMediaEquirectLayerInit: function XRMediaEquirectLayerInit() {
    },
    XRMediaBinding: function XRMediaBinding() {
    },
    XRLayerEvent: function XRLayerEvent() {
    },
    XRLayerEventInit: function XRLayerEventInit() {
    },
    WindowControlsOverlay: function WindowControlsOverlay() {
    },
    WindowControlsOverlayGeometryChangeEvent: function WindowControlsOverlayGeometryChangeEvent() {
    },
    WindowControlsOverlayGeometryChangeEventInit: function WindowControlsOverlayGeometryChangeEventInit() {
    },
    ScreenDetails: function ScreenDetails() {
    },
    ScreenDetailed: function ScreenDetailed() {
    },
    XMLHttpRequestEventTarget: function XMLHttpRequestEventTarget() {
    },
    XMLHttpRequestUpload: function XMLHttpRequestUpload() {
    },
    XMLHttpRequest: function XMLHttpRequest() {
    },
    FormData: function FormData() {
    },
    ProgressEvent: function ProgressEvent() {
    },
    ProgressEventInit: function ProgressEventInit() {
    },
    JsArray0: function JsArray0() {
    },
    Symbol2: function Symbol2() {
    },
    JsIterator: function JsIterator() {
    },
    AsyncIterator0: function AsyncIterator0() {
    },
    IteratorResult0: function IteratorResult0() {
    },
    JsIterable: function JsIterable() {
    },
    JSObject: function JSObject() {
    },
    JsMap: function JsMap() {
    },
    Number: function Number() {
    },
    Reflect: function Reflect() {
    },
    _parseUri(uri) {
      if (type$.Uri._is(uri))
        return uri;
      throw A.wrapException(A.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new A.StringBuffer("");
        t1 = "" + (method + "(");
        message._contents = t1;
        t2 = A._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new A.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new A.MappedListIterable(t4, t3._eval$1("String(ListIterable.E)")._as(new A._validateArgList_closure()), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0) {
      this.style = t0;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0 && style.isSeparator$1(B.JSString_methods._codeUnitAt$1(path, 0))) {
        if (0 >= t1)
          return A.ioore(path, 0);
        B.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        B.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(B.JSString_methods._codeUnitAt$1(path, i))) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(path, start, i));
          B.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        B.JSArray_methods.add$1(parts, B.JSString_methods.substring$1(path, start));
        B.JSArray_methods.add$1(separators, "");
      }
      return new A.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    PathException$(message) {
      return new A.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    Style__getPlatformStyle() {
      var userInfo, host, query, fragment, port, t1, hasAuthority, path, _null = null;
      if (A.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      if (!B.JSString_methods.endsWith$1(A.Uri_base().get$path(), "/"))
        return $.$get$Style_url();
      userInfo = A._Uri__makeUserInfo(_null, 0, 0);
      host = A._Uri__makeHost(_null, 0, 0, false);
      query = A._Uri__makeQuery(_null, 0, 0, _null);
      fragment = A._Uri__makeFragment(_null, 0, 0);
      port = A._Uri__makePort(_null, "");
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || false;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath("a/b", 0, 3, _null, "", hasAuthority);
      if (t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      if (A._Uri$_internal("", userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    PostgrestClient: function PostgrestClient(t0) {
      this.headers = t0;
    },
    PostgrestFilterBuilder$(builder, $T) {
      var t2, t3, t4, t5, t6, t7, t8, t9,
        t1 = builder.__PostgrestBuilder__url_A;
      t1 === $ && A.throwLateFieldNI("_url");
      t2 = builder._postgrest_builder$_method;
      t3 = builder.__PostgrestBuilder__headers_F;
      t3 === $ && A.throwLateFieldNI("_headers");
      t4 = builder.__PostgrestBuilder__schema_F;
      t4 === $ && A.throwLateFieldNI("_schema");
      t5 = builder._body;
      t6 = builder.__PostgrestBuilder__httpClient_F;
      t6 === $ && A.throwLateFieldNI("_httpClient");
      t7 = builder._options;
      t8 = builder.__PostgrestBuilder__isolate_F;
      t8 === $ && A.throwLateFieldNI("_isolate");
      t9 = new A.PostgrestFilterBuilder($T._eval$1("PostgrestFilterBuilder<0>"));
      t9.PostgrestBuilder$8$body$headers$httpClient$isolate$method$options$schema$url(t5, t3, t6, t8, t2, t7, t4, t1, $T, $T);
      return t9;
    },
    PostgrestQueryBuilder$(url, headers, httpClient, isolate, options, schema, $T) {
      var t1 = A.Uri_parse(url, 0, null),
        t2 = new A.PostgrestQueryBuilder($T._eval$1("PostgrestQueryBuilder<0>"));
      t2.PostgrestBuilder$8$body$headers$httpClient$isolate$method$options$schema$url(null, headers, httpClient, isolate, null, options, schema, t1, $T, $T);
      return t2;
    },
    PostgrestBuilder: function PostgrestBuilder() {
    },
    PostgrestBuilder_whenComplete_closure: function PostgrestBuilder_whenComplete_closure(t0, t1) {
      this.$this = t0;
      this.action = t1;
    },
    PostgrestBuilder_whenComplete__closure0: function PostgrestBuilder_whenComplete__closure0(t0, t1) {
      this.$this = t0;
      this.v = t1;
    },
    PostgrestBuilder_whenComplete_closure0: function PostgrestBuilder_whenComplete_closure0(t0) {
      this.action = t0;
    },
    PostgrestBuilder_whenComplete__closure: function PostgrestBuilder_whenComplete__closure(t0) {
      this.e = t0;
    },
    PostgrestFilterBuilder: function PostgrestFilterBuilder(t0) {
      var _ = this;
      _._body = null;
      _.__PostgrestBuilder__headers_F = $;
      _._postgrest_builder$_method = null;
      _.__PostgrestBuilder__isolate_F = _.__PostgrestBuilder__httpClient_F = _.__PostgrestBuilder__url_A = _.__PostgrestBuilder__schema_F = $;
      _._options = null;
      _.$ti = t0;
    },
    PostgrestFilterBuilder__cleanFilterArray_closure: function PostgrestFilterBuilder__cleanFilterArray_closure() {
    },
    PostgrestFilterBuilder__cleanFilterArray_closure0: function PostgrestFilterBuilder__cleanFilterArray_closure0() {
    },
    PostgrestFilterBuilder__cleanFilterArray_closure1: function PostgrestFilterBuilder__cleanFilterArray_closure1() {
    },
    PostgrestQueryBuilder: function PostgrestQueryBuilder(t0) {
      var _ = this;
      _._body = null;
      _.__PostgrestBuilder__headers_F = $;
      _._postgrest_builder$_method = null;
      _.__PostgrestBuilder__isolate_F = _.__PostgrestBuilder__httpClient_F = _.__PostgrestBuilder__url_A = _.__PostgrestBuilder__schema_F = $;
      _._options = null;
      _.$ti = t0;
    },
    PostgrestQueryBuilder_select_closure: function PostgrestQueryBuilder_select_closure(t0, t1) {
      this._box_0 = t0;
      this.re = t1;
    },
    PostgrestTransformBuilder: function PostgrestTransformBuilder() {
    },
    PostgrestException: function PostgrestException(t0, t1, t2, t3) {
      var _ = this;
      _.message = t0;
      _.code = t1;
      _.details = t2;
      _.hint = t3;
    },
    PostgrestResponse: function PostgrestResponse(t0, t1, t2) {
      this.data = t0;
      this.count = t1;
      this.$ti = t2;
    },
    FetchOptions: function FetchOptions(t0, t1, t2) {
      this.head = t0;
      this.count = t1;
      this.forceResponse = t2;
    },
    ChannelEventsExtended_eventName(_this) {
      if (_this === B.ChannelEvents_6)
        return "access_token";
      else if (_this === B.ChannelEvents_9)
        return "postgres_changes";
      else if (_this === B.ChannelEvents_7)
        return "broadcast";
      else if (_this === B.ChannelEvents_8)
        return "presence";
      return "phx_" + B.JSArray_methods.get$last(_this._enumToString$0().split("."));
    },
    SocketStates: function SocketStates(t0) {
      this._core$_name = t0;
    },
    ChannelEvents: function ChannelEvents(t0) {
      this._core$_name = t0;
    },
    Message: function Message(t0, t1, t2, t3) {
      var _ = this;
      _.topic = t0;
      _.event = t1;
      _.payload = t2;
      _.ref = t3;
    },
    RealtimeClient$(endPoint, headers, params) {
      var _null = null,
        t1 = A._setArrayType([], type$.JSArray_RealtimeChannel),
        t2 = type$.JSArray_Function,
        t3 = type$.String;
      t2 = A.LinkedHashMap_LinkedHashMap$_literal(["open", A._setArrayType([], t2), "close", A._setArrayType([], t2), "error", A._setArrayType([], t2), "message", A._setArrayType([], t2)], t3, type$.List_Function);
      t3 = A.LinkedHashMap_LinkedHashMap$of(B.Map_tan7V, t3, t3);
      t3.addAll$1(0, headers);
      t1 = new A.RealtimeClient(t1, endPoint + "/websocket", t3, params, A.websocket_stub__createWebSocketClient$closure(), [], t2);
      t1.RealtimeClient$11$decode$encode$headers$heartbeatIntervalMs$logger$longpollerTimeout$params$reconnectAfterMs$timeout$transport(endPoint, _null, _null, headers, 30000, _null, 20000, params, _null, B.Duration_10000000, _null);
      return t1;
    },
    RealtimeClient: function RealtimeClient(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.accessToken = null;
      _.channels = t0;
      _.endPoint = t1;
      _.headers = t2;
      _.params = t3;
      _.transport = t4;
      _.pendingHeartbeatRef = _.heartbeatTimer = null;
      _.ref = 0;
      _.__RealtimeClient_reconnectAfterMs_A = _.__RealtimeClient_decode_A = _.__RealtimeClient_encode_A = _.__RealtimeClient_reconnectTimer_A = $;
      _.conn = null;
      _.sendBuffer = t5;
      _.stateChangeCallbacks = t6;
      _.connState = null;
      _.eventsPerSecondLimitMs = 100;
      _.inThrottle = false;
    },
    RealtimeClient_closure: function RealtimeClient_closure() {
    },
    RealtimeClient_closure0: function RealtimeClient_closure0() {
    },
    RealtimeClient_closure1: function RealtimeClient_closure1(t0) {
      this.$this = t0;
    },
    RealtimeClient_connect_closure: function RealtimeClient_connect_closure(t0) {
      this.$this = t0;
    },
    RealtimeClient_connect_closure0: function RealtimeClient_connect_closure0(t0) {
      this.$this = t0;
    },
    RealtimeClient_push_callback: function RealtimeClient_push_callback(t0, t1) {
      this.$this = t0;
      this.message = t1;
    },
    RealtimeClient_push_callback_closure: function RealtimeClient_push_callback_closure(t0) {
      this.$this = t0;
    },
    RealtimeClient_onConnMessage_closure: function RealtimeClient_onConnMessage_closure(t0) {
      this.$this = t0;
    },
    RealtimeClient_onConnMessage__closure: function RealtimeClient_onConnMessage__closure(t0) {
      this.topic = t0;
    },
    RealtimeClient_onConnMessage__closure0: function RealtimeClient_onConnMessage__closure0(t0, t1, t2) {
      this.event = t0;
      this.payload = t1;
      this.ref = t2;
    },
    RealtimeClient__onConnOpen_closure: function RealtimeClient__onConnOpen_closure(t0) {
      this.$this = t0;
    },
    RealtimeClient__appendParams_closure: function RealtimeClient__appendParams_closure(t0) {
      this.searchParams = t0;
    },
    RealtimeClient__throttle_closure: function RealtimeClient__throttle_closure(t0, t1, t2) {
      this.$this = t0;
      this.callback = t1;
      this.eventsPerSecondLimit = t2;
    },
    RealtimeClient__throttle__closure: function RealtimeClient__throttle__closure(t0) {
      this.$this = t0;
    },
    RetryTimer_createRetryFunction() {
      return new A.RetryTimer_createRetryFunction_closure(1000, 10000);
    },
    RetryTimer: function RetryTimer(t0, t1) {
      var _ = this;
      _.callback = t0;
      _.timerCalc = t1;
      _._timer = null;
      _._tries = 0;
    },
    RetryTimer_scheduleTimeout_closure: function RetryTimer_scheduleTimeout_closure(t0) {
      this.$this = t0;
    },
    RetryTimer_createRetryFunction_closure: function RetryTimer_createRetryFunction_closure(t0, t1) {
      this.firstDelay = t0;
      this.maxDelay = t1;
    },
    DeferStream$(streamFactory, reusable, $T) {
      return new A.DeferStream(streamFactory, true, $T._eval$1("DeferStream<0>"));
    },
    DeferStream: function DeferStream(t0, t1, t2) {
      this._factory = t0;
      this._isReusable = t1;
      this.$ti = t2;
    },
    BehaviorSubject__deferStream(wrapper, controller, sync, $T) {
      return new A.BehaviorSubject__deferStream_closure(wrapper, controller, $T);
    },
    BehaviorSubject: function BehaviorSubject(t0, t1, t2, t3) {
      var _ = this;
      _._wrapper = t0;
      _._subject$_controller = t1;
      _._isAddingStreamItems = false;
      _._stream = t2;
      _.$ti = t3;
    },
    BehaviorSubject__deferStream_closure: function BehaviorSubject__deferStream_closure(t0, t1, t2) {
      this.wrapper = t0;
      this.controller = t1;
      this.T = t2;
    },
    _Wrapper: function _Wrapper(t0, t1) {
      var _ = this;
      _.isValue = false;
      _.value = t0;
      _.errorAndStackTrace = null;
      _.$ti = t1;
    },
    _BehaviorSubjectStream: function _BehaviorSubjectStream(t0, t1) {
      this._subject = t0;
      this.$ti = t1;
    },
    Subject: function Subject() {
    },
    _StartWithStreamSink: function _StartWithStreamSink(t0, t1) {
      this._startValue = t0;
      this._forwarding_sink$_sink = null;
      this.$ti = t1;
    },
    StartWithStreamTransformer: function StartWithStreamTransformer(t0, t1) {
      this.startValue = t0;
      this.$ti = t1;
    },
    StartWithStreamTransformer_bind_closure: function StartWithStreamTransformer_bind_closure(t0) {
      this.$this = t0;
    },
    _StartWithErrorStreamSink: function _StartWithErrorStreamSink(t0, t1, t2) {
      var _ = this;
      _._e = t0;
      _._st = t1;
      _._forwarding_sink$_sink = null;
      _.$ti = t2;
    },
    StartWithErrorStreamTransformer: function StartWithErrorStreamTransformer(t0, t1, t2) {
      this.error = t0;
      this.stackTrace = t1;
      this.$ti = t2;
    },
    StartWithErrorStreamTransformer_bind_closure: function StartWithErrorStreamTransformer_bind_closure(t0) {
      this.$this = t0;
    },
    _Empty: function _Empty() {
    },
    ErrorAndStackTrace: function ErrorAndStackTrace(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    ForwardingSink: function ForwardingSink() {
    },
    forwardStream(stream, sinkFactory, $T, $R) {
      var t1;
      if (stream.get$isBroadcast())
        t1 = A._forwardMulti(stream, sinkFactory, $T, $R);
      else
        t1 = A._forward(stream, sinkFactory, $T, $R);
      return t1;
    },
    _forwardMulti(stream, sinkFactory, $T, $R) {
      return new A._MultiStream(true, new A._forwardMulti_closure(sinkFactory, stream, $R, $T), $R._eval$1("_MultiStream<0>"));
    },
    _forward(stream, sinkFactory, $T, $R) {
      var controller, sink, _null = null, t1 = {};
      if (stream.get$isBroadcast())
        controller = new A._SyncBroadcastStreamController(_null, _null, $R._eval$1("_SyncBroadcastStreamController<0>"));
      else
        controller = A.StreamController_StreamController(_null, _null, _null, true, $R);
      t1.subscription = null;
      t1.cancelled = false;
      sink = A._InitializedCell$named("sink", new A._forward_closure(sinkFactory, $T, $R));
      controller.set$onListen(new A._forward_closure0(t1, stream, sink, controller, $T));
      controller.set$onCancel(new A._forward_closure1(t1, sink));
      return controller.get$stream();
    },
    _forwardMulti_closure: function _forwardMulti_closure(t0, t1, t2, t3) {
      var _ = this;
      _.sinkFactory = t0;
      _.stream = t1;
      _.R = t2;
      _.T = t3;
    },
    _forwardMulti_closure_listenToUpstream: function _forwardMulti_closure_listenToUpstream(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.stream = t1;
      _.sink = t2;
      _.T = t3;
    },
    _forwardMulti__closure: function _forwardMulti__closure(t0, t1) {
      this._box_0 = t0;
      this.sink = t1;
    },
    _forward_closure: function _forward_closure(t0, t1, t2) {
      this.sinkFactory = t0;
      this.T = t1;
      this.R = t2;
    },
    _forward_closure0: function _forward_closure0(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.stream = t1;
      _.sink = t2;
      _.controller = t3;
      _.T = t4;
    },
    _forward_closure_listenToUpstream: function _forward_closure_listenToUpstream(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.stream = t1;
      _.sink = t2;
      _.controller = t3;
      _.T = t4;
    },
    _forward__listenToUpstream_closure: function _forward__listenToUpstream_closure(t0, t1) {
      this._box_0 = t0;
      this.sink = t1;
    },
    _forward__listenToUpstream_closure0: function _forward__listenToUpstream_closure0(t0, t1) {
      this._box_0 = t0;
      this.sink = t1;
    },
    _forward_closure1: function _forward_closure1(t0, t1) {
      this._box_0 = t0;
      this.sink = t1;
    },
    _MultiControllerSink: function _MultiControllerSink(t0, t1) {
      this.controller = t0;
      this.$ti = t1;
    },
    FileLocation$_(file, offset) {
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > file._decodedChars.length)
        A.throwExpression(A.RangeError$("Offset " + offset + string$.x20must_ + file.get$length(file) + "."));
      return new A.FileLocation(file, offset);
    },
    SourceFile: function SourceFile(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = null;
    },
    FileLocation: function FileLocation(t0, t1) {
      this.file = t0;
      this.offset = t1;
    },
    _FileSpan: function _FileSpan(t0, t1, t2) {
      this.file = t0;
      this._file$_start = t1;
      this._end = t2;
    },
    Highlighter$(span, color) {
      var t1 = A.Highlighter__collateLines(A._setArrayType([A._Highlight$(span, true)], type$.JSArray__Highlight)),
        t2 = new A.Highlighter_closure(color).call$0(),
        t3 = B.JSInt_methods.toString$0(B.JSArray_methods.get$last(t1).number + 1),
        t4 = A.Highlighter__contiguous(t1) ? 0 : 3,
        t5 = A._arrayInstanceType(t1);
      return new A.Highlighter(t1, t2, null, 1 + Math.max(t3.length, t4), new A.MappedListIterable(t1, t5._eval$1("int(1)")._as(new A.Highlighter$__closure()), t5._eval$1("MappedListIterable<1,int>")).reduce$1(0, B.CONSTANT), !A.isAllTheSame(new A.MappedListIterable(t1, t5._eval$1("Object?(1)")._as(new A.Highlighter$__closure0()), t5._eval$1("MappedListIterable<1,Object?>"))), new A.StringBuffer(""));
    },
    Highlighter__contiguous(lines) {
      var i, thisLine, nextLine;
      for (i = 0; i < lines.length - 1;) {
        thisLine = lines[i];
        ++i;
        nextLine = lines[i];
        if (thisLine.number + 1 !== nextLine.number && J.$eq$(thisLine.url, nextLine.url))
          return false;
      }
      return true;
    },
    Highlighter__collateLines(highlights) {
      var t1, t2, t3,
        highlightsByUrl = A.groupBy(highlights, new A.Highlighter__collateLines_closure(), type$._Highlight, type$.Object);
      for (t1 = highlightsByUrl.get$values(highlightsByUrl), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1]; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        J.sort$1$ax(t3, new A.Highlighter__collateLines_closure0());
      }
      t1 = highlightsByUrl.get$entries();
      t2 = A._instanceType(t1);
      t3 = t2._eval$1("ExpandIterable<Iterable.E,_Line>");
      return A.List_List$of(new A.ExpandIterable(t1, t2._eval$1("Iterable<_Line>(Iterable.E)")._as(new A.Highlighter__collateLines_closure1()), t3), true, t3._eval$1("Iterable.E"));
    },
    _Highlight$(span, primary) {
      var t1 = new A._Highlight_closure(span).call$0();
      return new A._Highlight(t1, true, null);
    },
    _Highlight__normalizeNewlines(span) {
      var endOffset, t1, i, t2, t3, t4,
        text = span.get$text();
      if (!B.JSString_methods.contains$1(text, "\r\n"))
        return span;
      endOffset = span.get$end().get$offset();
      for (t1 = text.length - 1, i = 0; i < t1; ++i)
        if (B.JSString_methods._codeUnitAt$1(text, i) === 13 && B.JSString_methods._codeUnitAt$1(text, i + 1) === 10)
          --endOffset;
      t1 = span.get$start();
      t2 = span.get$sourceUrl();
      t3 = span.get$end().get$line();
      t2 = A.SourceLocation$(endOffset, span.get$end().get$column(), t3, t2);
      t3 = A.stringReplaceAllUnchecked(text, "\r\n", "\n");
      t4 = span.get$context();
      return A.SourceSpanWithContext$(t1, t2, t3, A.stringReplaceAllUnchecked(t4, "\r\n", "\n"));
    },
    _Highlight__normalizeTrailingNewline(span) {
      var context, text, start, end, t1, t2, t3;
      if (!B.JSString_methods.endsWith$1(span.get$context(), "\n"))
        return span;
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n\n"))
        return span;
      context = B.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1);
      text = span.get$text();
      start = span.get$start();
      end = span.get$end();
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n")) {
        t1 = A.findLineStart(span.get$context(), span.get$text(), span.get$start().get$column());
        t1.toString;
        t1 = t1 + span.get$start().get$column() + span.get$length(span) === span.get$context().length;
      } else
        t1 = false;
      if (t1) {
        text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
        if (text.length === 0)
          end = start;
        else {
          t1 = span.get$end().get$offset();
          t2 = span.get$sourceUrl();
          t3 = span.get$end().get$line();
          end = A.SourceLocation$(t1 - 1, A._Highlight__lastLineLength(context), t3 - 1, t2);
          start = span.get$start().get$offset() === span.get$end().get$offset() ? end : span.get$start();
        }
      }
      return A.SourceSpanWithContext$(start, end, text, context);
    },
    _Highlight__normalizeEndOfLine(span) {
      var text, t1, t2, t3, t4;
      if (span.get$end().get$column() !== 0)
        return span;
      if (span.get$end().get$line() === span.get$start().get$line())
        return span;
      text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
      t1 = span.get$start();
      t2 = span.get$end().get$offset();
      t3 = span.get$sourceUrl();
      t4 = span.get$end().get$line();
      t3 = A.SourceLocation$(t2 - 1, text.length - B.JSString_methods.lastIndexOf$1(text, "\n") - 1, t4 - 1, t3);
      return A.SourceSpanWithContext$(t1, t3, text, B.JSString_methods.endsWith$1(span.get$context(), "\n") ? B.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1) : span.get$context());
    },
    _Highlight__lastLineLength(text) {
      var t1 = text.length;
      if (t1 === 0)
        return 0;
      else if (B.JSString_methods.codeUnitAt$1(text, t1 - 1) === 10)
        return t1 === 1 ? 0 : t1 - B.JSString_methods.lastIndexOf$2(text, "\n", t1 - 2) - 1;
      else
        return t1 - B.JSString_methods.lastIndexOf$1(text, "\n") - 1;
    },
    Highlighter: function Highlighter(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._lines = t0;
      _._primaryColor = t1;
      _._secondaryColor = t2;
      _._paddingBeforeSidebar = t3;
      _._maxMultilineSpans = t4;
      _._multipleFiles = t5;
      _._highlighter$_buffer = t6;
    },
    Highlighter_closure: function Highlighter_closure(t0) {
      this.color = t0;
    },
    Highlighter$__closure: function Highlighter$__closure() {
    },
    Highlighter$___closure: function Highlighter$___closure() {
    },
    Highlighter$__closure0: function Highlighter$__closure0() {
    },
    Highlighter__collateLines_closure: function Highlighter__collateLines_closure() {
    },
    Highlighter__collateLines_closure0: function Highlighter__collateLines_closure0() {
    },
    Highlighter__collateLines_closure1: function Highlighter__collateLines_closure1() {
    },
    Highlighter__collateLines__closure: function Highlighter__collateLines__closure(t0) {
      this.line = t0;
    },
    Highlighter_highlight_closure: function Highlighter_highlight_closure() {
    },
    Highlighter__writeFileStart_closure: function Highlighter__writeFileStart_closure(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure: function Highlighter__writeMultilineHighlights_closure(t0, t1, t2) {
      this.$this = t0;
      this.startLine = t1;
      this.line = t2;
    },
    Highlighter__writeMultilineHighlights_closure0: function Highlighter__writeMultilineHighlights_closure0(t0, t1) {
      this.$this = t0;
      this.highlight = t1;
    },
    Highlighter__writeMultilineHighlights_closure1: function Highlighter__writeMultilineHighlights_closure1(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure2: function Highlighter__writeMultilineHighlights_closure2(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.current = t2;
      _.startLine = t3;
      _.line = t4;
      _.highlight = t5;
      _.endLine = t6;
    },
    Highlighter__writeMultilineHighlights__closure: function Highlighter__writeMultilineHighlights__closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeMultilineHighlights__closure0: function Highlighter__writeMultilineHighlights__closure0(t0, t1) {
      this.$this = t0;
      this.vertical = t1;
    },
    Highlighter__writeHighlightedText_closure: function Highlighter__writeHighlightedText_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.text = t1;
      _.startColumn = t2;
      _.endColumn = t3;
    },
    Highlighter__writeIndicator_closure: function Highlighter__writeIndicator_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure0: function Highlighter__writeIndicator_closure0(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure1: function Highlighter__writeIndicator_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.coversWholeLine = t1;
      _.line = t2;
      _.highlight = t3;
    },
    Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.end = t2;
    },
    _Highlight: function _Highlight(t0, t1, t2) {
      this.span = t0;
      this.isPrimary = t1;
      this.label = t2;
    },
    _Highlight_closure: function _Highlight_closure(t0) {
      this.span = t0;
    },
    _Line: function _Line(t0, t1, t2, t3) {
      var _ = this;
      _.text = t0;
      _.number = t1;
      _.url = t2;
      _.highlights = t3;
    },
    SourceLocation$(offset, column, line, sourceUrl) {
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (line < 0)
        A.throwExpression(A.RangeError$("Line may not be negative, was " + line + "."));
      else if (column < 0)
        A.throwExpression(A.RangeError$("Column may not be negative, was " + column + "."));
      return new A.SourceLocation(sourceUrl, offset, line, column);
    },
    SourceLocation: function SourceLocation(t0, t1, t2, t3) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
    },
    SourceLocationMixin: function SourceLocationMixin() {
    },
    SourceSpanBase: function SourceSpanBase() {
    },
    SourceSpanFormatException$(message, span, source) {
      return new A.SourceSpanFormatException(source, message, span);
    },
    SourceSpanException: function SourceSpanException() {
    },
    SourceSpanFormatException: function SourceSpanFormatException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    SourceSpanMixin: function SourceSpanMixin() {
    },
    SourceSpanWithContext$(start, end, text, _context) {
      var t1 = new A.SourceSpanWithContext(_context, start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      if (!B.JSString_methods.contains$1(_context, text))
        A.throwExpression(A.ArgumentError$('The context line "' + _context + '" must contain "' + text + '".', null));
      if (A.findLineStart(_context, text, start.get$column()) == null)
        A.throwExpression(A.ArgumentError$('The span text "' + text + '" must start at column ' + (start.get$column() + 1) + ' in a line within "' + _context + '".', null));
      return t1;
    },
    SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3) {
      var _ = this;
      _._context = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
    },
    StorageBucketApi: function StorageBucketApi() {
    },
    SupabaseStorageClient: function SupabaseStorageClient(t0) {
      this.headers = t0;
    },
    StringScannerException: function StringScannerException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    StringScanner: function StringScanner(t0, t1) {
      var _ = this;
      _.sourceUrl = t0;
      _.string = t1;
      _._position = 0;
      _._lastMatchPosition = _._lastMatch = null;
    },
    SupabaseClient: function SupabaseClient(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.supabaseKey = t0;
      _.schema = t1;
      _.restUrl = t2;
      _.realtimeUrl = t3;
      _.authUrl = t4;
      _.storageUrl = t5;
      _.functionsUrl = t6;
      _._supabase_client$_httpClient = t7;
      _.__SupabaseClient_rest_F = _.__SupabaseClient_realtime_F = _.__SupabaseClient_storage_F = _.__SupabaseClient_functions_F = _.__SupabaseClient_auth_F = $;
      _._changedAccessToken = null;
      _.__SupabaseClient__isolate_F = t8;
      _._incrementId = 0;
    },
    SupabaseClient__listenForAuthEvents_closure: function SupabaseClient__listenForAuthEvents_closure(t0) {
      this.$this = t0;
    },
    SupabaseClient__listenForAuthEvents_closure0: function SupabaseClient__listenForAuthEvents_closure0() {
    },
    SupabaseQueryBuilder: function SupabaseQueryBuilder() {
      var _ = this;
      _._body = null;
      _.__PostgrestBuilder__headers_F = $;
      _._postgrest_builder$_method = null;
      _.__PostgrestBuilder__isolate_F = _.__PostgrestBuilder__httpClient_F = _.__PostgrestBuilder__url_A = _.__PostgrestBuilder__schema_F = $;
      _._options = null;
    },
    main() {
      var t2, t3, t4, t5, t6, t7, t8, supabase, controller, wrapper,
        t1 = A._asStringQ(self.Deno.env.get("SUPABASE_URL"));
      t1.toString;
      t2 = A._asStringQ(self.Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"));
      t2.toString;
      t3 = new A.EdgeHttpClient(new A.HttpClient(A.LinkedHashSet_LinkedHashSet$_empty(type$.HttpClientRequest_2)));
      t4 = A.stringReplaceAllUnchecked(t1 + "/realtime/v1", "http", "ws");
      t5 = t1 + "/auth/v1";
      t6 = A.RegExp_RegExp("(supabase\\.co)|(supabase\\.in)");
      if (t6._nativeRegExp.test(t1)) {
        t6 = t1.split(".");
        if (0 >= t6.length)
          return A.ioore(t6, 0);
        t6 = A.S(t6[0]);
        t7 = t1.split(".");
        if (1 >= t7.length)
          return A.ioore(t7, 1);
        t7 = A.S(t7[1]);
        t8 = t1.split(".");
        if (2 >= t8.length)
          return A.ioore(t8, 2);
        t8 = t6 + ".functions." + t7 + "." + A.S(t8[2]);
        t6 = t8;
      } else
        t6 = t1 + "/functions/v1";
      supabase = new A.SupabaseClient(t2, "public", t1 + "/rest/v1", t4, t5, t1 + "/storage/v1", t6, t3, new A.EdgeIsolate());
      type$.Map_String_String._as(B.Map_taoYl);
      t1 = type$.String;
      t6 = A.LinkedHashMap_LinkedHashMap$of(B.Map_taoYl, t1, t1);
      t6.$indexSet(0, "apikey", t2);
      t6.$indexSet(0, "Authorization", "Bearer " + t2);
      t7 = type$.AuthState;
      controller = new A._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_AuthState);
      wrapper = new A._Wrapper(B.C__Empty, type$._Wrapper_AuthState);
      t7 = A.DeferStream$(A.BehaviorSubject__deferStream(wrapper, controller, false, t7), true, t7);
      t7 = new A.GoTrueClient(t3, new A.BehaviorSubject(wrapper, controller, t7, type$.BehaviorSubject_AuthState));
      t8 = A.LinkedHashMap_LinkedHashMap$of(B.Map_tacWd, t1, t1);
      t8.addAll$1(0, t6);
      t3 = new A.GoTrueAdminApi(t5, t8, t3);
      t3.__GoTrueAdminApi__fetch_FI = new A.GotrueFetch();
      t3.__GoTrueAdminApi_mfa_F = new A.GoTrueAdminMFAApi();
      t7.__GoTrueClient_admin_F = t3;
      t7.__GoTrueClient__fetch_FI = new A.GotrueFetch();
      t7.__GoTrueClient_mfa_F = new A.GoTrueMFAApi();
      supabase.__SupabaseClient_auth_F = t7;
      t3 = supabase._getAuthHeaders$0();
      t5 = A.LinkedHashMap_LinkedHashMap$of(B.Map_talMQ, t1, t1);
      t5.addAll$1(0, t3);
      supabase.__SupabaseClient_rest_F !== $ && A.throwLateFieldAI("rest");
      supabase.__SupabaseClient_rest_F = new A.PostgrestClient(t5);
      t3 = supabase._getAuthHeaders$0();
      t5 = A.LinkedHashMap_LinkedHashMap$of(B.Map_pGssD, t1, t1);
      t5.addAll$1(0, t3);
      supabase.__SupabaseClient_functions_F !== $ && A.throwLateFieldAI("functions");
      supabase.__SupabaseClient_functions_F = new A.FunctionsClient(t5);
      t3 = supabase._getAuthHeaders$0();
      t5 = A.LinkedHashMap_LinkedHashMap$of(B.Map_tapFb, t1, t1);
      t5.addAll$1(0, t3);
      supabase.__SupabaseClient_storage_F !== $ && A.throwLateFieldAI("storage");
      supabase.__SupabaseClient_storage_F = new A.SupabaseStorageClient(t5);
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.dynamic);
      t1.$indexSet(0, "apikey", t2);
      t1 = A.RealtimeClient$(t4, B.Map_taoYl, t1);
      supabase.__SupabaseClient_realtime_F !== $ && A.throwLateFieldAI("realtime");
      supabase.__SupabaseClient_realtime_F = t1;
      supabase._listenForAuthEvents$0();
      A.SupabaseFunctions$(new A.main_closure(supabase));
    },
    main_closure: function main_closure(t0) {
      this.supabase = t0;
    },
    main__closure: function main__closure() {
    },
    EdgeIsolate: function EdgeIsolate() {
    },
    SupabaseFunctions$(fetch) {
      var t1 = new A.SupabaseFunctions(fetch);
      t1.SupabaseFunctions$1$fetch(fetch);
      return t1;
    },
    SupabaseFunctions: function SupabaseFunctions(t0) {
      this.fetch = t0;
    },
    SupabaseFunctions_closure: function SupabaseFunctions_closure(t0) {
      this.$this = t0;
    },
    SupabaseFunctions__closure: function SupabaseFunctions__closure(t0, t1) {
      this.$this = t0;
      this.request = t1;
    },
    TypedDataBuffer: function TypedDataBuffer() {
    },
    _IntBuffer: function _IntBuffer() {
    },
    Uint8Buffer: function Uint8Buffer(t0, t1) {
      this._typed_buffer$_buffer = t0;
      this._typed_buffer$_length = t1;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    max(a, b, $T) {
      A.checkTypeBound($T, type$.num, "T", "max");
      return Math.max($T._as(a), $T._as(b));
    },
    groupBy(values, key, $S, $T) {
      var t1, _i, element, t2, t3,
        map = A.LinkedHashMap_LinkedHashMap$_empty($T, $S._eval$1("List<0>"));
      for (t1 = $S._eval$1("JSArray<0>"), _i = 0; _i < 1; ++_i) {
        element = values[_i];
        t2 = key.call$1(element);
        t3 = map.$index(0, t2);
        if (t3 == null) {
          t3 = A._setArrayType([], t1);
          map.$indexSet(0, t2, t3);
          t2 = t3;
        } else
          t2 = t3;
        J.add$1$ax(t2, element);
      }
      return map;
    },
    fetch(resource, body, headers, method, signal) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response_2),
        $async$returnValue, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t1, t2, t3, t4, t5, $async$temp1;
      var $async$fetch = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.requestFromResource(resource);
              t2 = headers._headers$_delegate;
              t3 = signal._abort$_delegate;
              t4 = body == null ? window.undefined : body;
              t5 = window.undefined;
              A._asStringQ(t5);
              t6 = window.undefined;
              A._asStringQ(t6);
              t7 = window.undefined;
              A._asStringQ(t7);
              t8 = window.undefined;
              A._asStringQ(t8);
              t9 = window.undefined;
              A._asStringQ(t9);
              t10 = window.undefined;
              A._asStringQ(t10);
              t11 = window.undefined;
              A._asStringQ(t11);
              t12 = window.undefined;
              A._asBoolQ(t12);
              type$.nullable_JavaScriptObject._as(t3);
              t13 = window.undefined;
              A._asStringQ(t13);
              t14 = window.undefined;
              t15 = type$.JavaScriptObject;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(self.fetch(t1, t15._as({method: method, headers: t2, body: t4, referrer: t5, referrerPolicy: t6, mode: t7, credentials: t8, cache: t9, redirect: t10, integrity: t11, keepalive: t12, signal: t3, duplex: t13, window: t14})), t15), $async$fetch);
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.Response($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$fetch, $async$completer);
    },
    TwitterApi_postTweet(apiKey, apiSecretKey, body, oauthToken, oauthTokenSecret) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.TwitterApiResponse),
        $async$returnValue, t1, params;
      var $async$TwitterApi_postTweet = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = Date.now();
              params = A.LinkedHashMap_LinkedHashMap$_literal(["oauth_consumer_key", apiKey, "oauth_token", oauthToken, "oauth_signature_method", "HMAC-SHA1", "oauth_timestamp", B.JSInt_methods.toString$0(B.JSNumber_methods.floor$0(t1 / 1000)), "oauth_nonce", B.JSInt_methods.toString$0(t1), "oauth_version", "1.0"], type$.String, type$.nullable_String);
              $async$goto = 3;
              return A._asyncAwait(A.httpPost("https://api.twitter.com/2/tweets", params, type$.Map_String_dynamic._as(body), apiKey, apiSecretKey, oauthTokenSecret), $async$TwitterApi_postTweet);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$TwitterApi_postTweet, $async$completer);
    },
    encodingForCharset(charset) {
      var t1;
      if (charset == null)
        return B.C_Latin1Codec;
      t1 = A.Encoding_getByName(charset);
      return t1 == null ? B.C_Latin1Codec : t1;
    },
    toUint8List(input) {
      if (type$.Uint8List._is(input))
        return input;
      if (type$.TypedData._is(input))
        return A.NativeUint8List_NativeUint8List$view(input.buffer, 0, null);
      return new Uint8Array(A._ensureNativeList(input));
    },
    toByteStream(stream) {
      return new A.ByteStream(stream);
    },
    wrapFormatException($name, value, body, $T) {
      var error, error0, t1, exception;
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.SourceSpanFormatException) {
          error = t1;
          throw A.wrapException(A.SourceSpanFormatException$("Invalid " + $name + ": " + error._span_exception$_message, error._span, error.get$source()));
        } else if (type$.FormatException._is(t1)) {
          error0 = t1;
          throw A.wrapException(A.FormatException$("Invalid " + $name + ' "' + value + '": ' + error0.get$message(), error0.get$source(), error0.get$offset()));
        } else
          throw exception;
      }
    },
    current() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = A.Uri_base();
      } catch (exception) {
        if (type$.Exception._is(A.unwrapException(exception))) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase)) {
        t1 = $._current;
        t1.toString;
        return t1;
      }
      $._currentUriBase = uri;
      if ($.$get$Style_platform() == $.$get$Style_url())
        t1 = $._current = uri.resolve$1(".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        t1 = $._current = lastIndex === 0 ? path : B.JSString_methods.substring$2(path, 0, lastIndex);
      }
      return t1;
    },
    isAlphabetic(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    isDriveLetter(path, index) {
      var t1 = path.length,
        t2 = index + 2;
      if (t1 < t2)
        return false;
      if (!A.isAlphabetic(B.JSString_methods.codeUnitAt$1(path, index)))
        return false;
      if (B.JSString_methods.codeUnitAt$1(path, index + 1) !== 58)
        return false;
      if (t1 === t2)
        return true;
      return B.JSString_methods.codeUnitAt$1(path, t2) === 47;
    },
    createWebSocketClient(url, headers) {
      type$.Map_String_String._as(headers);
      throw A.wrapException(A.UnimplementedError$("Websocket Client not implemented for this platform"));
    },
    waitTwoFutures(f1, f2) {
      var t1;
      if (f1 == null)
        t1 = f2;
      else
        t1 = f1;
      return t1;
    },
    isAllTheSame(iter) {
      var firstValue, t1, t2, value;
      if (iter.get$length(iter) === 0)
        return true;
      firstValue = iter.get$first(iter);
      for (t1 = A.SubListIterable$(iter, 1, null, iter.$ti._eval$1("ListIterable.E")), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        value = t1.__internal$_current;
        if (!J.$eq$(value == null ? t2._as(value) : value, firstValue))
          return false;
      }
      return true;
    },
    replaceFirstNull(list, element, $E) {
      var index = B.JSArray_methods.indexOf$1(list, null);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no null elements.", null));
      B.JSArray_methods.$indexSet(list, index, element);
    },
    replaceWithNull(list, element, $E) {
      var index = B.JSArray_methods.indexOf$1(list, element);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no elements matching " + element.toString$0(0) + ".", null));
      B.JSArray_methods.$indexSet(list, index, null);
    },
    countCodeUnits(string, codeUnit) {
      var t1, t2, count, t3;
      for (t1 = new A.CodeUnits(string), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListMixin.E>")), t2 = t2._eval$1("ListMixin.E"), count = 0; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if ((t3 == null ? t2._as(t3) : t3) === codeUnit)
          ++count;
      }
      return count;
    },
    findLineStart(context, text, column) {
      var beginningOfLine, index, lineStart;
      if (text.length === 0)
        for (beginningOfLine = 0; true;) {
          index = B.JSString_methods.indexOf$2(context, "\n", beginningOfLine);
          if (index === -1)
            return context.length - beginningOfLine >= column ? beginningOfLine : null;
          if (index - beginningOfLine >= column)
            return beginningOfLine;
          beginningOfLine = index + 1;
        }
      index = B.JSString_methods.indexOf$1(context, text);
      for (; index !== -1;) {
        lineStart = index === 0 ? 0 : B.JSString_methods.lastIndexOf$2(context, "\n", index - 1) + 1;
        if (column === index - lineStart)
          return lineStart;
        index = B.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return null;
    }
  },
  J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$z(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$length$asx(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    cast$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    codeUnitAt$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    indexOf$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    noSuchMethod$1$(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    then$1$1$z(receiver, a0, $T1) {
      return J.getInterceptor$z(receiver).then$1$1(receiver, a0, $T1);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toRadixString$1$n(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1(receiver, invocation) {
      type$.Invocation._as(invocation);
      throw A.wrapException(new A.NoSuchMethodError(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    },
    $isPromise: 1
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + A.S(J.toString$0$(dartClosure));
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      var t1;
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insert"));
      t1 = receiver.length;
      if (index > t1)
        throw A.wrapException(A.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2(receiver, index, iterable) {
      var insertionLength, end;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insertAll"));
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      receiver.length = receiver.length + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    removeLast$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    _removeWhere$2(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!A.boolConversionCheck(test.call$1(element)))
          retained.push(element);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    clear$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("clear"));
      receiver.length = 0;
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("setRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    every$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!A.boolConversionCheck(test.call$1(receiver[i])))
          return false;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    sort$1(receiver, compare) {
      var t2,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("sort"));
      t2 = compare == null ? J._interceptors_JSArray__compareAny$closure() : compare;
      A.Sort_sort(receiver, t2, t1._precomputed1);
    },
    sort$0($receiver) {
      return this.sort$1($receiver, null);
    },
    indexOf$1(receiver, element) {
      var i,
        $length = receiver.length;
      if (0 >= $length)
        return -1;
      for (i = 0; i < $length; ++i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (J.$eq$(receiver[i], element))
          return i;
      }
      return -1;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable(receiver, growable) {
      var t1 = A._setArrayType(receiver.slice(0), A._arrayInstanceType(receiver));
      return t1;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("set length"));
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asInt(index);
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    indexWhere$1(receiver, test) {
      var i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      if (0 >= receiver.length)
        return -1;
      for (i = 0; i < receiver.length; ++i)
        if (A.boolConversionCheck(test.call$1(receiver[i])))
          return i;
      return -1;
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw A.wrapException(A.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    toRadixString$1(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (B.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSNumNotInt.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      if (index < 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        A.throwExpression(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1(receiver, index) {
      if (index >= receiver.length)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1, i, _null = null;
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return _null;
      for (i = 0; i < t1; ++i)
        if (this.codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return _null;
      return new A.StringMatch(start, receiver);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = A.RangeError_checkValidRange(start, end, receiver.length);
      return A.stringReplaceRangeUnchecked(receiver, start, e, replacement);
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1($receiver, start) {
      return this.substring$2($receiver, start, null);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padRight$1(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$1(receiver, other) {
      return A.stringContainsUnchecked(receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A.CastStream.prototype = {
    get$isBroadcast() {
      return this._source.get$isBroadcast();
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      t2 = this._source.listen$3$cancelOnError$onDone(null, cancelOnError, type$.nullable_void_Function._as(onDone));
      t1 = new A.CastStreamSubscription(t2, $.Zone__current, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("CastStreamSubscription<1,2>"));
      t2.onData$1(t1.get$__internal$_onData());
      t1.onData$1(onData);
      t1.onError$1(onError);
      return t1;
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    cast$1$0(_, $R) {
      return new A.CastStream(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastStream<1,2>"));
    }
  };
  A.CastStreamSubscription.prototype = {
    cancel$0() {
      return this._source.cancel$0();
    },
    onData$1(handleData) {
      var t1 = this.$ti;
      t1._eval$1("~(2)?")._as(handleData);
      this.set$_handleData(handleData == null ? null : type$.$env_1_1_dynamic._bind$1(t1._rest[1])._eval$1("1(2)")._as(handleData));
    },
    onError$1(handleError) {
      var _this = this;
      _this._source.onError$1(handleError);
      if (handleError == null)
        _this._handleError = null;
      else if (type$.void_Function_Object_StackTrace._is(handleError))
        _this._handleError = _this.__internal$_zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      else if (type$.void_Function_Object._is(handleError))
        _this._handleError = type$.dynamic_Function_Object._as(handleError);
      else
        throw A.wrapException(A.ArgumentError$(string$.handle, null));
    },
    __internal$_onData$1(data) {
      var targetData, error, stack, handleError, t2, exception, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(data);
      t2 = _this._handleData;
      if (t2 == null)
        return;
      targetData = null;
      try {
        targetData = t1._rest[1]._as(data);
      } catch (exception) {
        error = A.unwrapException(exception);
        stack = A.getTraceFromException(exception);
        handleError = _this._handleError;
        if (handleError == null)
          A._rootHandleError(type$.Object._as(error), type$.StackTrace._as(stack));
        else {
          t1 = type$.Object;
          t2 = _this.__internal$_zone;
          if (type$.void_Function_Object_StackTrace._is(handleError))
            t2.runBinaryGuarded$2$3(handleError, error, stack, t1, type$.StackTrace);
          else
            t2.runUnaryGuarded$1$2(type$.void_Function_Object._as(handleError), error, t1);
        }
        return;
      }
      _this.__internal$_zone.runUnaryGuarded$1$2(t2, targetData, t1._rest[1]);
    },
    pause$1(resumeSignal) {
      this._source.pause$1(resumeSignal);
    },
    pause$0() {
      return this.pause$1(null);
    },
    resume$0() {
      this._source.resume$0();
    },
    set$_handleData(_handleData) {
      this._handleData = this.$ti._eval$1("~(2)?")._as(_handleData);
    },
    $isStreamSubscription: 1
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return new A.CastIterator(J.get$iterator$ax(this.get$_source()), t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("CastIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first(_) {
      return A._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current() {
      return this.$ti._rest[1]._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.CastIterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this._source, A._instanceType(this)._precomputed1, $R);
    },
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, A._asInt(index)));
    },
    $indexSet(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, A._asInt(index), t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    set$length(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1(_, value) {
      var t1 = this.$ti;
      J.add$1$ax(this._source, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    sort$1(_, compare) {
      var t1;
      this.$ti._eval$1("int(2,2)?")._as(compare);
      t1 = compare == null ? null : new A._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A._CastListBase_sort_closure.prototype = {
    call$2(v1, v2) {
      var t1 = this.$this.$ti,
        t2 = t1._precomputed1;
      t2._as(v1);
      t2._as(v2);
      t1 = t1._rest[1];
      return this.compare.call$2(t1._as(v1), t1._as(v2));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  A.CastList.prototype = {
    cast$1$0(_, $R) {
      return new A.CastList(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    get$_source() {
      return this._source;
    }
  };
  A.CastSet.prototype = {
    cast$1$0(_, $R) {
      return new A.CastSet(this._source, this._emptySet, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastSet<1,2>"));
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1,
    get$_source() {
      return this._source;
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this.__internal$_string.length;
    },
    $index(_, i) {
      return B.JSString_methods.codeUnitAt$1(this.__internal$_string, A._asInt(i));
    }
  };
  A.nullFuture_closure.prototype = {
    call$0() {
      return A.Future_Future$value(null, type$.Null);
    },
    $signature: 50
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return new A.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    reduce$1(_, combine) {
      var $length, value, i, _this = this;
      A._instanceType(_this)._eval$1("ListIterable.E(ListIterable.E,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      if ($length === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      value = _this.elementAt$1(0, 0);
      for (i = 1; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return value;
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, true, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  A.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this._start;
      A.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        A.RangeError_checkNotNegative(endOrLength, "end");
        if (t1 > endOrLength)
          throw A.wrapException(A.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(_this), _this, null, "index"));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this._start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    }
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1(_, toElement, $T) {
      var t1 = this.$ti;
      return new A.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(toElement), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (A.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    }
  };
  A.ExpandIterable.prototype = {
    get$iterator(_) {
      var t1 = this.$ti;
      return new A.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, B.C_EmptyIterator, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("ExpandIterator<1,2>"));
    }
  };
  A.ExpandIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = _this._f; !_this._currentExpansion.moveNext$0();) {
        _this.set$__internal$_current(null);
        if (t1.moveNext$0()) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t2.call$1(t1.get$current())));
        } else
          return false;
      }
      _this.set$__internal$_current(_this._currentExpansion.get$current());
      return true;
    },
    set$_currentExpansion(_currentExpansion) {
      this._currentExpansion = this.$ti._eval$1("Iterator<2>?")._as(_currentExpansion);
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, A._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    }
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(index, 0, 0, "index", null));
    },
    map$1$1(_, toElement, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(toElement);
      return new A.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable(_, growable) {
      var t1 = J.JSArray_JSArray$fixed(0, this.$ti._precomputed1);
      return t1;
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1(receiver, value) {
      A.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  };
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._asInt(index);
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1(_, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1(_, compare) {
      A._instanceType(this)._eval$1("int(UnmodifiableListMixin.E,UnmodifiableListMixin.E)?")._as(compare);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * J.get$hashCode$(this._name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + A.S(this._name) + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Symbol && this._name == other._name;
    },
    $isSymbol0: 1
  };
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $indexSet(_, key, val) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(val);
      A.ConstantMap__throwUnmodifiable();
    },
    $isMap: 1
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._jsObject[A._asString(key)];
    },
    forEach$1(_, f) {
      var keys, t2, t3, i, t4,
        t1 = this.$ti;
      t1._eval$1("~(1,2)")._as(f);
      keys = this._keys;
      for (t2 = keys.length, t3 = this._jsObject, t1 = t1._rest[1], i = 0; i < t2; ++i) {
        t4 = A._asString(keys[i]);
        f.call$2(t4, t1._as(t3[t4]));
      }
    },
    get$keys(_) {
      return new A._ConstantMapKeyIterable(this, this.$ti._eval$1("_ConstantMapKeyIterable<1>"));
    }
  };
  A._ConstantMapKeyIterable.prototype = {
    get$iterator(_) {
      var t1 = this.__js_helper$_map._keys;
      return new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    get$length(_) {
      return this.__js_helper$_map._keys.length;
    }
  };
  A.Instantiation.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Instantiation && this._genericClosure.$eq(0, other._genericClosure) && A.getRuntimeType(this) === A.getRuntimeType(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this._genericClosure, A.getRuntimeType(this), B.C_SentinelValue);
    },
    toString$0(_) {
      var t1 = B.JSArray_methods.join$1([A.createRuntimeType(this.$ti._precomputed1)], ", ");
      return this._genericClosure.toString$0(0) + " with " + ("<" + t1 + ">");
    }
  };
  A.Instantiation1.prototype = {
    call$2(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    call$1(a0) {
      return this._genericClosure.call$1$1(a0, this.$ti._rest[0]);
    },
    call$0() {
      return this._genericClosure.call$1$0(this.$ti._rest[0]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this._memberName;
      return t1;
    },
    get$positionalArguments() {
      var t1, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return B.List_empty;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return B.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (!(index < t1.length))
          return A.ioore(t1, index);
        list.push(t1[index]);
      }
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return B.Map_empty;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return B.Map_empty;
      map = new A.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (!(t4 >= 0 && t4 < t2.length))
          return A.ioore(t2, t4);
        map.$indexSet(0, new A.Symbol(t3), t2[t4]);
      }
      return new A.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
    $isInvocation: 1
  };
  A.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2($name, argument) {
      var t1;
      A._asString($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + $name;
      B.JSArray_methods.add$1(this.namedArgumentList, $name);
      B.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 9
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + this.__js_helper$_message;
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + A.Error_safeToString(this.message);
    }
  };
  A._Required.prototype = {};
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_length === 0;
    },
    get$keys(_) {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(this, t1._eval$1("LinkedHashMapKeyIterable<1>")), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var t2, value, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._rest[1]._as(t2) : t2;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell.__js_helper$_next;
      }
    },
    __js_helper$_addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell.__js_helper$_previous = t1;
        _this._last = t1.__js_helper$_next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 0x3fffffff;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this.__js_helper$_map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    },
    contains$1(_, element) {
      return this.__js_helper$_map.containsKey$1(element);
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this.__js_helper$_map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell.__js_helper$_next;
        return true;
      }
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 6
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 42
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 43
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern + "|()", t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    allMatches$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._AllMatchesIterable(this, string, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    _execAnchored$2(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      if (0 >= match.length)
        return A.ioore(match, -1);
      if (match.pop() != null)
        return null;
      return new A._MatchImplementation(match);
    },
    matchAsPrefix$2(_, string, start) {
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$end() {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this._match;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._AllMatchesIterator(this._re, this._string, this.__js_helper$_start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, _this = this,
        string = _this._string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t3 = t1 + 1;
              if (t3 < t2) {
                t1 = B.JSString_methods.codeUnitAt$1(string, t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  t1 = B.JSString_methods.codeUnitAt$1(string, t3);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {
    get$end() {
      return this.start + this.pattern.length;
    },
    $index(_, g) {
      A._asInt(g);
      if (g !== 0)
        A.throwExpression(A.RangeError$value(g, null));
      return this.pattern;
    },
    $isMatch: 1
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new A.StringMatch(index, t1);
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  A._Cell.prototype = {
    readLocal$1$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        A.throwExpression(new A.LateError("Local '" + this.__late_helper$_name + "' has not been initialized."));
      return t1;
    },
    readLocal$0() {
      return this.readLocal$1$0(type$.dynamic);
    },
    _readLocal$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(new A.LateError("Local '" + this.__late_helper$_name + "' has not been initialized."));
      return t1;
    },
    set$finalLocalValue(v) {
      var _this = this;
      if (_this.__late_helper$_value !== _this)
        throw A.wrapException(new A.LateError("Local '" + _this.__late_helper$_name + "' has already been initialized."));
      _this.__late_helper$_value = v;
    }
  };
  A._InitializedCell.prototype = {
    _readFinal$0() {
      var result, _this = this,
        t1 = _this.__late_helper$_value;
      if (t1 === _this) {
        result = _this._initializer.call$0();
        if (_this.__late_helper$_value !== _this)
          throw A.wrapException(new A.LateError("Local '" + _this.__late_helper$_name + string$.x27_has_));
        _this.__late_helper$_value = result;
        t1 = result;
      }
      return t1;
    }
  };
  A.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isTypedData: 1
  };
  A.NativeByteData.prototype = {
    _getUint32$2(receiver, byteOffset, littleEndian) {
      return receiver.getUint32(byteOffset, littleEndian);
    },
    _setUint32$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setUint32(byteOffset, value, littleEndian);
    }
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw A.wrapException(A.ArgumentError$(skipCount, null));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asInt(index);
      A._asDouble(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(index);
      A._asInt(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeInt16List.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeInt32List.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeInt8List.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint16List.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint32List.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isUint32List: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  A.NativeUint8List.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    },
    $isType: 1
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 10
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 37
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 1
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 1
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setInterval(A.convertDartClosureToJS(new A._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("Periodic timer."));
    },
    cancel$0() {
      if (self.setTimeout != null) {
        var t1 = this._handle;
        if (t1 == null)
          return;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw A.wrapException(A.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._handle = null;
      t1._tick = 1;
      this.callback.call$0();
    },
    $signature: 0
  };
  A._TimerImpl$periodic_closure.prototype = {
    call$0() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = B.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    $signature: 1
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(t1._precomputed1._as(value));
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    $isCompleter: 1
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 2
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 51
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 81
  };
  A._asyncStarHelper_closure.prototype = {
    call$0() {
      var t3,
        t1 = this.controller,
        t2 = t1.___AsyncStarStreamController_controller_A;
      t2 === $ && A.throwLateFieldNI("controller");
      t3 = t2._state;
      if ((t3 & 1) !== 0 ? (t2.get$_subscription()._state & 4) !== 0 : (t3 & 2) === 0) {
        t1.isSuspended = true;
        return;
      }
      this.bodyFunction.call$2(0, null);
    },
    $signature: 0
  };
  A._asyncStarHelper_closure0.prototype = {
    call$1(_) {
      var errorCode = this.controller.cancelationFuture != null ? 2 : 0;
      this.bodyFunction.call$2(errorCode, null);
    },
    $signature: 10
  };
  A._AsyncStarStreamController.prototype = {
    _AsyncStarStreamController$1(body, $T) {
      var _this = this,
        t1 = new A._AsyncStarStreamController__resumeBody(body);
      _this.set$___AsyncStarStreamController_controller_A(_this.$ti._eval$1("StreamController<1>")._as(A.StreamController_StreamController(new A._AsyncStarStreamController_closure(_this, body), new A._AsyncStarStreamController_closure0(t1), new A._AsyncStarStreamController_closure1(_this, t1), false, $T)));
    },
    set$___AsyncStarStreamController_controller_A(___AsyncStarStreamController_controller_A) {
      this.___AsyncStarStreamController_controller_A = this.$ti._eval$1("StreamController<1>")._as(___AsyncStarStreamController_controller_A);
    }
  };
  A._AsyncStarStreamController__resumeBody.prototype = {
    call$0() {
      A.scheduleMicrotask(new A._AsyncStarStreamController__resumeBody_closure(this.body));
    },
    $signature: 1
  };
  A._AsyncStarStreamController__resumeBody_closure.prototype = {
    call$0() {
      this.body.call$2(0, null);
    },
    $signature: 0
  };
  A._AsyncStarStreamController_closure0.prototype = {
    call$0() {
      this._resumeBody.call$0();
    },
    $signature: 0
  };
  A._AsyncStarStreamController_closure1.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1.isSuspended) {
        t1.isSuspended = false;
        this._resumeBody.call$0();
      }
    },
    $signature: 0
  };
  A._AsyncStarStreamController_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.___AsyncStarStreamController_controller_A;
      t2 === $ && A.throwLateFieldNI("controller");
      if ((t2._state & 4) === 0) {
        t1.cancelationFuture = new A._Future($.Zone__current, type$._Future_dynamic);
        if (t1.isSuspended) {
          t1.isSuspended = false;
          A.scheduleMicrotask(new A._AsyncStarStreamController__closure(this.body));
        }
        return t1.cancelationFuture;
      }
    },
    $signature: 31
  };
  A._AsyncStarStreamController__closure.prototype = {
    call$0() {
      this.body.call$2(2, null);
    },
    $signature: 0
  };
  A._IterationMarker.prototype = {
    toString$0(_) {
      return "IterationMarker(" + this.state + ", " + A.S(this.value) + ")";
    }
  };
  A._SyncStarIterator.prototype = {
    get$current() {
      var t1,
        nested = this._nestedIterator;
      if (nested == null) {
        t1 = this._async$_current;
        return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
      }
      return nested.get$current();
    },
    moveNext$0() {
      var t1, t2, value, state, suspendedBodies, inner, _this = this;
      for (t1 = _this.$ti._eval$1("Iterator<1>"); true;) {
        t2 = _this._nestedIterator;
        if (t2 != null)
          if (t2.moveNext$0())
            return true;
          else
            _this.set$_nestedIterator(null);
        value = function(body, SUCCESS, ERROR) {
          var errorValue,
            errorCode = SUCCESS;
          while (true)
            try {
              return body(errorCode, errorValue);
            } catch (error) {
              errorValue = error;
              errorCode = ERROR;
            }
        }(_this._async$_body, 0, 1);
        if (value instanceof A._IterationMarker) {
          state = value.state;
          if (state === 2) {
            suspendedBodies = _this._suspendedBodies;
            if (suspendedBodies == null || suspendedBodies.length === 0) {
              _this.set$_async$_current(null);
              return false;
            }
            if (0 >= suspendedBodies.length)
              return A.ioore(suspendedBodies, -1);
            _this._async$_body = suspendedBodies.pop();
            continue;
          } else {
            t2 = value.value;
            if (state === 3)
              throw t2;
            else {
              inner = t1._as(J.get$iterator$ax(t2));
              if (inner instanceof A._SyncStarIterator) {
                t2 = _this._suspendedBodies;
                if (t2 == null)
                  t2 = _this._suspendedBodies = [];
                B.JSArray_methods.add$1(t2, _this._async$_body);
                _this._async$_body = inner._async$_body;
                continue;
              } else {
                _this.set$_nestedIterator(inner);
                continue;
              }
            }
          }
        } else {
          _this.set$_async$_current(value);
          return true;
        }
      }
      return false;
    },
    set$_async$_current(_current) {
      this._async$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_nestedIterator(_nestedIterator) {
      this._nestedIterator = this.$ti._eval$1("Iterator<1>?")._as(_nestedIterator);
    },
    $isIterator: 1
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._BroadcastStream.prototype = {
    get$isBroadcast() {
      return true;
    }
  };
  A._BroadcastSubscription.prototype = {
    _onPause$0() {
    },
    _onResume$0() {
    },
    set$_next(_next) {
      this._next = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_next);
    },
    set$_previous(_previous) {
      this._previous = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_previous);
    }
  };
  A._BroadcastStreamController.prototype = {
    set$onPause(onPauseHandler) {
      type$.nullable_void_Function._as(onPauseHandler);
      throw A.wrapException(A.UnsupportedError$(string$.Broadc));
    },
    set$onResume(onResumeHandler) {
      type$.nullable_void_Function._as(onResumeHandler);
      throw A.wrapException(A.UnsupportedError$(string$.Broadc));
    },
    get$stream() {
      return new A._BroadcastStream(this, A._instanceType(this)._eval$1("_BroadcastStream<1>"));
    },
    get$_mayAddEvent() {
      return this._state < 4;
    },
    _removeListener$1(subscription) {
      var previous, next;
      A._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(subscription);
      previous = subscription._previous;
      next = subscription._next;
      if (previous == null)
        this.set$_firstSubscription(next);
      else
        previous.set$_next(next);
      if (next == null)
        this.set$_lastSubscription(previous);
      else
        next.set$_previous(previous);
      subscription.set$_previous(subscription);
      subscription.set$_next(subscription);
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, subscription, oldLast, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 4) !== 0)
        return A._DoneStreamSubscription$(onDone, t1._precomputed1);
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = t1._eval$1("_BroadcastSubscription<1>");
      subscription = new A._BroadcastSubscription(_this, A._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._precomputed1), A._BufferingStreamSubscription__registerErrorHandler(t2, onError), A._BufferingStreamSubscription__registerDoneHandler(t2, onDone), t2, t3, t4);
      subscription.set$_previous(subscription);
      subscription.set$_next(subscription);
      t4._as(subscription);
      subscription._eventState = _this._state & 1;
      oldLast = _this._lastSubscription;
      _this.set$_lastSubscription(subscription);
      subscription.set$_next(null);
      subscription.set$_previous(oldLast);
      if (oldLast == null)
        _this.set$_firstSubscription(subscription);
      else
        oldLast.set$_next(subscription);
      if (_this._firstSubscription == _this._lastSubscription)
        A._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1(sub) {
      var _this = this,
        t1 = A._instanceType(_this);
      sub = t1._eval$1("_BroadcastSubscription<1>")._as(t1._eval$1("StreamSubscription<1>")._as(sub));
      if (sub._next === sub)
        return null;
      t1 = sub._eventState;
      if ((t1 & 2) !== 0)
        sub._eventState = t1 | 4;
      else {
        _this._removeListener$1(sub);
        if ((_this._state & 2) === 0 && _this._firstSubscription == null)
          _this._callOnCancel$0();
      }
      return null;
    },
    _recordPause$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _recordResume$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _addEventError$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add new events after calling close");
      return new A.StateError("Cannot add new events while doing an addStream");
    },
    add$1(_, data) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(data);
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    addError$2(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      if (!this.get$_mayAddEvent())
        throw A.wrapException(this._addEventError$0());
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._sendError$2(error, stackTrace);
    },
    close$0() {
      var t1, doneFuture, _this = this;
      if ((_this._state & 4) !== 0) {
        t1 = _this._doneFuture;
        t1.toString;
        return t1;
      }
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._state |= 4;
      doneFuture = _this._doneFuture;
      if (doneFuture == null)
        doneFuture = _this._doneFuture = new A._Future($.Zone__current, type$._Future_void);
      _this._sendDone$0();
      return doneFuture;
    },
    _forEachListener$1(action) {
      var t1, subscription, id, next, _this = this;
      A._instanceType(_this)._eval$1("~(_BufferingStreamSubscription<1>)")._as(action);
      t1 = _this._state;
      if ((t1 & 2) !== 0)
        throw A.wrapException(A.StateError$(string$.Cannotf));
      subscription = _this._firstSubscription;
      if (subscription == null)
        return;
      id = t1 & 1;
      _this._state = t1 ^ 3;
      for (; subscription != null;) {
        t1 = subscription._eventState;
        if ((t1 & 1) === id) {
          subscription._eventState = t1 | 2;
          action.call$1(subscription);
          t1 = subscription._eventState ^= 1;
          next = subscription._next;
          if ((t1 & 4) !== 0)
            _this._removeListener$1(subscription);
          subscription._eventState &= 4294967293;
          subscription = next;
        } else
          subscription = subscription._next;
      }
      _this._state &= 4294967293;
      if (_this._firstSubscription == null)
        _this._callOnCancel$0();
    },
    _callOnCancel$0() {
      if ((this._state & 4) !== 0) {
        var doneFuture = this._doneFuture;
        if ((doneFuture._state & 30) === 0)
          doneFuture._asyncComplete$1(null);
      }
      A._runGuarded(this.onCancel);
    },
    set$onListen(onListen) {
      this.onListen = type$.nullable_void_Function._as(onListen);
    },
    set$onCancel(onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    set$_firstSubscription(_firstSubscription) {
      this._firstSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_firstSubscription);
    },
    set$_lastSubscription(_lastSubscription) {
      this._lastSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_lastSubscription);
    },
    $isEventSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._SyncBroadcastStreamController.prototype = {
    get$_mayAddEvent() {
      return A._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
    },
    _addEventError$0() {
      if ((this._state & 2) !== 0)
        return new A.StateError(string$.Cannotf);
      return this.super$_BroadcastStreamController$_addEventError();
    },
    _sendData$1(data) {
      var t1, _this = this;
      _this.$ti._precomputed1._as(data);
      t1 = _this._firstSubscription;
      if (t1 == null)
        return;
      if (t1 === _this._lastSubscription) {
        _this._state |= 2;
        t1._add$1(data);
        _this._state &= 4294967293;
        if (_this._firstSubscription == null)
          _this._callOnCancel$0();
        return;
      }
      _this._forEachListener$1(new A._SyncBroadcastStreamController__sendData_closure(_this, data));
    },
    _sendError$2(error, stackTrace) {
      if (this._firstSubscription == null)
        return;
      this._forEachListener$1(new A._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    },
    _sendDone$0() {
      var _this = this;
      if (_this._firstSubscription != null)
        _this._forEachListener$1(new A._SyncBroadcastStreamController__sendDone_closure(_this));
      else
        _this._doneFuture._asyncComplete$1(null);
    }
  };
  A._SyncBroadcastStreamController__sendData_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._add$1(this.data);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._SyncBroadcastStreamController__sendError_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._addError$2(this.error, this.stackTrace);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._SyncBroadcastStreamController__sendDone_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._close$0();
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._AsyncBroadcastStreamController.prototype = {
    _sendData$1(data) {
      var subscription,
        t1 = this.$ti;
      t1._precomputed1._as(data);
      for (subscription = this._firstSubscription, t1 = t1._eval$1("_DelayedData<1>"); subscription != null; subscription = subscription._next)
        subscription._addPending$1(new A._DelayedData(data, t1));
    },
    _sendError$2(error, stackTrace) {
      var subscription;
      for (subscription = this._firstSubscription; subscription != null; subscription = subscription._next)
        subscription._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      var subscription = this._firstSubscription;
      if (subscription != null)
        for (; subscription != null; subscription = subscription._next)
          subscription._addPending$1(B.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  };
  A.Future_Future_closure.prototype = {
    call$0() {
      var e, s, exception;
      try {
        this.result._complete$1(this.computation.call$0());
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._completeWithErrorCallback(this.result, e, s);
      }
    },
    $signature: 0
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", t1);
      t1 = this.future;
      if ((t1._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      t1._asyncCompleteError$2(error, stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$(string$.The_er, "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    then$1$2$onError(_, f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1($receiver, f, $R) {
      return this.then$1$2$onError($receiver, f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 3, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    whenComplete$1(action) {
      var t1, result;
      type$.dynamic_Function._as(action);
      t1 = this.$ti;
      result = new A._Future($.Zone__current, t1);
      this._addListener$1(new A._FutureListener(result, 8, action, null, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      _this._state ^= 2;
      try {
        source.then$1$2$onError(0, new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          A._Future__chainCoreFuture(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 8;
        _this._resultOrListeners = value;
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setErrorObject$1(A.AsyncError$(error, stackTrace));
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        if ((value._state & 16) !== 0) {
          _this._state ^= 2;
          A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__chainFuture_closure(_this, value)));
        } else
          A._Future__chainCoreFuture(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._state ^= 2;
      A._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new A._Future__asyncCompleteError_closure(this, error, stackTrace)));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 10
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 38
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  A._Future__chainFuture_closure.prototype = {
    call$0() {
      A._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = J.then$1$1$z(completeResult, new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 41
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    get$isBroadcast() {
      return false;
    },
    get$length(_) {
      var t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_length_closure(t1, this), true, new A.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    cast$1$0(_, $R) {
      return new A.CastStream(this, A._instanceType(this)._eval$1("@<Stream.T>")._bind$1($R)._eval$1("CastStream<1,2>"));
    },
    get$first(_) {
      var future = new A._Future($.Zone__current, A._instanceType(this)._eval$1("_Future<Stream.T>")),
        subscription = this.listen$4$cancelOnError$onDone$onError(null, true, new A.Stream_first_closure(future), future.get$_completeError());
      subscription.onData$1(new A.Stream_first_closure0(this, subscription, future));
      return future;
    }
  };
  A.Stream_length_closure.prototype = {
    call$1(_) {
      A._instanceType(this.$this)._eval$1("Stream.T")._as(_);
      ++this._box_0.count;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  A.Stream_first_closure.prototype = {
    call$0() {
      var e, s, t1, exception;
      try {
        t1 = A.IterableElementError_noElement();
        throw A.wrapException(t1);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._completeWithErrorCallback(this.future, e, s);
      }
    },
    $signature: 0
  };
  A.Stream_first_closure0.prototype = {
    call$1(value) {
      A._cancelAndValue(this.subscription, this.future, A._instanceType(this.$this)._eval$1("Stream.T")._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.StreamView.prototype = {
    get$isBroadcast() {
      return this._stream.get$isBroadcast();
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      return this._stream.listen$4$cancelOnError$onDone$onError(A._instanceType(this)._eval$1("~(StreamView.T)?")._as(onData), cancelOnError, type$.nullable_void_Function._as(onDone), onError);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A.StreamTransformerBase.prototype = {$isStreamTransformer: 1};
  A._StreamController.prototype = {
    get$stream() {
      return new A._ControllerStream(this, A._instanceType(this)._eval$1("_ControllerStream<1>"));
    },
    get$_pendingEvents() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return A._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = A._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).varData);
    },
    _ensurePendingEvents$0() {
      var events, t1, state, _this = this;
      if ((_this._state & 8) === 0) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<1>"));
        return A._instanceType(_this)._eval$1("_PendingEvents<1>")._as(events);
      }
      t1 = A._instanceType(_this);
      state = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      events = state.varData;
      if (events == null)
        events = state.varData = new A._PendingEvents(t1._eval$1("_PendingEvents<1>"));
      return t1._eval$1("_PendingEvents<1>")._as(events);
    },
    get$_subscription() {
      var varData = this._varData;
      if ((this._state & 8) !== 0)
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData).varData;
      return A._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add event after closing");
      return new A.StateError("Cannot add event while adding a stream");
    },
    addStream$2$cancelOnError(source, cancelOnError) {
      var t2, t3, t4, t5, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("Stream<1>")._as(source);
      t2 = _this._state;
      if (t2 >= 4)
        throw A.wrapException(_this._badEventState$0());
      if ((t2 & 2) !== 0) {
        t1 = new A._Future($.Zone__current, type$._Future_dynamic);
        t1._asyncComplete$1(null);
        return t1;
      }
      t2 = _this._varData;
      t3 = new A._Future($.Zone__current, type$._Future_dynamic);
      t4 = t1._eval$1("~(1)")._as(_this.get$_add());
      t4 = source.listen$4$cancelOnError$onDone$onError(t4, false, _this.get$_close(), _this.get$_addError());
      t5 = _this._state;
      if ((t5 & 1) !== 0 ? (_this.get$_subscription()._state & 4) !== 0 : (t5 & 2) === 0)
        t4.pause$0();
      _this._varData = new A._StreamControllerAddStreamState(t2, t3, t4, t1._eval$1("_StreamControllerAddStreamState<1>"));
      _this._state |= 8;
      return t3;
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new A._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    add$1(_, value) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(value);
      if (_this._state >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._add$1(value);
    },
    addError$2(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      if (this._state >= 4)
        throw A.wrapException(this._badEventState$0());
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._addError$2(error, stackTrace);
    },
    close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._closeUnchecked$0();
      return _this._ensureDoneFuture$0();
    },
    _closeUnchecked$0() {
      var t1 = this._state |= 4;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, B.C__DelayedDone);
    },
    _add$1(value) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(value);
      t2 = _this._state;
      if ((t2 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t2 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new A._DelayedData(value, t1._eval$1("_DelayedData<1>")));
    },
    _addError$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new A._DelayedError(error, stackTrace));
    },
    _close$0() {
      var _this = this,
        addState = A._instanceType(_this)._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      _this._varData = addState.varData;
      _this._state &= 4294967287;
      addState.addStreamFuture._asyncComplete$1(null);
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var subscription, pendingEvents, t2, addState, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 3) !== 0)
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      subscription = A._ControllerSubscription$(_this, onData, onError, onDone, cancelOnError, t1._precomputed1);
      pendingEvents = _this.get$_pendingEvents();
      t2 = _this._state |= 1;
      if ((t2 & 8) !== 0) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState.varData = subscription;
        addState.addSubscription.resume$0();
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new A._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if ((_this._state & 8) !== 0)
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0();
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (type$.Future_void._is(cancelResult))
              result = cancelResult;
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            result0 = new A._Future($.Zone__current, type$._Future_void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new A._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.pause$0();
      A._runGuarded(_this.onPause);
    },
    _recordResume$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.resume$0();
      A._runGuarded(_this.onResume);
    },
    set$onListen(onListen) {
      this.onListen = type$.nullable_void_Function._as(onListen);
    },
    set$onPause(onPause) {
      this.onPause = type$.nullable_void_Function._as(onPause);
    },
    set$onResume(onResume) {
      this.onResume = type$.nullable_void_Function._as(onResume);
    },
    set$onCancel(onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    $isEventSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._StreamController__subscribe_closure.prototype = {
    call$0() {
      A._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  A._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && (doneFuture._state & 30) === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 0
  };
  A._SyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      this.$ti._precomputed1._as(data);
      this.get$_subscription()._add$1(data);
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0() {
      this.get$_subscription()._close$0();
    }
  };
  A._AsyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(data);
      this.get$_subscription()._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<1>")));
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      this.get$_subscription()._addPending$1(B.C__DelayedDone);
    }
  };
  A._AsyncStreamController.prototype = {};
  A._SyncStreamController.prototype = {};
  A._ControllerStream.prototype = {
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A._ControllerStream && other._controller === this._controller;
    }
  };
  A._ControllerSubscription.prototype = {
    _onCancel$0() {
      return this._controller._recordCancel$1(this);
    },
    _onPause$0() {
      this._controller._recordPause$1(this);
    },
    _onResume$0() {
      this._controller._recordResume$1(this);
    }
  };
  A._StreamSinkWrapper.prototype = {
    add$1(_, data) {
      this._target.add$1(0, this.$ti._precomputed1._as(data));
    },
    addError$2(error, stackTrace) {
      this._target.addError$2(error, stackTrace);
    },
    close$0() {
      return this._target.close$0();
    },
    $isEventSink: 1,
    $isSink: 1
  };
  A._AddStreamState.prototype = {
    cancel$0() {
      var cancel = this.addSubscription.cancel$0();
      return cancel.whenComplete$1(new A._AddStreamState_cancel_closure(this));
    }
  };
  A._AddStreamState_cancel_closure.prototype = {
    call$0() {
      this.$this.addStreamFuture._asyncComplete$1(null);
    },
    $signature: 1
  };
  A._StreamControllerAddStreamState.prototype = {};
  A._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1(pendingEvents) {
      var _this = this;
      A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (pendingEvents.lastPendingEvent != null) {
        _this._state = (_this._state | 64) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    onData$1(handleData) {
      var t1 = A._instanceType(this);
      this.set$_onData(A._BufferingStreamSubscription__registerDataHandler(this._zone, t1._eval$1("~(_BufferingStreamSubscription.T)?")._as(handleData), t1._eval$1("_BufferingStreamSubscription.T")));
    },
    onError$1(handleError) {
      this._onError = A._BufferingStreamSubscription__registerErrorHandler(this._zone, handleError);
    },
    pause$1(resumeSignal) {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 128 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 128) {
        t3 = _this._pending;
        if (t3 != null)
          if (t3._state === 1)
            t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    pause$0() {
      return this.pause$1(null);
    },
    resume$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 = _this._state = t1 - 128;
        if (t1 < 128)
          if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent != null)
            _this._pending.schedule$1(_this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 32) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0() {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    _cancel$0() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this.set$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _add$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("_BufferingStreamSubscription.T")._as(data);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 32)
        _this._sendData$1(data);
      else
        _this._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<_BufferingStreamSubscription.T>")));
    },
    _addError$2(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 32)
        _this._sendDone$0();
      else
        _this._addPending$1(B.C__DelayedDone);
    },
    _onPause$0() {
    },
    _onResume$0() {
    },
    _onCancel$0() {
      return null;
    },
    _addPending$1($event) {
      var t1, _this = this,
        pending = _this._pending;
      if (pending == null) {
        pending = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>"));
        _this.set$_pending(pending);
      }
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        _this._state = t1;
        if (t1 < 128)
          pending.schedule$1(_this);
      }
    },
    _sendData$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this)._eval$1("_BufferingStreamSubscription.T");
      t1._as(data);
      t2 = _this._state;
      _this._state = (t2 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._onData, data, t1);
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2(error, stackTrace) {
      var cancelFuture, _this = this,
        t1 = _this._state,
        t2 = new A._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._cancel$0();
        cancelFuture = _this._cancelFuture;
        if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
          cancelFuture.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0() {
      var cancelFuture, _this = this,
        t1 = new A._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1(callback) {
      var t1, _this = this;
      type$.void_Function._as(callback);
      t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._state;
      if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent == null) {
        t1 = _this._state = (t1 & 4294967231) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = _this._pending;
            t2 = t2 == null ? null : t2.lastPendingEvent == null;
            t2 = t2 !== false;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = (_this._state & 4294967263) >>> 0;
        _this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._pending.schedule$1(_this);
    },
    set$_onData(_onData) {
      this._onData = A._instanceType(this)._eval$1("~(_BufferingStreamSubscription.T)")._as(_onData);
    },
    set$_pending(_pending) {
      this._pending = A._instanceType(this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(_pending);
    },
    $isStreamSubscription: 1,
    $is_EventDispatch: 1
  };
  A._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, type$.StackTrace);
      else
        t4.runUnaryGuarded$1$2(type$.void_Function_Object._as(onError), t2, t3);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  A._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  A._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = A._instanceType(this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return this._controller._subscribe$4(t1._eval$1("~(1)?")._as(onData), onError, onDone, cancelOnError === true);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._DelayedEvent.prototype = {
    set$next(next) {
      this.next = type$.nullable__DelayedEvent_dynamic._as(next);
    },
    get$next() {
      return this.next;
    }
  };
  A._DelayedData.prototype = {
    perform$1(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    }
  };
  A._DelayedError.prototype = {
    perform$1(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  };
  A._DelayedDone.prototype = {
    perform$1(dispatch) {
      dispatch._sendDone$0();
    },
    get$next() {
      return null;
    },
    set$next(_) {
      throw A.wrapException(A.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  A._PendingEvents.prototype = {
    schedule$1(dispatch) {
      var t1, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      A.scheduleMicrotask(new A._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    },
    add$1(_, $event) {
      var _this = this,
        lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next($event);
        _this.lastPendingEvent = $event;
      }
    }
  };
  A._PendingEvents_schedule_closure.prototype = {
    call$0() {
      var t2, $event, nextEvent,
        t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t2 = t1.$ti._eval$1("_EventDispatch<1>")._as(this.dispatch);
      $event = t1.firstPendingEvent;
      nextEvent = $event.get$next();
      t1.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        t1.lastPendingEvent = null;
      $event.perform$1(t2);
    },
    $signature: 0
  };
  A._DoneStreamSubscription.prototype = {
    _schedule$0() {
      var _this = this;
      if ((_this._state & 2) !== 0)
        return;
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(_this.get$_sendDone()));
      _this._state = (_this._state | 2) >>> 0;
    },
    onData$1(handleData) {
      this.$ti._eval$1("~(1)?")._as(handleData);
    },
    onError$1(handleError) {
    },
    pause$1(resumeSignal) {
      this._state += 4;
    },
    pause$0() {
      return this.pause$1(null);
    },
    resume$0() {
      var t1 = this._state;
      if (t1 >= 4) {
        t1 = this._state = t1 - 4;
        if (t1 < 4 && (t1 & 1) === 0)
          this._schedule$0();
      }
    },
    cancel$0() {
      return $.$get$Future__nullFuture();
    },
    _sendDone$0() {
      var doneHandler, _this = this,
        t1 = _this._state = (_this._state & 4294967293) >>> 0;
      if (t1 >= 4)
        return;
      _this._state = (t1 | 1) >>> 0;
      doneHandler = _this._onDone;
      if (doneHandler != null)
        _this._zone.runGuarded$1(doneHandler);
    },
    $isStreamSubscription: 1
  };
  A._StreamIterator.prototype = {};
  A._EmptyStream.prototype = {
    get$isBroadcast() {
      return true;
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      return A._DoneStreamSubscription$(type$.nullable_void_Function._as(onDone), t1._precomputed1);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._MultiStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var controller, _null = null,
        t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      controller = new A._MultiStreamController(_null, _null, _null, _null, t1._eval$1("_MultiStreamController<1>"));
      controller.set$onListen(new A._MultiStream_listen_closure(this, controller));
      return controller._subscribe$4(onData, onError, onDone, cancelOnError === true);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    get$isBroadcast() {
      return this.isBroadcast;
    }
  };
  A._MultiStream_listen_closure.prototype = {
    call$0() {
      this.$this._onListen.call$1(this.controller);
    },
    $signature: 0
  };
  A._MultiStreamController.prototype = {
    closeSync$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return;
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      t1 |= 4;
      _this._state = t1;
      if ((t1 & 1) !== 0)
        _this.get$_subscription()._close$0();
    },
    $isMultiStreamController: 1
  };
  A._cancelAndValue_closure.prototype = {
    call$0() {
      return this.future._complete$1(this.value);
    },
    $signature: 0
  };
  A._Zone.prototype = {$isZone: 1};
  A._rootHandleError_closure.prototype = {
    call$0() {
      var t1 = this.error,
        t2 = this.stackTrace;
      A.checkNotNullable(t1, "error", type$.Object);
      A.checkNotNullable(t2, "stackTrace", type$.StackTrace);
      A.Error__throw(t1, t2);
    },
    $signature: 0
  };
  A._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        A._rootRunBinary(null, null, this, f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    $index(_, key) {
      return null;
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  A._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$keys(_) {
      return new A._HashMapKeyIterable(this, this.$ti._eval$1("_HashMapKeyIterable<1>"));
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    $index(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1(key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, rest, hash, bucket, index, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._addHashTableEntry$3(strings == null ? _this._collection$_strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._addHashTableEntry$3(nums == null ? _this._collection$_nums = A._HashMap__newHashTable() : nums, key, value);
      } else {
        rest = _this._collection$_rest;
        if (rest == null)
          rest = _this._collection$_rest = A._HashMap__newHashTable();
        hash = A.objectHashCode(key) & 1073741823;
        bucket = rest[hash];
        if (bucket == null) {
          A._HashMap__setTableEntry(rest, hash, [key, value]);
          ++_this._collection$_length;
          _this._collection$_keys = null;
        } else {
          index = _this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            ++_this._collection$_length;
            _this._collection$_keys = null;
          }
        }
      }
    },
    forEach$1(_, action) {
      var keys, $length, t2, i, key, t3, _this = this,
        t1 = _this.$ti;
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._computeKeys$0();
      for ($length = keys.length, t2 = t1._precomputed1, t1 = t1._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        t2._as(key);
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
        if (keys !== _this._collection$_keys)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._collection$_keys;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_keys = result;
    },
    _addHashTableEntry$3(table, key, value) {
      var t1 = this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (table[key] == null) {
        ++this._collection$_length;
        this._collection$_keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _getBucket$2(table, key) {
      return table[A.objectHashCode(key) & 1073741823];
    }
  };
  A._IdentityHashMap.prototype = {
    _findBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map._collection$_length;
    },
    get$isEmpty(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A._HashMapKeyIterator(t1, t1._computeKeys$0(), this.$ti._eval$1("_HashMapKeyIterator<1>"));
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    }
  };
  A._HashMapKeyIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        keys = _this._collection$_keys,
        offset = _this._offset,
        t1 = _this._map;
      if (keys !== t1._collection$_keys)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A._LinkedIdentityHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._LinkedCustomHashMap.prototype = {
    $index(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this.super$JsLinkedHashMap$internalSet(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    internalComputeHashCode$1(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; ++i)
        if (A.boolConversionCheck(t2.call$2(t1._as(bucket[i].hashMapCellKey), t1._as(key))))
          return i;
      return -1;
    }
  };
  A._LinkedCustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 14
  };
  A._LinkedHashSet.prototype = {
    _newSimilarSet$1$0($R) {
      return new A._LinkedHashSet($R._eval$1("_LinkedHashSet<0>"));
    },
    _newSimilarSet$0() {
      return this._newSimilarSet$1$0(type$.dynamic);
    },
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._collection$_modifications, A._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    get$first(_) {
      var first = this._collection$_first;
      if (first == null)
        throw A.wrapException(A.StateError$("No elements"));
      return A._instanceType(this)._precomputed1._as(first._element);
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._addHashTableEntry$2(strings == null ? _this._collection$_strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._addHashTableEntry$2(nums == null ? _this._collection$_nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._collection$_add$1(element);
    },
    _collection$_add$1(element) {
      var rest, hash, bucket, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var t1 = this._remove$1(object);
      return t1;
    },
    _remove$1(object) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      _this._unlinkCell$1(cell);
      return true;
    },
    _addHashTableEntry$2(table, element) {
      A._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_modified$0() {
      this._collection$_modifications = this._collection$_modifications + 1 & 1073741823;
    },
    _collection$_newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(A._instanceType(_this)._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        t1 = _this._collection$_last;
        t1.toString;
        cell._collection$_previous = t1;
        _this._collection$_last = t1._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    },
    $isLinkedHashSet: 1
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.IterableBase.prototype = {};
  A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 45
  };
  A.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  A.ListMixin.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    every$1(receiver, test) {
      var $length, i;
      A.instanceType(receiver)._eval$1("bool(ListMixin.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (!A.boolConversionCheck(test.call$1(this.$index(receiver, i))))
          return false;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    map$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListMixin.E)")._as(f), t1._eval$1("@<ListMixin.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    toList$1$growable(receiver, growable) {
      var t1, first, result, i, _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(0, A.instanceType(receiver)._eval$1("ListMixin.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, true, A.instanceType(receiver)._eval$1("ListMixin.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        B.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1(receiver, element) {
      var t1;
      A.instanceType(receiver)._eval$1("ListMixin.E")._as(element);
      t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    _closeGap$2(receiver, start, end) {
      var i, _this = this,
        $length = _this.get$length(receiver),
        size = end - start;
      for (i = end; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A.instanceType(receiver)._eval$1("@<ListMixin.E>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    sort$1(receiver, compare) {
      var t2,
        t1 = A.instanceType(receiver);
      t1._eval$1("int(ListMixin.E,ListMixin.E)?")._as(compare);
      t2 = compare == null ? A.collection_ListMixin__compareAny$closure() : compare;
      A.Sort_sort(receiver, t2, t1._eval$1("ListMixin.E"));
    },
    fillRange$3(receiver, start, end, fill) {
      var i;
      A.instanceType(receiver)._eval$1("ListMixin.E?")._as(fill);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  A.MapBase.prototype = {};
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += A.S(k);
      t1._contents = t2 + ": ";
      t1._contents += A.S(v);
    },
    $signature: 16
  };
  A.MapMixin.prototype = {
    forEach$1(_, action) {
      var t2, key, t3, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(MapMixin.K,MapMixin.V)")._as(action);
      for (t2 = _this.get$keys(_this), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    updateAll$1(update) {
      var t2, key, t3, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("MapMixin.V(MapMixin.K,MapMixin.V)")._as(update);
      for (t2 = _this.get$keys(_this), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = _this.$index(0, key);
        _this.$indexSet(0, key, update.call$2(key, t3 == null ? t1._as(t3) : t3));
      }
    },
    get$entries() {
      var _this = this;
      return _this.get$keys(_this).map$1$1(0, new A.MapMixin_entries_closure(_this), A._instanceType(_this)._eval$1("MapEntry<MapMixin.K,MapMixin.V>"));
    },
    containsKey$1(key) {
      return this.get$keys(this).contains$1(0, key);
    },
    get$length(_) {
      var t1 = this.get$keys(this);
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this.get$keys(this);
      return t1.get$isEmpty(t1);
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapMixin_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t2._eval$1("MapMixin.K")._as(key);
      t1 = t1.$index(0, key);
      if (t1 == null)
        t1 = t2._eval$1("MapMixin.V")._as(t1);
      return new A.MapEntry(key, t1, t2._eval$1("@<MapMixin.K>")._bind$1(t2._eval$1("MapMixin.V"))._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("MapEntry<MapMixin.K,MapMixin.V>(MapMixin.K)");
    }
  };
  A._UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  A.MapView.prototype = {
    $index(_, key) {
      return this._map.$index(0, key);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      this._map.$indexSet(0, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      return this._map.containsKey$1(key);
    },
    forEach$1(_, action) {
      this._map.forEach$1(0, A._instanceType(this)._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty(_) {
      var t1 = this._map;
      return t1.get$isEmpty(t1);
    },
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
    get$keys(_) {
      var t1 = this._map;
      return t1.get$keys(t1);
    },
    toString$0(_) {
      return this._map.toString$0(0);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {};
  A.SetMixin.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    cast$1$0(_, $R) {
      return A.Set_castFrom(this, null, A._instanceType(this)._precomputed1, $R);
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, true, A._instanceType(this)._precomputed1);
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1$1(_, f, $T) {
      var t1 = A._instanceType(this);
      return new A.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    },
    join$1(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = "" + A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + A.S(iterator.get$current());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, n, A._instanceType(this)._precomputed1);
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      A.checkNotNullable(index, _s5_, type$.int);
      A.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw A.wrapException(A.IndexError$withLength(index, elementIndex, this, null, _s5_));
    }
  };
  A._SetBase.prototype = {
    cast$1$0(_, $R) {
      return A.Set_castFrom(this, this.get$_newSimilarSet(), A._instanceType(this)._precomputed1, $R);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._UnmodifiableSetMixin.prototype = {};
  A._UnmodifiableSet.prototype = {
    _newSimilarSet$1$0($R) {
      return A.LinkedHashSet_LinkedHashSet($R);
    },
    _newSimilarSet$0() {
      return this._newSimilarSet$1$0(type$.dynamic);
    },
    get$iterator(_) {
      var t1 = this._map;
      t1 = t1.get$keys(t1);
      return t1.get$iterator(t1);
    },
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    }
  };
  A._ListBase_Object_ListMixin.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A.__SetBase_Object_SetMixin.prototype = {};
  A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin.prototype = {};
  A._JsonMap.prototype = {
    $index(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key != "string")
        return null;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length(_) {
      return this._processed == null ? this._data.__js_helper$_length : this._convert$_computeKeys$0().length;
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$keys(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
      }
      return new A._JsonMapKeyIterable(this);
    },
    $indexSet(_, key, value) {
      var processed, original, _this = this;
      A._asString(key);
      if (_this._processed == null)
        _this._data.$indexSet(0, key, value);
      else if (_this.containsKey$1(key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1(key) {
      if (this._processed == null)
        return this._data.containsKey$1(key);
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1(_, f) {
      var keys, i, key, value, _this = this;
      type$.void_Function_String_dynamic._as(f);
      if (_this._processed == null)
        return _this._data.forEach$1(0, f);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = A._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _convert$_computeKeys$0() {
      var keys = type$.nullable_List_dynamic._as(this._data);
      if (keys == null)
        keys = this._data = A._setArrayType(Object.keys(this._original), type$.JSArray_String);
      return keys;
    },
    _upgrade$0() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._data;
      result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        B.JSArray_methods.add$1(keys, "");
      else
        B.JSArray_methods.clear$0(keys);
      _this._original = _this._processed = null;
      return _this._data = result;
    },
    _process$1(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return null;
      result = A._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    }
  };
  A._JsonMapKeyIterable.prototype = {
    get$length(_) {
      var t1 = this._parent;
      return t1.get$length(t1);
    },
    elementAt$1(_, index) {
      var t1 = this._parent;
      if (t1._processed == null)
        t1 = t1.get$keys(t1).elementAt$1(0, index);
      else {
        t1 = t1._convert$_computeKeys$0();
        if (!(index >= 0 && index < t1.length))
          return A.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator(_) {
      var t1 = this._parent;
      if (t1._processed == null) {
        t1 = t1.get$keys(t1);
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._convert$_computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
      }
      return t1;
    },
    contains$1(_, key) {
      return this._parent.containsKey$1(key);
    }
  };
  A.Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 17
  };
  A.Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 17
  };
  A.AsciiCodec.prototype = {
    encode$1(source) {
      return B.AsciiEncoder_127.convert$1(source);
    },
    decode$1(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = B.AsciiDecoder_false_127.convert$1(bytes);
      return t1;
    },
    get$encoder() {
      return B.AsciiEncoder_127;
    }
  };
  A._UnicodeSubsetEncoder.prototype = {
    convert$1(string) {
      var $length, result, t1, i, codeUnit;
      A._asString(string);
      $length = A.RangeError_checkValidRange(0, null, string.length) - 0;
      result = new Uint8Array($length);
      for (t1 = ~this._subsetMask, i = 0; i < $length; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(string, i);
        if ((codeUnit & t1) !== 0)
          throw A.wrapException(A.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (!(i < $length))
          return A.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    }
  };
  A.AsciiEncoder.prototype = {};
  A._UnicodeSubsetDecoder.prototype = {
    convert$1(bytes) {
      var t1, end, t2, i, byte;
      type$.List_int._as(bytes);
      t1 = bytes.length;
      end = A.RangeError_checkValidRange(0, null, t1);
      for (t2 = ~this._subsetMask, i = 0; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(bytes, i);
        byte = bytes[i];
        if ((byte & t2) !== 0) {
          if (!this._allowInvalid)
            throw A.wrapException(A.FormatException$("Invalid value in input: " + byte, null, null));
          return this._convertInvalid$3(bytes, 0, end);
        }
      }
      return A.String_String$fromCharCodes(bytes, 0, end);
    },
    _convertInvalid$3(bytes, start, end) {
      var t1, t2, i, t3, value;
      type$.List_int._as(bytes);
      for (t1 = ~this._subsetMask, t2 = bytes.length, i = start, t3 = ""; i < end; ++i) {
        if (!(i < t2))
          return A.ioore(bytes, i);
        value = bytes[i];
        t3 += A.Primitives_stringFromCharCode((value & t1) !== 0 ? 65533 : value);
      }
      return t3.charCodeAt(0) == 0 ? t3 : t3;
    }
  };
  A.AsciiDecoder.prototype = {};
  A.Base64Codec.prototype = {
    get$encoder() {
      return B.C_Base64Encoder;
    },
    normalize$3(source, start, end) {
      var inverseAlphabet, t1, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, digit2, char0, value, t2, t3, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      end = A.RangeError_checkValidRange(start, end, source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t1 = inverseAlphabet.length, i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        char = B.JSString_methods._codeUnitAt$1(source, i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            digit1 = A.hexDigitValue(B.JSString_methods._codeUnitAt$1(source, i0));
            digit2 = A.hexDigitValue(B.JSString_methods._codeUnitAt$1(source, i0 + 1));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (!(char0 >= 0 && char0 < t1))
            return A.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            char0 = B.JSString_methods.codeUnitAt$1(string$.ABCDEF, value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t2 = buffer == null ? null : buffer._contents.length;
                if (t2 == null)
                  t2 = 0;
                firstPadding = t2 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t2 = buffer;
            } else
              t2 = buffer;
            t3 = t2._contents += B.JSString_methods.substring$2(source, sliceStart, i);
            t2._contents = t3 + A.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = buffer._contents += B.JSString_methods.substring$2(source, sliceStart, end);
        t2 = t1.length;
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = B.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return B.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {
    convert$1(input) {
      var t1;
      type$.List_int._as(input);
      t1 = input.length;
      if (t1 === 0)
        return "";
      t1 = new A._Base64Encoder(string$.ABCDEF).encode$4(input, 0, t1, true);
      t1.toString;
      return A.String_String$fromCharCodes(t1, 0, null);
    }
  };
  A._Base64Encoder.prototype = {
    createBuffer$1(bufferLength) {
      return new Uint8Array(bufferLength);
    },
    encode$4(bytes, start, end, isLast) {
      var byteCount, fullChunks, bufferLength, output, _this = this;
      type$.List_int._as(bytes);
      byteCount = (_this._convert$_state & 3) + (end - start);
      fullChunks = B.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (isLast && byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = _this.createBuffer$1(bufferLength);
      _this._convert$_state = A._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, isLast, output, 0, _this._convert$_state);
      if (bufferLength > 0)
        return output;
      return null;
    }
  };
  A.ByteConversionSink.prototype = {};
  A.ByteConversionSinkBase.prototype = {
    addSlice$4(chunk, start, end, isLast) {
      this.add$1(0, B.NativeUint8List_methods.sublist$2(type$.List_int._as(chunk), start, end));
      if (isLast)
        this.close$0();
    }
  };
  A._ByteAdapterSink.prototype = {
    add$1(_, chunk) {
      this._sink.add$1(0, type$.List_int._as(chunk));
    },
    close$0() {
      this._sink.close$0();
    }
  };
  A._ByteCallbackSink.prototype = {
    add$1(_, chunk) {
      var t1, t2, t3, v, grown, _this = this;
      type$.Iterable_int._as(chunk);
      t1 = _this._buffer;
      t2 = _this._bufferIndex;
      t3 = J.getInterceptor$asx(chunk);
      if (t3.get$length(chunk) > t1.length - t2) {
        t1 = _this._buffer;
        v = t3.get$length(chunk) + t1.length - 1;
        v |= B.JSInt_methods._shrOtherPositive$1(v, 1);
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        grown = new Uint8Array((((v | v >>> 16) >>> 0) + 1) * 2);
        t1 = _this._buffer;
        B.NativeUint8List_methods.setRange$3(grown, 0, t1.length, t1);
        _this.set$_buffer(grown);
      }
      t1 = _this._buffer;
      t2 = _this._bufferIndex;
      B.NativeUint8List_methods.setRange$3(t1, t2, t2 + t3.get$length(chunk), chunk);
      _this._bufferIndex = _this._bufferIndex + t3.get$length(chunk);
    },
    close$0() {
      this._callback.call$1(B.NativeUint8List_methods.sublist$2(this._buffer, 0, this._bufferIndex));
    },
    set$_buffer(_buffer) {
      this._buffer = type$.List_int._as(_buffer);
    }
  };
  A.ChunkedConversionSink.prototype = {$isSink: 1};
  A.Codec.prototype = {
    encode$1(input) {
      A._instanceType(this)._eval$1("Codec.S")._as(input);
      return this.get$encoder().convert$1(input);
    }
  };
  A.Converter.prototype = {};
  A.Encoding.prototype = {};
  A.JsonUnsupportedObjectError.prototype = {
    toString$0(_) {
      var safeString = A.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  A.JsonCyclicError.prototype = {
    toString$0(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  A.JsonCodec.prototype = {
    decode$2$reviver(source, reviver) {
      var t1;
      type$.nullable_nullable_Object_Function_2_nullable_Object_and_nullable_Object._as(reviver);
      t1 = A._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    decode$1(source) {
      return this.decode$2$reviver(source, null);
    },
    encode$2$toEncodable(value, toEncodable) {
      var t1;
      type$.nullable_nullable_Object_Function_dynamic._as(toEncodable);
      t1 = A._JsonStringStringifier_stringify(value, this.get$encoder()._toEncodable, null);
      return t1;
    },
    encode$1(value) {
      return this.encode$2$toEncodable(value, null);
    },
    get$encoder() {
      return B.JsonEncoder_null;
    },
    get$decoder() {
      return B.JsonDecoder_null;
    }
  };
  A.JsonEncoder.prototype = {
    convert$1(object) {
      var t1,
        output = new A.StringBuffer("");
      A._JsonStringStringifier_printOn(object, output, this._toEncodable, null);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.JsonDecoder.prototype = {
    convert$1(input) {
      return A._parseJson(A._asString(input), this._reviver);
    }
  };
  A._JsonStringifier.prototype = {
    writeStringContent$1(s) {
      var offset, i, charCode, t1, t2, _this = this,
        $length = s.length;
      for (offset = 0, i = 0; i < $length; ++i) {
        charCode = B.JSString_methods._codeUnitAt$1(s, i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t1 = charCode & 64512;
            if (t1 === 55296) {
              t2 = i + 1;
              t2 = !(t2 < $length && (B.JSString_methods._codeUnitAt$1(s, t2) & 64512) === 56320);
            } else
              t2 = false;
            if (!t2)
              if (t1 === 56320) {
                t1 = i - 1;
                t1 = !(t1 >= 0 && (B.JSString_methods.codeUnitAt$1(s, t1) & 64512) === 55296);
              } else
                t1 = false;
            else
              t1 = true;
            if (t1) {
              if (i > offset)
                _this.writeStringSlice$3(s, offset, i);
              offset = i + 1;
              _this.writeCharCode$1(92);
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(100);
              t1 = charCode >>> 8 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw A.wrapException(new A.JsonCyclicError(object, null));
      }
      B.JSArray_methods.add$1(t1, object);
    },
    writeObject$1(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = A.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw A.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw A.wrapException(t1);
      }
    },
    writeJsonValue$1(object) {
      var t1, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object == "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1(list) {
      var t1, i, _this = this;
      _this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = A.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new A._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{");
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        _this.writeString$1('":');
        t2 = i + 1;
        if (!(t2 < t1))
          return A.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("}");
      return true;
    }
  };
  A._JsonStringifier_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 16
  };
  A._JsonStringStringifier.prototype = {
    get$_partialResult() {
      var t1 = this._sink;
      return t1 instanceof A.StringBuffer ? t1.toString$0(0) : null;
    },
    writeNumber$1(number) {
      this._sink.write$1(0, B.JSNumber_methods.toString$0(number));
    },
    writeString$1(string) {
      this._sink.write$1(0, string);
    },
    writeStringSlice$3(string, start, end) {
      this._sink.write$1(0, B.JSString_methods.substring$2(string, start, end));
    },
    writeCharCode$1(charCode) {
      this._sink.writeCharCode$1(charCode);
    }
  };
  A.Latin1Codec.prototype = {
    encode$1(source) {
      return B.Latin1Encoder_255.convert$1(source);
    },
    decode$1(bytes) {
      var t1;
      type$.List_int._as(bytes);
      t1 = B.Latin1Decoder_false_255.convert$1(bytes);
      return t1;
    },
    get$encoder() {
      return B.Latin1Encoder_255;
    }
  };
  A.Latin1Encoder.prototype = {};
  A.Latin1Decoder.prototype = {};
  A.StringConversionSinkMixin.prototype = {};
  A.Utf8Codec.prototype = {
    decode$1(codeUnits) {
      type$.List_int._as(codeUnits);
      return B.Utf8Decoder_false.convert$1(codeUnits);
    },
    get$encoder() {
      return B.C_Utf8Encoder;
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var end, $length, t1, encoder;
      A._asString(string);
      end = A.RangeError_checkValidRange(0, null, string.length);
      $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new A._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        B.JSString_methods.codeUnitAt$1(string, end - 1);
        encoder._writeReplacementCharacter$0();
      }
      return B.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (!(t3 < t4))
        return A.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (B.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = B.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else {
          t3 = codeUnit & 64512;
          if (t3 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (_this._writeSurrogate$2(codeUnit, B.JSString_methods._codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (t3 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t3 = _this._bufferIndex;
            t4 = t3 + 1;
            if (t4 >= t2)
              break;
            _this._bufferIndex = t4;
            if (!(t3 < t2))
              return A.ioore(t1, t3);
            t1[t3] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit & 63 | 128;
          } else {
            t3 = _this._bufferIndex;
            if (t3 + 2 >= t2)
              break;
            t4 = _this._bufferIndex = t3 + 1;
            if (!(t3 < t2))
              return A.ioore(t1, t3);
            t1[t3] = codeUnit >>> 12 | 224;
            t3 = _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t3 + 1;
            if (!(t3 < t2))
              return A.ioore(t1, t3);
            t1[t3] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A._Utf8EncoderSink.prototype = {
    close$0() {
      if (this._carry !== 0) {
        this.addSlice$4("", 0, 0, true);
        return;
      }
      this._sink._sink.close$0();
    },
    addSlice$4(str, start, end, isLast) {
      var t1, t2, t3, t4, isLastSlice, _this = this;
      _this._bufferIndex = 0;
      t1 = start === end;
      if (t1 && !isLast)
        return;
      t2 = _this._carry;
      if (t2 !== 0) {
        if (_this._writeSurrogate$2(t2, !t1 ? B.JSString_methods._codeUnitAt$1(str, start) : 0))
          ++start;
        _this._carry = 0;
      }
      t1 = _this._sink;
      t2 = _this._buffer;
      t3 = end - 1;
      t4 = t2.length - 3;
      do {
        start = _this._fillBuffer$3(str, start, end);
        isLastSlice = isLast && start === end;
        if (start === t3 && (B.JSString_methods._codeUnitAt$1(str, start) & 64512) === 55296) {
          if (isLast && _this._bufferIndex < t4)
            _this._writeReplacementCharacter$0();
          else
            _this._carry = B.JSString_methods._codeUnitAt$1(str, start);
          ++start;
        }
        t1.addSlice$4(t2, 0, _this._bufferIndex, isLastSlice);
        _this._bufferIndex = 0;
      } while (start < end);
      if (isLast)
        _this.close$0();
    },
    $isSink: 1
  };
  A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      var t1, result;
      type$.List_int._as(codeUnits);
      t1 = this._allowMalformed;
      result = A.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null)
        return result;
      return new A._Utf8Decoder(t1).convertGeneral$4(codeUnits, 0, null, true);
    }
  };
  A._Utf8Decoder.prototype = {
    convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, bytes, errorOffset, result, t1, message, _this = this;
      type$.List_int._as(codeUnits);
      end = A.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (type$.Uint8List._is(codeUnits)) {
        bytes = codeUnits;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      result = _this._convertRecursive$4(bytes, start, end, single);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _convertRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._convertRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._convertRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this, _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            type = B.JSString_methods._codeUnitAt$1("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE", byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            state = B.JSString_methods._codeUnitAt$1(" \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA", state + type);
            if (state === 0) {
              buffer._contents += A.Primitives_stringFromCharCode(char);
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    break;
                  case 65:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    --i;
                    break;
                  default:
                    t3 = buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    buffer._contents = t3 + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                buffer._contents += A.Primitives_stringFromCharCode(bytes[m]);
              }
            else
              buffer._contents += A.String_String$fromCharCodes(bytes, i, markEnd);
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2)
          buffer._contents += A.Primitives_stringFromCharCode(_65533);
        else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin.prototype = {};
  A.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1, t2, t3;
      type$.Symbol._as(key);
      t1 = this.sb;
      t2 = this._box_0;
      t3 = t1._contents += t2.comma;
      t3 += key._name;
      t1._contents = t3;
      t1._contents = t3 + ": ";
      t1._contents += A.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 55
  };
  A.DateTime.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._value === other._value && true;
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._value, type$.DateTime._as(other)._value);
    },
    get$hashCode(_) {
      var t1 = this._value;
      return (t1 ^ B.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this));
      return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    $isComparable: 1
  };
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0(_) {
      var minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        sign = microseconds < 0 ? "-" : "",
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000);
      microseconds %= 3600000000;
      if (microseconds < 0)
        microseconds = -microseconds;
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return sign + Math.abs(hours) + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    },
    $isComparable: 1
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.getTraceFromException(this.$thrownJsError);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.NullThrownError.prototype = {
    toString$0(_) {
      return "Throw of null.";
    },
    $isTypeError: 1
  };
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue(_this));
    },
    get$invalidValue(receiver) {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue(_) {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue(_) {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments, t1, _i, t2, t3, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new A.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = sb._contents += A.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new A.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = A.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      return "NoSuchMethodError: method not found: '" + _this._core$_memberName._name + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      return "UnimplementedError: " + this.message;
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = B.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < lineEnd; ++i) {
          char = B.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        return report + prefix + B.JSString_methods.substring$2(source, start, end) + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message() {
      return this.message;
    },
    get$source() {
      return this.source;
    },
    get$offset() {
      return this.offset;
    }
  };
  A.Iterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this, A._instanceType(this)._eval$1("Iterable.E"), $R);
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    forEach$1(_, action) {
      var t1;
      A._instanceType(this)._eval$1("~(Iterable.E)")._as(action);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        action.call$1(t1.get$current());
    },
    every$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (!A.boolConversionCheck(test.call$1(t1.get$current())))
          return false;
      return true;
    },
    join$1(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += A.S(J.toString$0$(iterator.get$current()));
        while (iterator.moveNext$0());
      } else {
        t1 = "" + A.S(J.toString$0$(iterator.get$current()));
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + A.S(J.toString$0$(iterator.get$current()));
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, growable, A._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element;
      A.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw A.wrapException(A.IndexError$withLength(index, elementIndex, this, null, "index"));
    },
    toString$0(_) {
      return A.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  A.Iterator.prototype = {};
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1(_, invocation) {
      type$.Invocation._as(invocation);
      throw A.wrapException(A.NoSuchMethodError$_(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A.Sink.prototype = {};
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    write$1(_, obj) {
      this._contents += A.S(obj);
    },
    writeCharCode$1(charCode) {
      this._contents += A.Primitives_stringFromCharCode(charCode);
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  A.Uri_splitQueryString_closure.prototype = {
    call$2(map, element) {
      var index, key, value, t1;
      type$.Map_String_String._as(map);
      A._asString(element);
      index = B.JSString_methods.indexOf$1(element, "=");
      if (index === -1) {
        if (element !== "")
          map.$indexSet(0, A._Uri__uriDecode(element, 0, element.length, this.encoding, true), "");
      } else if (index !== 0) {
        key = B.JSString_methods.substring$2(element, 0, index);
        value = B.JSString_methods.substring$1(element, index + 1);
        t1 = this.encoding;
        map.$indexSet(0, A._Uri__uriDecode(key, 0, key.length, t1, true), A._Uri__uriDecode(value, 0, value.length, t1, true));
      }
      return map;
    },
    $signature: 63
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 66
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    $signature: 71
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(B.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 79
  };
  A._Uri.prototype = {
    get$_text() {
      var t1, t2, t3, t4, _this = this,
        value = _this.___Uri__text_FI;
      if (value === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? "" + t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + A.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        value !== $ && A.throwLateFieldADI("_text");
        value = _this.___Uri__text_FI = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return value;
    },
    get$pathSegments() {
      var pathToSplit, result, _this = this,
        value = _this.___Uri_pathSegments_FI;
      if (value === $) {
        pathToSplit = _this.path;
        if (pathToSplit.length !== 0 && B.JSString_methods._codeUnitAt$1(pathToSplit, 0) === 47)
          pathToSplit = B.JSString_methods.substring$1(pathToSplit, 1);
        result = pathToSplit.length === 0 ? B.List_empty0 : A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(pathToSplit.split("/"), type$.JSArray_String), type$.dynamic_Function_String._as(A.core_Uri_decodeComponent$closure()), type$.MappedListIterable_String_dynamic), type$.String);
        _this.___Uri_pathSegments_FI !== $ && A.throwLateFieldADI("pathSegments");
        _this.set$___Uri_pathSegments_FI(result);
        value = result;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode_FI;
      if (value === $) {
        result = B.JSString_methods.get$hashCode(_this.get$_text());
        _this.___Uri_hashCode_FI !== $ && A.throwLateFieldADI("hashCode");
        _this.___Uri_hashCode_FI = result;
        value = result;
      }
      return value;
    },
    get$queryParameters() {
      var t1, result, _this = this,
        value = _this.___Uri_queryParameters_FI;
      if (value === $) {
        t1 = _this._query;
        result = new A.UnmodifiableMapView(A.Uri_splitQueryString(t1 == null ? "" : t1), type$.UnmodifiableMapView_String_String);
        _this.___Uri_queryParameters_FI !== $ && A.throwLateFieldADI("queryParameters");
        _this.set$___Uri_queryParameters_FI(result);
        value = result;
      }
      return value;
    },
    get$queryParametersAll() {
      var t1, result, _this = this,
        value = _this.___Uri_queryParametersAll_FI;
      if (value === $) {
        t1 = _this._query;
        result = A._Uri__computeQueryParametersAll(t1 == null ? "" : t1);
        _this.___Uri_queryParametersAll_FI !== $ && A.throwLateFieldADI("queryParametersAll");
        _this.set$___Uri_queryParametersAll_FI(result);
        value = result;
      }
      return value;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host() {
      var host = this._host;
      if (host == null)
        return "";
      if (B.JSString_methods.startsWith$1(host, "["))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port() {
      var t1 = this._port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment(_) {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return A._caseInsensitiveCompareStart(scheme, thisScheme, 0) >= 0;
    },
    replace$1$queryParameters(_, queryParameters) {
      var scheme, isFile, userInfo, port, host, currentPath, t1, path, query, _this = this;
      type$.nullable_Map_String_dynamic._as(queryParameters);
      scheme = _this.scheme;
      isFile = scheme === "file";
      userInfo = _this._userInfo;
      port = _this._port;
      host = _this._host;
      if (!(host != null))
        host = userInfo.length !== 0 || port != null || isFile ? "" : null;
      currentPath = _this.path;
      if (!isFile)
        t1 = host != null && currentPath.length !== 0;
      else
        t1 = true;
      if (t1 && !B.JSString_methods.startsWith$1(currentPath, "/"))
        currentPath = "/" + currentPath;
      path = currentPath;
      query = A._Uri__makeQuery(null, 0, 0, queryParameters);
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, _this._fragment);
    },
    _mergePaths$2(base, reference) {
      var backCount, refStart, baseEnd, newEnd, delta, t1;
      for (backCount = 0, refStart = 0; B.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = B.JSString_methods.lastIndexOf$1(base, "/");
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = B.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (B.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
            t1 = !t1 || B.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return B.JSString_methods.replaceRange$3(base, baseEnd + 1, null, B.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference, 0, null));
    },
    resolveUri$1(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, packageNameEnd, packageName, mergedPath, t1, _this = this, _null = null;
      if (reference.get$scheme().length !== 0) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = reference.get$hasPort() ? reference.get$port() : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = A._Uri__removeDotSegments(reference.get$path());
        targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = A._Uri__makePort(reference.get$hasPort() ? reference.get$port() : _null, targetScheme);
          targetPath = A._Uri__removeDotSegments(reference.get$path());
          targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          targetPath = _this.path;
          if (reference.get$path() === "")
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _this._query;
          else {
            packageNameEnd = A._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = B.JSString_methods.substring$2(targetPath, 0, packageNameEnd);
              targetPath = reference.get$hasAbsolutePath() ? packageName + A._Uri__removeDotSegments(reference.get$path()) : packageName + A._Uri__removeDotSegments(_this._mergePaths$2(B.JSString_methods.substring$1(targetPath, packageName.length), reference.get$path()));
            } else if (reference.get$hasAbsolutePath())
              targetPath = A._Uri__removeDotSegments(reference.get$path());
            else if (targetPath.length === 0)
              if (targetHost == null)
                targetPath = targetScheme.length === 0 ? reference.get$path() : A._Uri__removeDotSegments(reference.get$path());
              else
                targetPath = A._Uri__removeDotSegments("/" + reference.get$path());
            else {
              mergedPath = _this._mergePaths$2(targetPath, reference.get$path());
              t1 = targetScheme.length === 0;
              if (!t1 || targetHost != null || B.JSString_methods.startsWith$1(targetPath, "/"))
                targetPath = A._Uri__removeDotSegments(mergedPath);
              else
                targetPath = A._Uri__normalizeRelativePath(mergedPath, !t1 || targetHost != null);
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
          }
        }
      }
      return A._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment(reference) : _null);
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasPort() {
      return this._port != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$1(this.path, "/");
    },
    get$origin() {
      var host, port, _this = this,
        t1 = _this.scheme;
      if (t1 === "")
        throw A.wrapException(A.StateError$("Cannot use origin without a scheme: " + _this.toString$0(0)));
      if (t1 !== "http" && t1 !== "https")
        throw A.wrapException(A.StateError$("Origin is only applicable schemes http and https: " + _this.toString$0(0)));
      host = _this._host;
      if (host == null || host === "")
        throw A.wrapException(A.StateError$("A " + t1 + string$.x3a_URI_ + _this.toString$0(0)));
      port = _this._port;
      if (port == null)
        return t1 + "://" + A.S(host);
      return t1 + "://" + A.S(host) + ":" + A.S(port);
    },
    toFilePath$0() {
      var pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + t1 + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotefq));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannoteff));
      t1 = $.$get$_Uri__isWindowsCached();
      if (A.boolConversionCheck(t1))
        t1 = A._Uri__toWindowsFilePath(_this);
      else {
        if (_this._host != null && _this.get$host() !== "")
          A.throwExpression(A.UnsupportedError$(string$.Cannoten));
        pathSegments = _this.get$pathSegments();
        A._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
        t1 = A.StringBuffer__writeAll(B.JSString_methods.startsWith$1(_this.path, "/") ? "" + "/" : "", pathSegments, "/");
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host() === other.get$host())
                if (_this.get$port() === other.get$port())
                  if (_this.path === other.get$path()) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query()) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment(other);
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    set$___Uri_pathSegments_FI(___Uri_pathSegments_FI) {
      this.___Uri_pathSegments_FI = type$.List_String._as(___Uri_pathSegments_FI);
    },
    set$___Uri_queryParameters_FI(___Uri_queryParameters_FI) {
      this.___Uri_queryParameters_FI = type$.Map_String_String._as(___Uri_queryParameters_FI);
    },
    set$___Uri_queryParametersAll_FI(___Uri_queryParametersAll_FI) {
      this.___Uri_queryParametersAll_FI = type$.Map_of_String_and_List_String._as(___Uri_queryParametersAll_FI);
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path() {
      return this.path;
    }
  };
  A._Uri__makeQuery_writeParameter.prototype = {
    call$2(key, value) {
      var t1 = this.result,
        t2 = this._box_0;
      t1._contents += t2.separator;
      t2.separator = "&";
      t2 = t1._contents += A._Uri__uriEncode(B.List_nxB, key, B.C_Utf8Codec, true);
      if (value != null && value.length !== 0) {
        t1._contents = t2 + "=";
        t1._contents += A._Uri__uriEncode(B.List_nxB, value, B.C_Utf8Codec, true);
      }
    },
    $signature: 80
  };
  A._Uri__makeQuery_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      A._asString(key);
      if (value == null || typeof value == "string")
        this.writeParameter.call$2(key, A._asStringQ(value));
      else
        for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(value)), t2 = this.writeParameter; t1.moveNext$0();)
          t2.call$2(key, A._asString(t1.get$current()));
    },
    $signature: 9
  };
  A._Uri__splitQueryStringAll_parsePair.prototype = {
    call$3(start, equalsIndex, end) {
      var t1, t2, key, value;
      if (start === end)
        return;
      t1 = this.query;
      t2 = this.encoding;
      if (equalsIndex < 0) {
        key = A._Uri__uriDecode(t1, start, end, t2, true);
        value = "";
      } else {
        key = A._Uri__uriDecode(t1, start, equalsIndex, t2, true);
        value = A._Uri__uriDecode(t1, equalsIndex + 1, end, t2, true);
      }
      J.add$1$ax(this.result.putIfAbsent$2(key, A.core__Uri__createList$closure()), value);
    },
    $signature: 30
  };
  A.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._separatorIndices;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t2 = _this._text;
        t1 = t1[0] + 1;
        queryIndex = B.JSString_methods.indexOf$2(t2, "?", t1);
        end = t2.length;
        if (queryIndex >= 0) {
          query = A._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, B.List_CVk, false, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new A._DataUri("data", "", _null, _null, A._Uri__normalizeOrSubstring(t2, t1, end, B.List_qg4, false, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  A._createTables_build.prototype = {
    call$2(state, defaultTransition) {
      var t1 = this.tables;
      if (!(state < t1.length))
        return A.ioore(t1, state);
      t1 = t1[state];
      B.NativeUint8List_methods.fillRange$3(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 82
  };
  A._createTables_setChars.prototype = {
    call$3(target, chars, transition) {
      var t1, i, t2;
      for (t1 = chars.length, i = 0; i < t1; ++i) {
        t2 = B.JSString_methods._codeUnitAt$1(chars, i) ^ 96;
        if (!(t2 < 96))
          return A.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 18
  };
  A._createTables_setRange.prototype = {
    call$3(target, range, transition) {
      var i, n, t1;
      for (i = B.JSString_methods._codeUnitAt$1(range, 0), n = B.JSString_methods._codeUnitAt$1(range, 1); i <= n; ++i) {
        t1 = (i ^ 96) >>> 0;
        if (!(t1 < 96))
          return A.ioore(target, t1);
        target[t1] = transition;
      }
    },
    $signature: 18
  };
  A._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && B.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return B.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? B.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host() {
      var t1 = this._hostStart;
      return t1 > 0 ? B.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port() {
      var t1, _this = this;
      if (_this.get$hasPort())
        return A.int_parse(B.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path() {
      return B.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? B.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment(_) {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$origin() {
      var t2, t3, _this = this,
        t1 = _this._schemeEnd,
        isHttp = t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http");
      if (t1 < 0)
        throw A.wrapException(A.StateError$("Cannot use origin without a scheme: " + _this.toString$0(0)));
      if (!isHttp)
        t2 = !(t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"));
      else
        t2 = false;
      if (t2)
        throw A.wrapException(A.StateError$("Origin is only applicable to schemes http and https: " + _this.toString$0(0)));
      t2 = _this._hostStart;
      if (t2 === _this._portStart)
        throw A.wrapException(A.StateError$("A " + _this.get$scheme() + string$.x3a_URI_ + _this.toString$0(0)));
      t1 += 3;
      if (t2 === t1)
        return B.JSString_methods.substring$2(_this._uri, 0, _this._pathStart);
      t3 = _this._uri;
      return B.JSString_methods.substring$2(t3, 0, t1) + B.JSString_methods.substring$2(t3, t2, _this._pathStart);
    },
    get$pathSegments() {
      var parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (B.JSString_methods.startsWith$2(t1, "/", start))
        ++start;
      if (start === end)
        return B.List_empty0;
      parts = A._setArrayType([], type$.JSArray_String);
      for (i = start; i < end; ++i)
        if (B.JSString_methods.codeUnitAt$1(t1, i) === 47) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
      B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(t1, start, end));
      return A.List_List$unmodifiable(parts, type$.String);
    },
    get$queryParameters() {
      if (this._queryStart >= this._fragmentStart)
        return B.Map_empty1;
      return new A.UnmodifiableMapView(A.Uri_splitQueryString(this.get$query()), type$.UnmodifiableMapView_String_String);
    },
    get$queryParametersAll() {
      if (this._queryStart >= this._fragmentStart)
        return B.Map_empty0;
      var queryParameterLists = A._Uri__splitQueryStringAll(this.get$query());
      queryParameterLists.updateAll$1(A.core___toUnmodifiableStringList$closure());
      return A.ConstantMap_ConstantMap$from(queryParameterLists, type$.String, type$.List_String);
    },
    _isPort$1(port) {
      var portDigitStart = this._portStart + 1;
      return portDigitStart + port.length === this._pathStart && B.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    removeFragment$0() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new A._SimpleUri(B.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    replace$1$queryParameters(_, queryParameters) {
      var scheme, isFile, t1, userInfo, port, host, path, t2, query, fragment, _this = this, _null = null;
      type$.nullable_Map_String_dynamic._as(queryParameters);
      scheme = _this.get$scheme();
      isFile = scheme === "file";
      t1 = _this._hostStart;
      userInfo = t1 > 0 ? B.JSString_methods.substring$2(_this._uri, _this._schemeEnd + 3, t1) : "";
      port = _this.get$hasPort() ? _this.get$port() : _null;
      t1 = _this._hostStart;
      if (t1 > 0)
        host = B.JSString_methods.substring$2(_this._uri, t1, _this._portStart);
      else
        host = userInfo.length !== 0 || port != null || isFile ? "" : _null;
      t1 = _this._uri;
      path = B.JSString_methods.substring$2(t1, _this._pathStart, _this._queryStart);
      if (!isFile)
        t2 = host != null && path.length !== 0;
      else
        t2 = true;
      if (t2 && !B.JSString_methods.startsWith$1(path, "/"))
        path = "/" + path;
      query = A._Uri__makeQuery(_null, 0, 0, queryParameters);
      t2 = _this._fragmentStart;
      fragment = t2 < t1.length ? B.JSString_methods.substring$1(t1, t2 + 1) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragment);
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference, 0, null));
    },
    resolveUri$1(reference) {
      if (reference instanceof A._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2(base, ref) {
      var t2, t3, t4, isSimple, delta, refStart, basePathStart, packageNameEnd, basePathStart0, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        t4 = t3 === 4;
        if (t4 && B.JSString_methods.startsWith$1(base._uri, "file"))
          isSimple = ref._pathStart !== ref._queryStart;
        else if (t4 && B.JSString_methods.startsWith$1(base._uri, "http"))
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !(t3 === 5 && B.JSString_methods.startsWith$1(base._uri, "https")) || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, delta) + B.JSString_methods.substring$1(ref._uri, t1 + 1), t3, t2 + delta, ref._portStart + delta, ref._pathStart + delta, ref._queryStart + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart === t1) {
        t2 = ref._fragmentStart;
        if (t1 < t2) {
          t3 = base._queryStart;
          delta = t3 - t1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (B.JSString_methods.startsWith$2(t2, "/", refStart)) {
        basePathStart = base._pathStart;
        packageNameEnd = A._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        delta = basePathStart0 - refStart;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, basePathStart0) + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, basePathStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart === baseEnd && base._hostStart > 0) {
        for (; B.JSString_methods.startsWith$2(t2, "../", refStart);)
          refStart += 3;
        delta = baseStart - refStart + 1;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      packageNameEnd = A._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0)
        baseStart0 = packageNameEnd;
      else
        for (baseStart0 = baseStart; B.JSString_methods.startsWith$2(baseUri, "../", baseStart0);)
          baseStart0 += 3;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (!(refStart0 <= t1 && B.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (insert = ""; baseEnd > baseStart0;) {
        --baseEnd;
        if (B.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !B.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new A._SimpleUri(B.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0() {
      var t2, t3, _this = this,
        t1 = _this._schemeEnd;
      if (t1 >= 0) {
        t2 = !(t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "file"));
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + _this.get$scheme() + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw A.wrapException(A.UnsupportedError$(string$.Cannotefq));
        throw A.wrapException(A.UnsupportedError$(string$.Cannoteff));
      }
      t3 = $.$get$_Uri__isWindowsCached();
      if (A.boolConversionCheck(t3))
        t1 = A._Uri__toWindowsFilePath(_this);
      else {
        if (_this._hostStart < _this._portStart)
          A.throwExpression(A.UnsupportedError$(string$.Cannoten));
        t1 = B.JSString_methods.substring$2(t2, _this._pathStart, t1);
      }
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = B.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    _toNonSimple$0() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host() : _null,
        t4 = _this.get$hasPort() ? _this.get$port() : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = B.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      t6 = t6 < t8 ? _this.get$query() : _null;
      return A._Uri$_internal(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment(_this) : _null);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  A._DataUri.prototype = {};
  A.JsObject__convertDataTree__convert.prototype = {
    call$1(o) {
      var convertedMap, key, convertedList,
        t1 = this._convertedObjects;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      if (type$.Map_dynamic_dynamic._is(o)) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = o.get$keys(o), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(o.$index(0, key));
        }
        return convertedMap;
      } else if (type$.Iterable_dynamic._is(o)) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        B.JSArray_methods.addAll$1(convertedList, J.map$1$1$ax(o, this, type$.dynamic));
        return convertedList;
      } else
        return A._convertToJS(o);
    },
    $signature: 32
  };
  A._convertToJS_closure.prototype = {
    call$1(o) {
      var jsFunction;
      type$.Function._as(o);
      jsFunction = function(_call, f, captureThis) {
        return function() {
          return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunction, o, false);
      A._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    },
    $signature: 6
  };
  A._convertToJS_closure0.prototype = {
    call$1(o) {
      return new this.ctor(o);
    },
    $signature: 6
  };
  A._wrapToDart_closure.prototype = {
    call$1(o) {
      return new A.JsFunction(o == null ? type$.Object._as(o) : o);
    },
    $signature: 33
  };
  A._wrapToDart_closure0.prototype = {
    call$1(o) {
      var t1 = o == null ? type$.Object._as(o) : o;
      return new A.JsArray(t1, type$.JsArray_dynamic);
    },
    $signature: 34
  };
  A._wrapToDart_closure1.prototype = {
    call$1(o) {
      return new A.JsObject(o == null ? type$.Object._as(o) : o);
    },
    $signature: 35
  };
  A.JsObject.prototype = {
    $index(_, property) {
      type$.Object._as(property);
      if (typeof property != "string" && typeof property != "number")
        throw A.wrapException(A.ArgumentError$("property is not a String or num", null));
      return A._convertToDart(this._js$_jsObject[property]);
    },
    $indexSet(_, property, value) {
      type$.Object._as(property);
      if (typeof property != "string" && typeof property != "number")
        throw A.wrapException(A.ArgumentError$("property is not a String or num", null));
      this._js$_jsObject[property] = A._convertToJS(value);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.JsObject && this._js$_jsObject === other._js$_jsObject;
    },
    toString$0(_) {
      var t1, exception;
      try {
        t1 = String(this._js$_jsObject);
        return t1;
      } catch (exception) {
        t1 = this.super$Object$toString(0);
        return t1;
      }
    },
    callMethod$2(method, args) {
      var t2,
        t1 = this._js$_jsObject;
      if (args == null)
        t2 = null;
      else {
        t2 = A._arrayInstanceType(args);
        t2 = A.List_List$from(new A.MappedListIterable(args, t2._eval$1("@(1)")._as(A.js___convertToJS$closure()), t2._eval$1("MappedListIterable<1,@>")), true, type$.dynamic);
      }
      return A._convertToDart(t1[method].apply(t1, t2));
    },
    get$hashCode(_) {
      return 0;
    }
  };
  A.JsFunction.prototype = {};
  A.JsArray.prototype = {
    _checkIndex$1(index) {
      var _this = this,
        t1 = index < 0 || index >= _this.get$length(_this);
      if (t1)
        throw A.wrapException(A.RangeError$range(index, 0, _this.get$length(_this), null, null));
    },
    $index(_, index) {
      type$.Object._as(index);
      if (A._isInt(index))
        this._checkIndex$1(index);
      return this.$ti._precomputed1._as(this.super$JsObject$$index(0, index));
    },
    $indexSet(_, index, value) {
      type$.Object._as(index);
      if (A._isInt(index))
        this._checkIndex$1(index);
      this.super$_JsArray_JsObject_ListMixin$$indexSet(0, index, value);
    },
    get$length(_) {
      var len = this._js$_jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw A.wrapException(A.StateError$("Bad JsArray length"));
    },
    set$length(_, $length) {
      this.super$_JsArray_JsObject_ListMixin$$indexSet(0, "length", $length);
    },
    add$1(_, value) {
      this.callMethod$2("push", [this.$ti._precomputed1._as(value)]);
    },
    sort$1(_, compare) {
      this.$ti._eval$1("int(1,1)?")._as(compare);
      this.callMethod$2("sort", compare == null ? [] : [compare]);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._JsArray_JsObject_ListMixin.prototype = {
    $indexSet(_, property, value) {
      return this.super$JsObject$$indexSet(0, type$.Object._as(property), value);
    }
  };
  A._convertDataTree__convert.prototype = {
    call$1(o) {
      var convertedMap, key, convertedList,
        t1 = this._convertedObjects;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      if (type$.Map_dynamic_dynamic._is(o)) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = o.get$keys(o), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(o.$index(0, key));
        }
        return convertedMap;
      } else if (type$.Iterable_dynamic._is(o)) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        B.JSArray_methods.addAll$1(convertedList, J.map$1$1$ax(o, this, type$.dynamic));
        return convertedList;
      } else
        return o;
    },
    $signature: 19
  };
  A.promiseToFuture_closure.prototype = {
    call$1(r) {
      return this.completer.complete$1(this.T._eval$1("0/?")._as(r));
    },
    $signature: 2
  };
  A.promiseToFuture_closure0.prototype = {
    call$1(e) {
      if (e == null)
        return this.completer.completeError$1(new A.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 2
  };
  A.NullRejectionException.prototype = {
    toString$0(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    },
    $isException: 1
  };
  A.Endian.prototype = {};
  A.CanonicalizedMap.prototype = {
    $index(_, key) {
      var pair, _this = this;
      if (!_this._isValidKey$1(key))
        return null;
      pair = _this._base.$index(0, _this._canonicalize.call$1(_this.$ti._eval$1("CanonicalizedMap.K")._as(key)));
      return pair == null ? null : pair.value;
    },
    $indexSet(_, key, value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("CanonicalizedMap.K")._as(key);
      t2 = t1._eval$1("CanonicalizedMap.V");
      t2._as(value);
      if (!_this._isValidKey$1(key))
        return;
      _this._base.$indexSet(0, _this._canonicalize.call$1(key), new A.MapEntry(key, value, t1._eval$1("@<CanonicalizedMap.K>")._bind$1(t2)._eval$1("MapEntry<1,2>")));
    },
    addAll$1(_, other) {
      this.$ti._eval$1("Map<CanonicalizedMap.K,CanonicalizedMap.V>")._as(other).forEach$1(0, new A.CanonicalizedMap_addAll_closure(this));
    },
    containsKey$1(key) {
      var _this = this;
      if (!_this._isValidKey$1(key))
        return false;
      return _this._base.containsKey$1(_this._canonicalize.call$1(_this.$ti._eval$1("CanonicalizedMap.K")._as(key)));
    },
    forEach$1(_, f) {
      this._base.forEach$1(0, new A.CanonicalizedMap_forEach_closure(this, this.$ti._eval$1("~(CanonicalizedMap.K,CanonicalizedMap.V)")._as(f)));
    },
    get$isEmpty(_) {
      return this._base.__js_helper$_length === 0;
    },
    get$keys(_) {
      var t2, t3,
        t1 = this._base;
      t1 = t1.get$values(t1);
      t2 = this.$ti._eval$1("CanonicalizedMap.K");
      t3 = A._instanceType(t1);
      return A.MappedIterable_MappedIterable(t1, t3._bind$1(t2)._eval$1("1(Iterable.E)")._as(new A.CanonicalizedMap_keys_closure(this)), t3._eval$1("Iterable.E"), t2);
    },
    get$length(_) {
      return this._base.__js_helper$_length;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _isValidKey$1(key) {
      var t1;
      if (this.$ti._eval$1("CanonicalizedMap.K")._is(key))
        t1 = true;
      else
        t1 = false;
      return t1;
    },
    $isMap: 1
  };
  A.CanonicalizedMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t2._eval$1("CanonicalizedMap.K")._as(key);
      t2._eval$1("CanonicalizedMap.V")._as(value);
      t1.$indexSet(0, key, value);
      return value;
    },
    $signature() {
      return this.$this.$ti._eval$1("~(CanonicalizedMap.K,CanonicalizedMap.V)");
    }
  };
  A.CanonicalizedMap_forEach_closure.prototype = {
    call$2(key, pair) {
      var t1 = this.$this.$ti;
      t1._eval$1("CanonicalizedMap.C")._as(key);
      t1._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair);
      return this.f.call$2(pair.key, pair.value);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.CanonicalizedMap_keys_closure.prototype = {
    call$1(pair) {
      return this.$this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair).key;
    },
    $signature() {
      return this.$this.$ti._eval$1("CanonicalizedMap.K(MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.Digest.prototype = {
    $eq(_, other) {
      var a, b, n, t1, mismatch, i, t2;
      if (other == null)
        return false;
      if (other instanceof A.Digest) {
        a = this.bytes;
        b = other.bytes;
        n = a.length;
        t1 = b.length;
        if (n !== t1)
          return false;
        for (mismatch = 0, i = 0; i < n; ++i) {
          t2 = a[i];
          if (!(i < t1))
            return A.ioore(b, i);
          mismatch |= t2 ^ b[i];
        }
        return mismatch === 0;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(this.bytes);
    },
    toString$0(_) {
      return A._hexEncode(this.bytes);
    }
  };
  A.DigestSink.prototype = {
    add$1(_, value) {
      if (this._digest_sink$_value != null)
        throw A.wrapException(A.StateError$("add may only be called once."));
      this._digest_sink$_value = value;
    },
    close$0() {
      if (this._digest_sink$_value == null)
        throw A.wrapException(A.StateError$("add must be called once."));
    }
  };
  A.Hash.prototype = {
    convert$1(input) {
      var innerSink, t1;
      type$.List_int._as(input);
      innerSink = new A.DigestSink();
      t1 = A._Sha1Sink$(type$.Sink_Digest._as(innerSink));
      t1.add$1(0, input);
      t1.close$0();
      t1 = innerSink._digest_sink$_value;
      t1.toString;
      return t1;
    }
  };
  A.HashSink.prototype = {
    add$1(_, data) {
      var _this = this;
      type$.List_int._as(data);
      if (_this._hash_sink$_isClosed)
        throw A.wrapException(A.StateError$("Hash.add() called after close()."));
      _this._lengthInBytes = _this._lengthInBytes + J.get$length$asx(data);
      _this._pendingData.addAll$1(0, data);
      _this._iterate$0();
    },
    close$0() {
      var t1, _this = this;
      if (_this._hash_sink$_isClosed)
        return;
      _this._hash_sink$_isClosed = true;
      _this._finalizeData$0();
      _this._iterate$0();
      t1 = _this._hash_sink$_sink;
      t1.add$1(0, new A.Digest(_this._byteDigest$0()));
      t1.close$0();
    },
    _byteDigest$0() {
      var cachedDigest, t1, byteDigest, byteData, i;
      if (B.C_Endian === $.$get$Endian_host())
        return A.NativeUint8List_NativeUint8List$view(this.digest.buffer, 0, null);
      cachedDigest = this.digest;
      t1 = cachedDigest.byteLength;
      byteDigest = new Uint8Array(t1);
      byteData = A.NativeByteData_NativeByteData$view(byteDigest.buffer, 0, null);
      for (i = 0; i < 5; ++i)
        B.NativeByteData_methods._setUint32$3(byteData, i * 4, cachedDigest[i], false);
      return byteDigest;
    },
    _iterate$0() {
      var t3, i, j,
        t1 = this._pendingData,
        pendingDataBytes = A.NativeByteData_NativeByteData$view(t1._typed_buffer$_buffer.buffer, 0, null),
        t2 = this._currentChunk,
        pendingDataChunks = B.JSInt_methods.$tdiv(t1._typed_buffer$_length, t2.byteLength);
      for (t3 = t2.length, i = 0; i < pendingDataChunks; ++i) {
        for (j = 0; j < t3; ++j)
          t2[j] = B.NativeByteData_methods._getUint32$2(pendingDataBytes, i * t2.byteLength + j * 4, false);
        this.updateHash$1(t2);
      }
      t2 = pendingDataChunks * t2.byteLength;
      A.RangeError_checkValidRange(0, t2, t1.get$length(t1));
      if (t2 > 0)
        t1._closeGap$2(t1, 0, t2);
    },
    _finalizeData$0() {
      var contentsLength, t3, i, lengthInBits, offset, byteData, _this = this,
        t1 = _this._pendingData,
        t2 = A._instanceType(t1)._eval$1("TypedDataBuffer.E");
      t1._typed_buffer$_add$1(t2._as(128));
      contentsLength = _this._lengthInBytes + 1 + 8;
      t3 = _this._currentChunk.byteLength;
      for (t3 = ((contentsLength + t3 - 1 & -t3) >>> 0) - contentsLength, i = 0; i < t3; ++i)
        t1._typed_buffer$_add$1(t2._as(0));
      t2 = _this._lengthInBytes;
      if (t2 > 1125899906842623)
        throw A.wrapException(A.UnsupportedError$("Hashing is unsupported for messages with more than 2^53 bits."));
      lengthInBits = t2 * 8;
      offset = t1._typed_buffer$_length;
      t1.addAll$1(0, new Uint8Array(8));
      byteData = A.NativeByteData_NativeByteData$view(t1._typed_buffer$_buffer.buffer, 0, null);
      B.NativeByteData_methods._setUint32$3(byteData, offset, B.JSInt_methods._tdivFast$1(lengthInBits, 4294967296), false);
      B.NativeByteData_methods._setUint32$3(byteData, offset + 4, lengthInBits >>> 0, false);
    },
    $isSink: 1
  };
  A.Hmac.prototype = {
    convert$1(input) {
      var innerSink, outerSink, t1;
      type$.List_int._as(input);
      innerSink = new A.DigestSink();
      outerSink = A._HmacSink$(type$.Sink_Digest._as(innerSink), this._hash, this._key);
      outerSink.add$1(0, input);
      outerSink.close$0();
      t1 = innerSink._digest_sink$_value;
      t1.toString;
      return t1;
    }
  };
  A._HmacSink.prototype = {
    _HmacSink$3(sink, hash, key) {
      var t2, padding, i, t3, _this = this,
        t1 = new A._ByteAdapterSink(A._Sha1Sink$(type$.Sink_Digest._as(_this._innerResultSink)));
      _this.___HmacSink__innerSink_F !== $ && A.throwLateFieldAI("_innerSink");
      _this.___HmacSink__innerSink_F = t1;
      t2 = key.length;
      padding = new Uint8Array(t2);
      for (i = 0; i < t2; ++i) {
        t3 = key[i];
        if (!(i < t2))
          return A.ioore(padding, i);
        padding[i] = 92 ^ t3;
      }
      type$.List_int._as(padding);
      _this._outerSink._sink.add$1(0, padding);
      for (i = 0; i < t2; ++i) {
        t3 = key[i];
        if (!(i < t2))
          return A.ioore(padding, i);
        padding[i] = 54 ^ t3;
      }
      t1._sink.add$1(0, padding);
    },
    add$1(_, data) {
      var t1;
      type$.List_int._as(data);
      if (this._isClosed)
        throw A.wrapException(A.StateError$("HMAC is closed"));
      t1 = this.___HmacSink__innerSink_F;
      t1 === $ && A.throwLateFieldNI("_innerSink");
      t1._sink.add$1(0, data);
    },
    close$0() {
      var t1, _this = this;
      if (_this._isClosed)
        return;
      _this._isClosed = true;
      t1 = _this.___HmacSink__innerSink_F;
      t1 === $ && A.throwLateFieldNI("_innerSink");
      t1._sink.close$0();
      t1 = _this._outerSink._sink;
      t1.add$1(0, type$.List_int._as(_this._innerResultSink._digest_sink$_value.bytes));
      t1.close$0();
    }
  };
  A._Sha1.prototype = {};
  A._Sha1Sink.prototype = {
    updateHash$1(chunk) {
      var t2, t3, i, t4, newA, c0,
        t1 = this.digest,
        a = t1[0],
        b = t1[1],
        c = t1[2],
        d = t1[3],
        e = t1[4];
      for (t2 = this._extended, t3 = chunk.length, i = 0; i < 80; ++i, e = d, d = c, c = c0, b = a, a = newA) {
        if (i < 16) {
          if (!(i < t3))
            return A.ioore(chunk, i);
          t2[i] = chunk[i];
        } else {
          t4 = t2[i - 3] ^ t2[i - 8] ^ t2[i - 14] ^ t2[i - 16];
          t2[i] = (t4 << 1 | t4 >>> 31) >>> 0;
        }
        newA = (((a << 5 | a >>> 27) >>> 0) + e >>> 0) + t2[i] >>> 0;
        if (i < 20)
          newA = (newA + ((b & c | ~b & d) >>> 0) >>> 0) + 1518500249 >>> 0;
        else if (i < 40)
          newA = (newA + ((b ^ c ^ d) >>> 0) >>> 0) + 1859775393 >>> 0;
        else
          newA = i < 60 ? (newA + ((b & c | b & d | c & d) >>> 0) >>> 0) + 2400959708 >>> 0 : (newA + ((b ^ c ^ d) >>> 0) >>> 0) + 3395469782 >>> 0;
        c0 = (b << 30 | b >>> 2) >>> 0;
      }
      t1[0] = a + t1[0] >>> 0;
      t1[1] = b + t1[1] >>> 0;
      t1[2] = c + t1[2] >>> 0;
      t1[3] = d + t1[3] >>> 0;
      t1[4] = e + t1[4] >>> 0;
    }
  };
  A.Env.prototype = {};
  A.DirEntry.prototype = {};
  A.ReadFileOptions.prototype = {};
  A.EdgeHttpClient.prototype = {
    delete$4$body$encoding$headers(url, body, encoding, headers) {
      type$.nullable_Map_String_String._as(headers);
      return this._makeRequest$5$body$encoding$headers$method$url(body, B.C_Utf8Codec, headers, "DELETE", url);
    },
    delete$1(url) {
      return this.delete$4$body$encoding$headers(url, null, null, null);
    },
    delete$2$headers(url, headers) {
      return this.delete$4$body$encoding$headers(url, null, null, headers);
    },
    delete$3$body$headers(url, body, headers) {
      return this.delete$4$body$encoding$headers(url, body, null, headers);
    },
    $get$2$headers(url, headers) {
      return this.$get$body$EdgeHttpClient(url, type$.nullable_Map_String_String._as(headers));
    },
    $get$1(url) {
      return this.$get$2$headers(url, null);
    },
    $get$body$EdgeHttpClient(url, headers) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this;
      var $async$$get$2$headers = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self._makeRequest$3$headers$method$url(headers, "GET", url);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$$get$2$headers, $async$completer);
    },
    head$2$headers(url, headers) {
      return this._makeRequest$3$headers$method$url(type$.nullable_Map_String_String._as(headers), "HEAD", url);
    },
    head$1(url) {
      return this.head$2$headers(url, null);
    },
    patch$4$body$encoding$headers(url, body, encoding, headers) {
      type$.nullable_Map_String_String._as(headers);
      return this._makeRequest$5$body$encoding$headers$method$url(body, B.C_Utf8Codec, headers, "PATCH", url);
    },
    patch$1(url) {
      return this.patch$4$body$encoding$headers(url, null, null, null);
    },
    patch$2$headers(url, headers) {
      return this.patch$4$body$encoding$headers(url, null, null, headers);
    },
    patch$3$body$headers(url, body, headers) {
      return this.patch$4$body$encoding$headers(url, body, null, headers);
    },
    post$4$body$encoding$headers(url, body, encoding, headers) {
      type$.nullable_Map_String_String._as(headers);
      return this._makeRequest$5$body$encoding$headers$method$url(body, B.C_Utf8Codec, headers, "POST", url);
    },
    post$1(url) {
      return this.post$4$body$encoding$headers(url, null, null, null);
    },
    post$2$headers(url, headers) {
      return this.post$4$body$encoding$headers(url, null, null, headers);
    },
    post$3$body$headers(url, body, headers) {
      return this.post$4$body$encoding$headers(url, body, null, headers);
    },
    put$4$body$encoding$headers(url, body, encoding, headers) {
      type$.nullable_Map_String_String._as(headers);
      return this._makeRequest$5$body$encoding$headers$method$url(body, B.C_Utf8Codec, headers, "PUT", url);
    },
    put$1(url) {
      return this.put$4$body$encoding$headers(url, null, null, null);
    },
    put$2$headers(url, headers) {
      return this.put$4$body$encoding$headers(url, null, null, headers);
    },
    put$3$body$headers(url, body, headers) {
      return this.put$4$body$encoding$headers(url, body, null, headers);
    },
    send$1(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.StreamedResponse),
        $async$returnValue, $async$self = this, t3, t4, t5, t6, t7, t8, _name, body, bytes, res, resHeaders, t1, t2, req;
      var $async$send$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = request.method;
              t2 = type$.JavaScriptObject;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$value(A.HttpClientRequest$_(t1, new A.UriValue(request.url), new A.AbortController(t2._as(new self.AbortController())), $async$self._ioClient._pendingRequests), type$.HttpClientRequest), $async$send$1);
            case 3:
              // returning from await.
              req = $async$result;
              for (t3 = request.headers.get$entries(), t3 = t3.get$iterator(t3), t4 = req.headers, t5 = type$.Object, t6 = type$.String; t3.moveNext$0();) {
                t7 = t3.get$current();
                t8 = t7.key;
                t7 = t7.value;
                A._asString(t8);
                t5._as(t7);
                _name = t8.toLowerCase();
                t8 = t4._io_http_client$_headers;
                if (t8.$index(0, _name) == null)
                  t8.$indexSet(0, _name, A.LinkedHashSet_LinkedHashSet$_empty(t6));
                t8.$index(0, _name).add$1(0, t7);
              }
              body = request.finalize$0();
              $async$goto = B.Set_07W59._map.containsKey$1(t1) ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return A._asyncAwait(body.toBytes$0(), $async$send$1);
            case 6:
              // returning from await.
              bytes = $async$result;
              t4.$set$2("content-length", bytes.length);
              req.add$1(0, bytes);
            case 5:
              // join
              $async$goto = 7;
              return A._asyncAwait(req.close$0(), $async$send$1);
            case 7:
              // returning from await.
              res = $async$result;
              resHeaders = A.LinkedHashMap_LinkedHashMap$_empty(t6, t6);
              t1 = res.__HttpClientResponse_headers_F;
              t1 === $ && A.throwLateFieldNI("headers");
              t1.forEach$1(0, new A.EdgeHttpClient_send_closure(resHeaders));
              t1 = res._response._delegate;
              t3 = A._asInt(t1.status);
              t4 = res.__HttpClientResponse_contentLength_F;
              t4 === $ && A.throwLateFieldNI("contentLength");
              if (t4 === -1)
                t4 = null;
              t5 = A._asBool(t1.redirected);
              t2 = A._asStringQ(t2._as(t1.headers).get("connection")) === "keep-alive";
              t1 = A._asString(t1.statusText);
              t6 = new A.StreamedResponse(A.toByteStream(res), request, t3, t1, t4, resHeaders, t5, t2);
              t6.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t3, t4, resHeaders, t5, t2, t1, request);
              $async$returnValue = t6;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$send$1, $async$completer);
    },
    _makeRequest$5$body$encoding$headers$method$url(body, encoding, headers, method, url) {
      return this._makeRequest$body$EdgeHttpClient(body, encoding, type$.nullable_Map_String_String._as(headers), method, url);
    },
    _makeRequest$3$headers$method$url(headers, method, url) {
      return this._makeRequest$5$body$encoding$headers$method$url(null, B.C_Utf8Codec, headers, method, url);
    },
    _makeRequest$body$EdgeHttpClient(body, encoding, headers, method, url) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, req, t1, $async$temp1;
      var $async$_makeRequest$5$body$encoding$headers$method$url = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (body == null) {
                req = A.Request$(method, url);
                req.headers.addAll$1(0, headers);
              } else {
                req = A.StreamedRequest$(method, url);
                req.headers.addAll$1(0, headers);
                t1 = req._streamed_request$_controller;
                t1 = type$.Sink_List_int._as(new A._StreamSinkWrapper(t1, A._instanceType(t1)._eval$1("_StreamSinkWrapper<1>")));
                t1 = new A._Utf8EncoderSink(new A._ByteAdapterSink(t1), new Uint8Array(1024));
                t1.addSlice$4(body, 0, body.length, false);
                t1.close$0();
              }
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait($async$self.send$1(req), $async$_makeRequest$5$body$encoding$headers$method$url);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.Response_fromStream($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_makeRequest$5$body$encoding$headers$method$url, $async$completer);
    },
    $isClient: 1
  };
  A.EdgeHttpClient_send_closure.prototype = {
    call$2(key, values) {
      this.resHeaders.$indexSet(0, key, B.JSArray_methods.join$1(type$.List_String._as(values), ","));
    },
    $signature: 39
  };
  A.AbortController.prototype = {};
  A.AbortSignal.prototype = {};
  A.Headers.prototype = {
    $indexSet(_, $name, value) {
      this._headers$_delegate.set(A._asString($name), A._asString(value));
    },
    $index(_, $name) {
      return A._asStringQ(this._headers$_delegate.get(A._asString($name)));
    }
  };
  A.Headers0.prototype = {};
  A.HeadersProps_get_entries_closure.prototype = {
    call$1(e) {
      return type$.List_String._as(J.cast$1$0$ax(e, type$.String));
    },
    $signature: 40
  };
  A.Symbol1.prototype = {};
  A.Iterator0.prototype = {};
  A.AsyncIterator.prototype = {};
  A.IteratorResult.prototype = {};
  A.Promise.prototype = {};
  A.futureToPromise_closure.prototype = {
    call$2(resolve, reject) {
      this.future.then$1$2$onError(0, this.T._eval$1("~(0)")._as(resolve), type$.Function._as(reject), type$.void);
    },
    $signature() {
      return this.T._eval$1("~(~(0),Function)");
    }
  };
  A.ReadableStream.prototype = {};
  A.ReadResult.prototype = {};
  A.ReadableStreamDefaultReader.prototype = {};
  A.JavaScriptObject0.prototype = {};
  A.HttpClient.prototype = {};
  A.HttpClientRequest.prototype = {
    HttpClientRequest$_$4(method, _resource, _abortController, pendingRequests) {
      var t2, _this = this, _s4_ = "host",
        t1 = A.Resource_getUri(_this._resource);
      _this.__HttpClientRequest_uri_F !== $ && A.throwLateFieldAI("uri");
      _this.__HttpClientRequest_uri_F = t1;
      pendingRequests.add$1(0, _this);
      _this._doneCompleter.future.whenComplete$1(new A.HttpClientRequest$__closure(_this, pendingRequests));
      t2 = _this.headers;
      t2.$set$2(_s4_, t1.get$host());
      t1 = t1.get$port();
      t2.$set$2(_s4_, A.S(t2.value$1(_s4_)) + ":" + t1);
    },
    abort$2(_, exception, stackTrace) {
      var t1 = this._abortController._abort$_delegate,
        t2 = A.jsify(exception);
      t1.abort.apply(t1, [t2]);
      this._doneCompleter.completeError$2(exception, stackTrace);
    },
    add$1(_, data) {
      var t1, _this = this;
      type$.List_int._as(data);
      if (_this._io_http_client$_body == null)
        _this.set$_io_http_client$_body(A._setArrayType([], type$.JSArray_int));
      t1 = _this._io_http_client$_body;
      t1.toString;
      B.JSArray_methods.addAll$1(t1, data);
      _this.headers.$set$2("content-length", _this._io_http_client$_body.length);
    },
    addError$2(error, stackTrace) {
      this.abort$2(0, error, stackTrace);
      this._doneCompleter.completeError$2(error, stackTrace);
    },
    close$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HttpClientResponse),
        $async$returnValue, $async$self = this, t2, t3, fetchResponse, response, body, contentLengthHeader, t1;
      var $async$close$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._io_http_client$_body;
              t1 = t1 != null ? new Uint8Array(A._ensureNativeList(t1)) : null;
              t2 = $async$self.headers.toMap$0();
              t3 = type$.JavaScriptObject;
              $async$goto = 3;
              return A._asyncAwait(A.fetch($async$self._resource, t1, new A.Headers(t3._as(new self.Headers(A.jsify(t2)))), $async$self.method, new A.AbortSignal(t3._as($async$self._abortController._abort$_delegate.signal))), $async$close$0);
            case 3:
              // returning from await.
              fetchResponse = $async$result;
              response = new A.HttpClientResponse(fetchResponse);
              t2 = fetchResponse._delegate;
              t1 = A.HttpHeaders_HttpHeaders$fromFetchResponseHeaders(new A.Headers(t3._as(t2.headers)));
              response.__HttpClientResponse_headers_F = t1;
              body = type$.nullable_JavaScriptObject._as(t2.body);
              t2 = body == null ? null : A.streamFromJSReader(t3._as(body.getReader()));
              if (t2 == null)
                t2 = new A._EmptyStream(type$._EmptyStream_List_int);
              response.set$__HttpClientResponse__body_F(type$.Stream_List_int._as(t2));
              contentLengthHeader = t1.value$1("content-length");
              t1 = A.int_parse(contentLengthHeader == null ? "-1" : contentLengthHeader, null);
              response.__HttpClientResponse_contentLength_F !== $ && A.throwLateFieldAI("contentLength");
              response.__HttpClientResponse_contentLength_F = t1;
              $async$self._doneCompleter.complete$1(response);
              $async$returnValue = response;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$close$0, $async$completer);
    },
    set$_io_http_client$_body(_body) {
      this._io_http_client$_body = type$.nullable_List_int._as(_body);
    },
    $isHttpClientRequest0: 1,
    $isEventSink: 1,
    $isSink: 1,
    $isStringSink: 1
  };
  A.HttpClientRequest$__closure.prototype = {
    call$0() {
      return this.pendingRequests.remove$1(0, this.$this);
    },
    $signature: 21
  };
  A.HttpHeaders.prototype = {
    $index(_, $name) {
      var t1 = this._io_http_client$_headers.$index(0, A._asString($name));
      return t1 == null ? null : A.List_List$of(t1, true, A._instanceType(t1)._precomputed1);
    },
    forEach$1(_, action) {
      this._io_http_client$_headers.forEach$1(0, new A.HttpHeaders_forEach_closure(type$.void_Function_2_String_and_List_String._as(action)));
    },
    $set$2($name, value) {
      this._io_http_client$_headers.$indexSet(0, $name.toLowerCase(), A.LinkedHashSet_LinkedHashSet$_literal([J.toString$0$(value)], type$.String));
    },
    value$1($name) {
      var t1 = this._io_http_client$_headers;
      if (t1.$index(0, $name) == null)
        return null;
      if (t1.$index(0, $name)._collection$_length > 1)
        throw A.wrapException(A.StateError$("More than one value for header " + $name));
      t1 = t1.$index(0, $name);
      return t1 == null ? null : t1.get$first(t1);
    },
    toMap$0() {
      var t1 = type$.String,
        map = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      this._io_http_client$_headers.forEach$1(0, new A.HttpHeaders_toMap_closure(map));
      return map;
    },
    $isHttpHeaders0: 1
  };
  A.HttpHeaders_HttpHeaders$fromFetchResponseHeaders_closure.prototype = {
    call$2(key, value) {
      this.ioHeaders.$set$2(A._asString(key), A._asString(value));
    },
    $signature: 8
  };
  A.HttpHeaders_forEach_closure.prototype = {
    call$2(key, value) {
      this.action.call$2(A._asString(key), type$.Set_String._as(value).toList$0(0));
    },
    $signature: 22
  };
  A.HttpHeaders_toMap_closure.prototype = {
    call$2(key, value) {
      this.map.$indexSet(0, A._asString(key), type$.Set_String._as(value).join$1(0, ","));
    },
    $signature: 22
  };
  A.HttpClientResponse.prototype = {
    cast$1$0(_, $R) {
      var t1 = this.__HttpClientResponse__body_F;
      t1 === $ && A.throwLateFieldNI("_body");
      return new A.CastStream(t1, A._instanceType(t1)._eval$1("@<Stream.T>")._bind$1($R)._eval$1("CastStream<1,2>"));
    },
    get$first(_) {
      var t1 = this.__HttpClientResponse__body_F;
      t1 === $ && A.throwLateFieldNI("_body");
      return t1.get$first(t1);
    },
    get$isBroadcast() {
      var t1 = this.__HttpClientResponse__body_F;
      t1 === $ && A.throwLateFieldNI("_body");
      return t1.get$isBroadcast();
    },
    get$length(_) {
      var t1 = this.__HttpClientResponse__body_F;
      t1 === $ && A.throwLateFieldNI("_body");
      return t1.get$length(t1);
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1;
      type$.nullable_void_Function_List_int._as(onData);
      type$.nullable_void_Function._as(onDone);
      t1 = this.__HttpClientResponse__body_F;
      t1 === $ && A.throwLateFieldNI("_body");
      return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    set$__HttpClientResponse__body_F(__HttpClientResponse__body_F) {
      this.__HttpClientResponse__body_F = type$.Stream_List_int._as(__HttpClientResponse__body_F);
    },
    $isHttpClientResponse0: 1,
    $isStream: 1
  };
  A.Request.prototype = {
    json$0(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Object),
        $async$returnValue, $async$self = this, $async$temp1;
      var $async$json$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(type$.Object._as($async$self._request$_delegate.json()), type$.dynamic), $async$json$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.dartify($async$result, type$.nullable_Object);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$json$0, $async$completer);
    }
  };
  A.UriValue.prototype = {$isResource: 1};
  A.Response.prototype = {};
  A.QueueTweetModelEdge.prototype = {
    toJson$0() {
      var _this = this,
        t1 = _this.media,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,@>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["id", _this.id, "content", _this.content, "media", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("@(1)")._as(new A.QueueTweetModelEdge_toJson_closure()), t3), true, t3._eval$1("ListIterable.E")), "polls", _this.polls, "media_ids", _this.mediaIds, "created_at", _this.createdAt], type$.String, type$.Object);
    }
  };
  A.QueueTweetModelEdge_toJson_closure.prototype = {
    call$1(e) {
      return type$.QueueMedia._as(e).toJson$0();
    },
    $signature: 44
  };
  A.QueueMedia.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["media_id", _this.mediaId, "url", _this.url, "type", _this.type, "name", _this.name, "extension_name", _this.extensionName], type$.String, type$.nullable_String);
    }
  };
  A.Signature.prototype = {
    signatureDate$0() {
      var baseParams,
        uri = A.Uri_parse(this.url, 0, null),
        encodedParams = this.encodeParams$2(uri, this.params),
        t1 = A._instanceType(encodedParams)._eval$1("LinkedHashMapKeyIterable<1>"),
        sortedEncodedKeys = A.List_List$of(new A.LinkedHashMapKeyIterable(encodedParams, t1), true, t1._eval$1("Iterable.E"));
      B.JSArray_methods.sort$0(sortedEncodedKeys);
      t1 = A._arrayInstanceType(sortedEncodedKeys);
      baseParams = new A.MappedListIterable(sortedEncodedKeys, t1._eval$1("String(1)")._as(new A.Signature_signatureDate_closure(encodedParams)), t1._eval$1("MappedListIterable<1,String>")).join$1(0, "&");
      t1 = "" + "POST".toUpperCase() + "&" + A._Uri__uriEncode(B.List_KIf, uri.get$origin() + uri.get$path(), B.C_Utf8Codec, false) + "&" + A._Uri__uriEncode(B.List_KIf, baseParams, B.C_Utf8Codec, false);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    encodeParams$2(uri, params) {
      var t1 = type$.String,
        encodedParams = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      type$.Map_String_dynamic._as(params).forEach$1(0, new A.Signature_encodeParams_closure(encodedParams));
      uri.get$queryParameters().forEach$1(0, new A.Signature_encodeParams_closure0(encodedParams));
      return encodedParams;
    }
  };
  A.Signature_signatureDate_closure.prototype = {
    call$1(k) {
      A._asString(k);
      return k + "=" + A.S(this.encodedParams.$index(0, k));
    },
    $signature: 5
  };
  A.Signature_encodeParams_closure.prototype = {
    call$2(k, v) {
      this.encodedParams.$indexSet(0, A._Uri__uriEncode(B.List_KIf, A._asString(k), B.C_Utf8Codec, false), A._Uri__uriEncode(B.List_KIf, A._asString(v), B.C_Utf8Codec, false));
    },
    $signature: 9
  };
  A.Signature_encodeParams_closure0.prototype = {
    call$2(k, v) {
      A._asString(k);
      A._asString(v);
      this.encodedParams.$indexSet(0, A._Uri__uriEncode(B.List_KIf, k, B.C_Utf8Codec, false), A._Uri__uriEncode(B.List_KIf, v, B.C_Utf8Codec, false));
    },
    $signature: 8
  };
  A.generateAuthHeader_closure.prototype = {
    call$1(k) {
      A._asString(k);
      return k + '="' + A._Uri__uriEncode(B.List_KIf, A._asString(this.params.$index(0, k)), B.C_Utf8Codec, false) + '"';
    },
    $signature: 5
  };
  A.TwitterApiResponse.prototype = {};
  A.FunctionsClient.prototype = {};
  A.GotrueFetch.prototype = {};
  A.GoTrueAdminApi.prototype = {};
  A.GoTrueAdminMFAApi.prototype = {};
  A.GoTrueClient.prototype = {};
  A.GoTrueMFAApi.prototype = {};
  A.BaseRequest.prototype = {
    finalize$0() {
      if (this._finalized)
        throw A.wrapException(A.StateError$("Can't finalize a finalized Request."));
      this._finalized = true;
      return B.ByteStream__EmptyStream;
    },
    toString$0(_) {
      return this.method + " " + this.url.toString$0(0);
    }
  };
  A.BaseRequest_closure.prototype = {
    call$2(key1, key2) {
      return A._asString(key1).toLowerCase() === A._asString(key2).toLowerCase();
    },
    $signature: 46
  };
  A.BaseRequest_closure0.prototype = {
    call$1(key) {
      return B.JSString_methods.get$hashCode(A._asString(key).toLowerCase());
    },
    $signature: 47
  };
  A.BaseResponse.prototype = {
    BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(statusCode, contentLength, headers, isRedirect, persistentConnection, reasonPhrase, request) {
      var t1 = this.statusCode;
      if (t1 < 100)
        throw A.wrapException(A.ArgumentError$("Invalid status code " + t1 + ".", null));
      else {
        t1 = this.contentLength;
        if (t1 != null && t1 < 0)
          throw A.wrapException(A.ArgumentError$("Invalid content length " + A.S(t1) + ".", null));
      }
    }
  };
  A.ByteStream.prototype = {
    toBytes$0() {
      var t1 = new A._Future($.Zone__current, type$._Future_Uint8List),
        completer = new A._AsyncCompleter(t1, type$._AsyncCompleter_Uint8List),
        sink = new A._ByteCallbackSink(new A.ByteStream_toBytes_closure(completer), new Uint8Array(1024));
      this.listen$4$cancelOnError$onDone$onError(type$.void_Function_List_int._as(sink.get$add(sink)), true, sink.get$close(), completer.get$completeError());
      return t1;
    }
  };
  A.ByteStream_toBytes_closure.prototype = {
    call$1(bytes) {
      return this.completer.complete$1(new Uint8Array(A._ensureNativeList(type$.List_int._as(bytes))));
    },
    $signature: 48
  };
  A.Request0.prototype = {
    finalize$0() {
      var t1, t2, _null = null;
      this.super$BaseRequest$finalize();
      t1 = type$._AsyncStreamController_List_int;
      t2 = new A._AsyncStreamController(_null, _null, _null, _null, t1);
      t2._add$1(this._bodyBytes);
      t2._closeUnchecked$0();
      return new A.ByteStream(new A._ControllerStream(t2, t1._eval$1("_ControllerStream<1>")));
    }
  };
  A.Response0.prototype = {};
  A.StreamedRequest.prototype = {
    finalize$0() {
      this.super$BaseRequest$finalize();
      var t1 = this._streamed_request$_controller;
      return new A.ByteStream(new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")));
    }
  };
  A.StreamedResponse.prototype = {};
  A.CaseInsensitiveMap.prototype = {};
  A.CaseInsensitiveMap$from_closure.prototype = {
    call$1(key) {
      return A._asString(key).toLowerCase();
    },
    $signature: 5
  };
  A.MediaType.prototype = {
    toString$0(_) {
      var buffer = new A.StringBuffer(""),
        t1 = "" + this.type;
      buffer._contents = t1;
      t1 += "/";
      buffer._contents = t1;
      buffer._contents = t1 + this.subtype;
      t1 = this.parameters;
      t1._map.forEach$1(0, t1.$ti._eval$1("~(1,2)")._as(new A.MediaType_toString_closure(buffer)));
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.MediaType_MediaType$parse_closure.prototype = {
    call$0() {
      var t3, t4, t5, t6, parameters, t7, t8, success, t9, value,
        t1 = this.mediaType,
        scanner = new A.StringScanner(null, t1),
        t2 = $.$get$whitespace();
      scanner.scan$1(t2);
      t3 = $.$get$token();
      scanner.expect$1(t3);
      t4 = scanner.get$lastMatch().$index(0, 0);
      t4.toString;
      scanner.expect$1("/");
      scanner.expect$1(t3);
      t5 = scanner.get$lastMatch().$index(0, 0);
      t5.toString;
      scanner.scan$1(t2);
      t6 = type$.String;
      parameters = A.LinkedHashMap_LinkedHashMap$_empty(t6, t6);
      t6 = type$.Pattern;
      while (true) {
        t7 = scanner._lastMatch = B.JSString_methods.matchAsPrefix$2(";", t1, scanner._position);
        t8 = scanner._lastMatchPosition = scanner._position;
        success = t7 != null;
        t7 = success ? scanner._lastMatchPosition = scanner._position = t7.get$end() : t8;
        if (!success)
          break;
        t6._as(t2);
        t7 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, t7);
        scanner._lastMatchPosition = scanner._position;
        if (t7 != null)
          scanner._lastMatchPosition = scanner._position = t7.get$end();
        scanner.expect$1(t3);
        if (scanner._position !== scanner._lastMatchPosition)
          scanner._lastMatch = null;
        t7 = scanner._lastMatch.$index(0, 0);
        t7.toString;
        scanner.expect$1("=");
        t8 = scanner._lastMatch = t6._as(t3).matchAsPrefix$2(0, t1, scanner._position);
        t9 = scanner._lastMatchPosition = scanner._position;
        success = t8 != null;
        if (success) {
          t8 = scanner._lastMatchPosition = scanner._position = t8.get$end();
          t9 = t8;
        } else
          t8 = t9;
        if (success) {
          if (t8 !== t9)
            scanner._lastMatch = null;
          t8 = scanner._lastMatch.$index(0, 0);
          t8.toString;
          value = t8;
        } else
          value = A.expectQuotedString(scanner);
        t8 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, scanner._position);
        scanner._lastMatchPosition = scanner._position;
        if (t8 != null)
          scanner._lastMatchPosition = scanner._position = t8.get$end();
        parameters.$indexSet(0, t7, value);
      }
      scanner.expectDone$0();
      return A.MediaType$(t4, t5, parameters);
    },
    $signature: 49
  };
  A.MediaType_toString_closure.prototype = {
    call$2(attribute, value) {
      var t1, t2, t3;
      A._asString(attribute);
      A._asString(value);
      t1 = this.buffer;
      t1._contents += "; " + attribute + "=";
      t2 = $.$get$nonToken()._nativeRegExp;
      t2 = t2.test(value);
      t3 = t1._contents;
      if (t2) {
        t1._contents = t3 + '"';
        t2 = t1._contents += A.stringReplaceAllFuncUnchecked(value, type$.Pattern._as($.$get$_escapedChar()), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new A.MediaType_toString__closure())), type$.nullable_String_Function_String._as(null));
        t1._contents = t2 + '"';
      } else
        t1._contents = t3 + value;
    },
    $signature: 8
  };
  A.MediaType_toString__closure.prototype = {
    call$1(match) {
      return "\\" + A.S(match.$index(0, 0));
    },
    $signature: 23
  };
  A.expectQuotedString_closure.prototype = {
    call$1(match) {
      var t1 = match.$index(0, 1);
      t1.toString;
      return t1;
    },
    $signature: 23
  };
  A.Accelerometer.prototype = {};
  A.AccelerometerSensorOptions.prototype = {};
  A.LinearAccelerationSensor.prototype = {};
  A.GravitySensor.prototype = {};
  A.AccelerometerReadingValues.prototype = {};
  A.LinearAccelerationReadingValues.prototype = {};
  A.GravityReadingValues.prototype = {};
  A.AmbientLightSensor.prototype = {};
  A.AmbientLightReadingValues.prototype = {};
  A.XRAnchor.prototype = {};
  A.XRAnchorSet.prototype = {};
  A.ANGLEInstancedArrays.prototype = {};
  A.HTMLAttributionSrcElementUtils.prototype = {};
  A.AudioOutputOptions.prototype = {};
  A.BackgroundFetchManager.prototype = {};
  A.BackgroundFetchUIOptions.prototype = {};
  A.BackgroundFetchOptions.prototype = {};
  A.BackgroundFetchRegistration.prototype = {};
  A.BackgroundFetchRecord.prototype = {};
  A.BackgroundFetchEvent.prototype = {};
  A.BackgroundFetchEventInit.prototype = {};
  A.BackgroundFetchUpdateUIEvent.prototype = {};
  A.SyncManager.prototype = {};
  A.SyncEvent.prototype = {};
  A.SyncEventInit.prototype = {};
  A.NavigatorBadge.prototype = {};
  A.BatteryManager.prototype = {};
  A.CaptureHandleConfig.prototype = {};
  A.CaptureHandle.prototype = {};
  A.ClipboardEventInit.prototype = {};
  A.ClipboardEvent.prototype = {};
  A.ClipboardItem.prototype = {};
  A.ClipboardItemOptions.prototype = {};
  A.Clipboard.prototype = {};
  A.ClipboardPermissionDescriptor.prototype = {};
  A.CloseWatcher.prototype = {};
  A.CloseWatcherOptions.prototype = {};
  A.CompressionStream.prototype = {};
  A.DecompressionStream.prototype = {};
  A.PressureObserver.prototype = {};
  A.PressureRecord.prototype = {};
  A.PressureObserverOptions.prototype = {};
  A.Console.prototype = {};
  A.ContactAddress.prototype = {};
  A.ContactInfo.prototype = {};
  A.ContactsSelectOptions.prototype = {};
  A.ContactsManager.prototype = {};
  A.ContentDescription.prototype = {};
  A.ContentIndex.prototype = {};
  A.ContentIndexEventInit.prototype = {};
  A.ContentIndexEvent.prototype = {};
  A.CookieStore.prototype = {};
  A.CookieStoreGetOptions.prototype = {};
  A.CookieInit.prototype = {};
  A.CookieStoreDeleteOptions.prototype = {};
  A.CookieListItem.prototype = {};
  A.CookieStoreManager.prototype = {};
  A.CookieChangeEvent.prototype = {};
  A.CookieChangeEventInit.prototype = {};
  A.ExtendableCookieChangeEvent.prototype = {};
  A.ExtendableCookieChangeEventInit.prototype = {};
  A.CrashReportBody.prototype = {};
  A.Credential.prototype = {};
  A.CredentialUserData.prototype = {};
  A.CredentialsContainer.prototype = {};
  A.CredentialData.prototype = {};
  A.CredentialRequestOptions.prototype = {};
  A.CredentialCreationOptions.prototype = {};
  A.PasswordCredential.prototype = {};
  A.PasswordCredentialData.prototype = {};
  A.FederatedCredential.prototype = {};
  A.FederatedCredentialRequestOptions.prototype = {};
  A.FederatedCredentialInit.prototype = {};
  A.CSPViolationReportBody.prototype = {};
  A.SecurityPolicyViolationEvent.prototype = {};
  A.SecurityPolicyViolationEventInit.prototype = {};
  A.ScriptingPolicyReportBody.prototype = {};
  A.AnimationWorkletGlobalScope.prototype = {};
  A.WorkletAnimationEffect.prototype = {};
  A.WorkletAnimation.prototype = {};
  A.WorkletGroupEffect.prototype = {};
  A.AnimationEvent.prototype = {};
  A.AnimationEventInit.prototype = {};
  A.CSSKeyframeRule.prototype = {};
  A.CSSKeyframesRule.prototype = {};
  A.CSSAnimation.prototype = {};
  A.CSSLayerBlockRule.prototype = {};
  A.CSSLayerStatementRule.prototype = {};
  A.CSSConditionRule.prototype = {};
  A.CSSMediaRule.prototype = {};
  A.CSSSupportsRule.prototype = {};
  A.ContentVisibilityAutoStateChangedEvent.prototype = {};
  A.ContentVisibilityAutoStateChangedEventInit.prototype = {};
  A.CSSContainerRule.prototype = {};
  A.CSSCounterStyleRule.prototype = {};
  A.CSSViewportRule.prototype = {};
  A.FontFaceDescriptors.prototype = {};
  A.FontFace.prototype = {};
  A.FontFaceFeatures.prototype = {};
  A.FontFaceVariationAxis.prototype = {};
  A.FontFaceVariations.prototype = {};
  A.FontFacePalette.prototype = {};
  A.FontFacePalettes.prototype = {};
  A.FontFaceSetLoadEventInit.prototype = {};
  A.FontFaceSetLoadEvent.prototype = {};
  A.FontFaceSet.prototype = {};
  A.FontFaceSource.prototype = {};
  A.CSSFontFaceRule.prototype = {};
  A.CSSFontFeatureValuesRule.prototype = {};
  A.CSSFontFeatureValuesMap.prototype = {};
  A.CSSFontPaletteValuesRule.prototype = {};
  A.Highlight.prototype = {};
  A.HighlightRegistry.prototype = {};
  A.LayoutWorkletGlobalScope.prototype = {};
  A.LayoutOptions.prototype = {};
  A.LayoutChild.prototype = {};
  A.LayoutFragment.prototype = {};
  A.IntrinsicSizes.prototype = {};
  A.LayoutConstraints.prototype = {};
  A.LayoutConstraintsOptions.prototype = {};
  A.ChildBreakToken.prototype = {};
  A.BreakToken.prototype = {};
  A.BreakTokenOptions.prototype = {};
  A.LayoutEdges.prototype = {};
  A.FragmentResultOptions.prototype = {};
  A.FragmentResult.prototype = {};
  A.IntrinsicSizesResultOptions.prototype = {};
  A.SVGClipPathElement.prototype = {};
  A.SVGMaskElement.prototype = {};
  A.FocusableAreasOption.prototype = {};
  A.SpatialNavigationSearchOptions.prototype = {};
  A.NavigationEvent.prototype = {};
  A.NavigationEventInit.prototype = {};
  A.CSSNestingRule.prototype = {};
  A.PaintWorkletGlobalScope.prototype = {};
  A.PaintRenderingContext2DSettings.prototype = {};
  A.PaintRenderingContext2D.prototype = {};
  A.PaintSize.prototype = {};
  A.CSSParserOptions.prototype = {};
  A.CSSParserRule.prototype = {};
  A.CSSParserAtRule.prototype = {};
  A.CSSParserQualifiedRule.prototype = {};
  A.CSSParserDeclaration.prototype = {};
  A.CSSParserValue.prototype = {};
  A.CSSParserBlock.prototype = {};
  A.CSSParserFunction.prototype = {};
  A.PropertyDefinition.prototype = {};
  A.CSSPropertyRule.prototype = {};
  A.CSSPseudoElement.prototype = {};
  A.NamedFlowMap.prototype = {};
  A.NamedFlow.prototype = {};
  A.Region.prototype = {};
  A.TransitionEvent.prototype = {};
  A.TransitionEventInit.prototype = {};
  A.CSSTransition.prototype = {};
  A.CSSStyleValue.prototype = {};
  A.StylePropertyMapReadOnly.prototype = {};
  A.StylePropertyMap.prototype = {};
  A.CSSUnparsedValue.prototype = {};
  A.CSSVariableReferenceValue.prototype = {};
  A.CSSKeywordValue.prototype = {};
  A.CSSNumericType.prototype = {};
  A.CSSNumericValue.prototype = {};
  A.CSSUnitValue.prototype = {};
  A.CSSMathValue.prototype = {};
  A.CSSMathSum.prototype = {};
  A.CSSMathProduct.prototype = {};
  A.CSSMathNegate.prototype = {};
  A.CSSMathInvert.prototype = {};
  A.CSSMathMin.prototype = {};
  A.CSSMathMax.prototype = {};
  A.CSSMathClamp.prototype = {};
  A.CSSNumericArray.prototype = {};
  A.CSSTransformValue.prototype = {};
  A.CSSTransformComponent.prototype = {};
  A.CSSTranslate.prototype = {};
  A.CSSRotate.prototype = {};
  A.CSSScale.prototype = {};
  A.CSSSkew.prototype = {};
  A.CSSSkewX.prototype = {};
  A.CSSSkewY.prototype = {};
  A.CSSPerspective.prototype = {};
  A.CSSMatrixComponent.prototype = {};
  A.CSSMatrixComponentOptions.prototype = {};
  A.CSSImageValue.prototype = {};
  A.CSSColorValue.prototype = {};
  A.Cssrgb.prototype = {};
  A.Csshsl.prototype = {};
  A.Csshwb.prototype = {};
  A.CSSLab.prototype = {};
  A.Csslch.prototype = {};
  A.CSSOKLab.prototype = {};
  A.Cssoklch.prototype = {};
  A.CSSColor.prototype = {};
  A.MediaList.prototype = {};
  A.StyleSheet.prototype = {};
  A.CSSStyleSheet.prototype = {};
  A.CSSStyleSheetInit.prototype = {};
  A.StyleSheetList.prototype = {};
  A.LinkStyle.prototype = {};
  A.CSSRuleList.prototype = {};
  A.CSSRule.prototype = {};
  A.CSSStyleRule.prototype = {};
  A.CSSImportRule.prototype = {};
  A.CSSGroupingRule.prototype = {};
  A.CSSPageRule.prototype = {};
  A.CSSMarginRule.prototype = {};
  A.CSSNamespaceRule.prototype = {};
  A.CSSStyleDeclaration.prototype = {};
  A.ElementCSSInlineStyle.prototype = {};
  A.Css.prototype = {};
  A.ScrollOptions.prototype = {};
  A.ScrollToOptions.prototype = {};
  A.MediaQueryList.prototype = {};
  A.MediaQueryListEvent.prototype = {};
  A.MediaQueryListEventInit.prototype = {};
  A.Screen.prototype = {};
  A.CaretPosition.prototype = {};
  A.ScrollIntoViewOptions.prototype = {};
  A.CheckVisibilityOptions.prototype = {};
  A.BoxQuadOptions.prototype = {};
  A.ConvertCoordinateOptions.prototype = {};
  A.GeometryUtils.prototype = {};
  A.VisualViewport.prototype = {};
  A.CustomStateSet.prototype = {};
  A.DataCue.prototype = {};
  A.DeprecationReportBody.prototype = {};
  A.NavigatorDeviceMemory.prototype = {};
  A.DevicePosture.prototype = {};
  A.DigitalGoodsService.prototype = {};
  A.ItemDetails.prototype = {};
  A.PurchaseDetails.prototype = {};
  A.Event.prototype = {};
  A.EventInit.prototype = {};
  A.CustomEvent.prototype = {};
  A.CustomEventInit.prototype = {};
  A.EventTarget.prototype = {};
  A.EventListenerOptions.prototype = {};
  A.AddEventListenerOptions.prototype = {};
  A.AbortController0.prototype = {};
  A.AbortSignal0.prototype = {};
  A.NonElementParentNode.prototype = {};
  A.DocumentOrShadowRoot.prototype = {};
  A.ParentNode.prototype = {};
  A.NonDocumentTypeChildNode.prototype = {};
  A.ChildNode.prototype = {};
  A.Slottable.prototype = {};
  A.NodeList.prototype = {};
  A.HTMLCollection.prototype = {};
  A.MutationObserver.prototype = {};
  A.MutationObserverInit.prototype = {};
  A.MutationRecord.prototype = {};
  A.Node.prototype = {};
  A.GetRootNodeOptions.prototype = {};
  A.Document.prototype = {};
  A.XMLDocument.prototype = {};
  A.ElementCreationOptions.prototype = {};
  A.DOMImplementation.prototype = {};
  A.DocumentType.prototype = {};
  A.DocumentFragment.prototype = {};
  A.ShadowRoot.prototype = {};
  A.Element.prototype = {};
  A.ShadowRootInit.prototype = {};
  A.NamedNodeMap.prototype = {};
  A.Attr.prototype = {};
  A.CharacterData.prototype = {};
  A.Text.prototype = {};
  A.CDATASection.prototype = {};
  A.ProcessingInstruction.prototype = {};
  A.Comment.prototype = {};
  A.AbstractRange.prototype = {};
  A.StaticRangeInit.prototype = {};
  A.StaticRange.prototype = {};
  A.Range.prototype = {};
  A.NodeIterator.prototype = {};
  A.TreeWalker.prototype = {};
  A.NodeFilter.prototype = {};
  A.DOMTokenList.prototype = {};
  A.XPathResult.prototype = {};
  A.XPathExpression.prototype = {};
  A.XPathNSResolver.prototype = {};
  A.XPathEvaluatorBase.prototype = {};
  A.XPathEvaluator.prototype = {};
  A.XSLTProcessor.prototype = {};
  A.XMLSerializer.prototype = {};
  A.InnerHTML.prototype = {};
  A.EditContextInit.prototype = {};
  A.EditContext.prototype = {};
  A.TextUpdateEventInit.prototype = {};
  A.TextUpdateEvent.prototype = {};
  A.TextFormatInit.prototype = {};
  A.TextFormat.prototype = {};
  A.TextFormatUpdateEventInit.prototype = {};
  A.TextFormatUpdateEvent.prototype = {};
  A.CharacterBoundsUpdateEventInit.prototype = {};
  A.CharacterBoundsUpdateEvent.prototype = {};
  A.PerformanceElementTiming.prototype = {};
  A.TextDecoderCommon.prototype = {};
  A.TextDecoderOptions.prototype = {};
  A.TextDecodeOptions.prototype = {};
  A.TextDecoder.prototype = {};
  A.TextEncoderCommon.prototype = {};
  A.TextEncoderEncodeIntoResult.prototype = {};
  A.TextEncoder.prototype = {};
  A.TextDecoderStream.prototype = {};
  A.TextEncoderStream.prototype = {};
  A.MediaKeySystemConfiguration.prototype = {};
  A.MediaKeySystemMediaCapability.prototype = {};
  A.MediaKeySystemAccess.prototype = {};
  A.MediaKeys.prototype = {};
  A.MediaKeySession.prototype = {};
  A.MediaKeyStatusMap.prototype = {};
  A.MediaKeyMessageEvent.prototype = {};
  A.MediaKeyMessageEventInit.prototype = {};
  A.MediaEncryptedEvent.prototype = {};
  A.MediaEncryptedEventInit.prototype = {};
  A.FileSystemEntry.prototype = {};
  A.FileSystemDirectoryEntry.prototype = {};
  A.FileSystemFlags.prototype = {};
  A.FileSystemDirectoryReader.prototype = {};
  A.FileSystemFileEntry.prototype = {};
  A.FileSystem.prototype = {};
  A.EpubReadingSystem.prototype = {};
  A.PerformanceEventTiming.prototype = {};
  A.EventCounts.prototype = {};
  A.InteractionCounts.prototype = {};
  A.EXTBlendMinmax.prototype = {};
  A.EXTClipCullDistance.prototype = {};
  A.EXTColorBufferFloat.prototype = {};
  A.EXTColorBufferHalfFloat.prototype = {};
  A.WebGLTimerQueryEXT.prototype = {};
  A.EXTDisjointTimerQuery.prototype = {};
  A.EXTDisjointTimerQueryWebgl2.prototype = {};
  A.EXTFloatBlend.prototype = {};
  A.EXTFragDepth.prototype = {};
  A.EXTShaderTextureLod.prototype = {};
  A.EXTSRGB.prototype = {};
  A.EXTTextureCompressionBptc.prototype = {};
  A.EXTTextureCompressionRgtc.prototype = {};
  A.EXTTextureFilterAnisotropic.prototype = {};
  A.EXTTextureNorm16.prototype = {};
  A.ColorSelectionResult.prototype = {};
  A.ColorSelectionOptions.prototype = {};
  A.EyeDropper.prototype = {};
  A.IdentityCredential.prototype = {};
  A.IdentityCredentialRequestOptions.prototype = {};
  A.IdentityProvider.prototype = {};
  A.IdentityCredentialLogoutRPsRequest.prototype = {};
  A.Headers1.prototype = {};
  A.Body.prototype = {};
  A.Request1.prototype = {};
  A.RequestInit.prototype = {};
  A.Response1.prototype = {};
  A.ResponseInit.prototype = {};
  A.FileSystemPermissionDescriptor.prototype = {};
  A.FileSystemHandlePermissionDescriptor.prototype = {};
  A.FilePickerAcceptType.prototype = {};
  A.FilePickerOptions.prototype = {};
  A.OpenFilePickerOptions.prototype = {};
  A.SaveFilePickerOptions.prototype = {};
  A.DirectoryPickerOptions.prototype = {};
  A.Blob.prototype = {};
  A.BlobPropertyBag.prototype = {};
  A.File.prototype = {};
  A.FilePropertyBag.prototype = {};
  A.FileList.prototype = {};
  A.FileReader.prototype = {};
  A.FileReaderSync.prototype = {};
  A.SVGFilterElement.prototype = {};
  A.SVGFilterPrimitiveStandardAttributes.prototype = {};
  A.SVGFEBlendElement.prototype = {};
  A.SVGFEColorMatrixElement.prototype = {};
  A.SVGFEComponentTransferElement.prototype = {};
  A.SVGComponentTransferFunctionElement.prototype = {};
  A.SVGFEFuncRElement.prototype = {};
  A.SVGFEFuncGElement.prototype = {};
  A.SVGFEFuncBElement.prototype = {};
  A.SVGFEFuncAElement.prototype = {};
  A.SVGFECompositeElement.prototype = {};
  A.SVGFEConvolveMatrixElement.prototype = {};
  A.SVGFEDiffuseLightingElement.prototype = {};
  A.SVGFEDistantLightElement.prototype = {};
  A.SVGFEPointLightElement.prototype = {};
  A.SVGFESpotLightElement.prototype = {};
  A.SVGFEDisplacementMapElement.prototype = {};
  A.SVGFEDropShadowElement.prototype = {};
  A.SVGFEFloodElement.prototype = {};
  A.SVGFEGaussianBlurElement.prototype = {};
  A.SVGFEImageElement.prototype = {};
  A.SVGFEMergeElement.prototype = {};
  A.SVGFEMergeNodeElement.prototype = {};
  A.SVGFEMorphologyElement.prototype = {};
  A.SVGFEOffsetElement.prototype = {};
  A.SVGFESpecularLightingElement.prototype = {};
  A.SVGFETileElement.prototype = {};
  A.SVGFETurbulenceElement.prototype = {};
  A.FontMetrics.prototype = {};
  A.Baseline.prototype = {};
  A.Font.prototype = {};
  A.FileSystemHandle.prototype = {};
  A.FileSystemCreateWritableOptions.prototype = {};
  A.FileSystemFileHandle.prototype = {};
  A.FileSystemGetFileOptions.prototype = {};
  A.FileSystemGetDirectoryOptions.prototype = {};
  A.FileSystemRemoveOptions.prototype = {};
  A.FileSystemDirectoryHandle.prototype = {};
  A.WriteParams.prototype = {};
  A.FileSystemWritableFileStream.prototype = {};
  A.FullscreenOptions.prototype = {};
  A.Gamepad.prototype = {};
  A.GamepadButton.prototype = {};
  A.GamepadEvent.prototype = {};
  A.GamepadEventInit.prototype = {};
  A.GamepadHapticActuator.prototype = {};
  A.GamepadPose.prototype = {};
  A.GamepadTouch.prototype = {};
  A.Sensor.prototype = {};
  A.SensorOptions.prototype = {};
  A.SensorErrorEvent.prototype = {};
  A.SensorErrorEventInit.prototype = {};
  A.MockSensorConfiguration.prototype = {};
  A.MockSensor.prototype = {};
  A.MockSensorReadingValues.prototype = {};
  A.Geolocation.prototype = {};
  A.PositionOptions.prototype = {};
  A.GeolocationPosition.prototype = {};
  A.GeolocationCoordinates.prototype = {};
  A.GeolocationPositionError.prototype = {};
  A.GeolocationSensor.prototype = {};
  A.GeolocationSensorOptions.prototype = {};
  A.ReadOptions.prototype = {};
  A.GeolocationSensorReading.prototype = {};
  A.GeolocationReadingValues.prototype = {};
  A.DOMPointReadOnly.prototype = {};
  A.DOMPoint.prototype = {};
  A.DOMPointInit.prototype = {};
  A.DOMRectReadOnly.prototype = {};
  A.DOMRect.prototype = {};
  A.DOMRectInit.prototype = {};
  A.DOMRectList.prototype = {};
  A.DOMQuad.prototype = {};
  A.DOMQuadInit.prototype = {};
  A.DOMMatrixReadOnly.prototype = {};
  A.DOMMatrix.prototype = {};
  A.DOMMatrix2DInit.prototype = {};
  A.DOMMatrixInit.prototype = {};
  A.RelatedApplication.prototype = {};
  A.Gyroscope.prototype = {};
  A.GyroscopeSensorOptions.prototype = {};
  A.GyroscopeReadingValues.prototype = {};
  A.Performance.prototype = {};
  A.HTMLAllCollection.prototype = {};
  A.HTMLFormControlsCollection.prototype = {};
  A.RadioNodeList.prototype = {};
  A.HTMLOptionsCollection.prototype = {};
  A.DOMStringList.prototype = {};
  A.HTMLElement.prototype = {};
  A.HTMLUnknownElement.prototype = {};
  A.HTMLOrSVGElement.prototype = {};
  A.DOMStringMap.prototype = {};
  A.HTMLHtmlElement.prototype = {};
  A.HTMLHeadElement.prototype = {};
  A.HTMLTitleElement.prototype = {};
  A.HTMLBaseElement.prototype = {};
  A.HTMLLinkElement.prototype = {};
  A.HTMLMetaElement.prototype = {};
  A.HTMLStyleElement.prototype = {};
  A.HTMLBodyElement.prototype = {};
  A.HTMLHeadingElement.prototype = {};
  A.HTMLParagraphElement.prototype = {};
  A.HTMLHRElement.prototype = {};
  A.HTMLPreElement.prototype = {};
  A.HTMLQuoteElement.prototype = {};
  A.HTMLOListElement.prototype = {};
  A.HTMLUListElement.prototype = {};
  A.HTMLMenuElement.prototype = {};
  A.HTMLLIElement.prototype = {};
  A.HTMLDListElement.prototype = {};
  A.HTMLDivElement.prototype = {};
  A.HTMLAnchorElement.prototype = {};
  A.HTMLDataElement.prototype = {};
  A.HTMLTimeElement.prototype = {};
  A.HTMLSpanElement.prototype = {};
  A.HTMLBRElement.prototype = {};
  A.HTMLHyperlinkElementUtils.prototype = {};
  A.HTMLModElement.prototype = {};
  A.HTMLPictureElement.prototype = {};
  A.HTMLSourceElement.prototype = {};
  A.HTMLImageElement.prototype = {};
  A.HTMLIFrameElement.prototype = {};
  A.HTMLEmbedElement.prototype = {};
  A.HTMLObjectElement.prototype = {};
  A.HTMLVideoElement.prototype = {};
  A.HTMLAudioElement.prototype = {};
  A.HTMLTrackElement.prototype = {};
  A.HTMLMediaElement.prototype = {};
  A.MediaError.prototype = {};
  A.AudioTrackList.prototype = {};
  A.AudioTrack.prototype = {};
  A.VideoTrackList.prototype = {};
  A.VideoTrack.prototype = {};
  A.TextTrackList.prototype = {};
  A.TextTrack.prototype = {};
  A.TextTrackCueList.prototype = {};
  A.TextTrackCue.prototype = {};
  A.TimeRanges.prototype = {};
  A.TrackEvent.prototype = {};
  A.TrackEventInit.prototype = {};
  A.HTMLMapElement.prototype = {};
  A.HTMLAreaElement.prototype = {};
  A.HTMLTableElement.prototype = {};
  A.HTMLTableCaptionElement.prototype = {};
  A.HTMLTableColElement.prototype = {};
  A.HTMLTableSectionElement.prototype = {};
  A.HTMLTableRowElement.prototype = {};
  A.HTMLTableCellElement.prototype = {};
  A.HTMLFormElement.prototype = {};
  A.HTMLLabelElement.prototype = {};
  A.HTMLInputElement.prototype = {};
  A.HTMLButtonElement.prototype = {};
  A.HTMLSelectElement.prototype = {};
  A.HTMLDataListElement.prototype = {};
  A.HTMLOptGroupElement.prototype = {};
  A.HTMLOptionElement.prototype = {};
  A.HTMLTextAreaElement.prototype = {};
  A.HTMLOutputElement.prototype = {};
  A.HTMLProgressElement.prototype = {};
  A.HTMLMeterElement.prototype = {};
  A.HTMLFieldSetElement.prototype = {};
  A.HTMLLegendElement.prototype = {};
  A.ValidityState.prototype = {};
  A.SubmitEvent.prototype = {};
  A.SubmitEventInit.prototype = {};
  A.FormDataEvent.prototype = {};
  A.FormDataEventInit.prototype = {};
  A.HTMLDetailsElement.prototype = {};
  A.HTMLDialogElement.prototype = {};
  A.HTMLScriptElement.prototype = {};
  A.HTMLTemplateElement.prototype = {};
  A.HTMLSlotElement.prototype = {};
  A.AssignedNodesOptions.prototype = {};
  A.HTMLCanvasElement.prototype = {};
  A.CanvasRenderingContext2DSettings.prototype = {};
  A.CanvasRenderingContext2D.prototype = {};
  A.CanvasState.prototype = {};
  A.CanvasTransform.prototype = {};
  A.CanvasCompositing.prototype = {};
  A.CanvasImageSmoothing.prototype = {};
  A.CanvasFillStrokeStyles.prototype = {};
  A.CanvasShadowStyles.prototype = {};
  A.CanvasFilters.prototype = {};
  A.CanvasRect.prototype = {};
  A.CanvasDrawPath.prototype = {};
  A.CanvasUserInterface.prototype = {};
  A.CanvasText.prototype = {};
  A.CanvasDrawImage.prototype = {};
  A.CanvasImageData.prototype = {};
  A.CanvasPathDrawingStyles.prototype = {};
  A.CanvasTextDrawingStyles.prototype = {};
  A.CanvasPath.prototype = {};
  A.CanvasGradient.prototype = {};
  A.CanvasPattern.prototype = {};
  A.TextMetrics.prototype = {};
  A.ImageDataSettings.prototype = {};
  A.ImageData.prototype = {};
  A.Path2D.prototype = {};
  A.ImageBitmapRenderingContext.prototype = {};
  A.ImageBitmapRenderingContextSettings.prototype = {};
  A.ImageEncodeOptions.prototype = {};
  A.OffscreenCanvas.prototype = {};
  A.OffscreenCanvasRenderingContext2D.prototype = {};
  A.CustomElementRegistry.prototype = {};
  A.ElementDefinitionOptions.prototype = {};
  A.ElementInternals.prototype = {};
  A.ValidityStateFlags.prototype = {};
  A.FocusOptions.prototype = {};
  A.ElementContentEditable.prototype = {};
  A.DataTransfer.prototype = {};
  A.DataTransferItemList.prototype = {};
  A.DataTransferItem.prototype = {};
  A.DragEvent.prototype = {};
  A.DragEventInit.prototype = {};
  A.Window.prototype = {};
  A.WindowPostMessageOptions.prototype = {};
  A.BarProp.prototype = {};
  A.History.prototype = {};
  A.Location.prototype = {};
  A.PopStateEvent.prototype = {};
  A.PopStateEventInit.prototype = {};
  A.HashChangeEvent.prototype = {};
  A.HashChangeEventInit.prototype = {};
  A.PageTransitionEvent.prototype = {};
  A.PageTransitionEventInit.prototype = {};
  A.BeforeUnloadEvent.prototype = {};
  A.ErrorEvent.prototype = {};
  A.ErrorEventInit.prototype = {};
  A.PromiseRejectionEvent.prototype = {};
  A.PromiseRejectionEventInit.prototype = {};
  A.GlobalEventHandlers.prototype = {};
  A.WindowEventHandlers.prototype = {};
  A.DocumentAndElementEventHandlers.prototype = {};
  A.WindowOrWorkerGlobalScope.prototype = {};
  A.DOMParser.prototype = {};
  A.Navigator.prototype = {};
  A.NavigatorID.prototype = {};
  A.NavigatorLanguage.prototype = {};
  A.NavigatorOnLine.prototype = {};
  A.NavigatorContentUtils.prototype = {};
  A.NavigatorCookies.prototype = {};
  A.NavigatorPlugins.prototype = {};
  A.PluginArray.prototype = {};
  A.MimeTypeArray.prototype = {};
  A.Plugin.prototype = {};
  A.MimeType.prototype = {};
  A.ImageBitmap.prototype = {};
  A.ImageBitmapOptions.prototype = {};
  A.AnimationFrameProvider.prototype = {};
  A.MessageEvent.prototype = {};
  A.MessageEventInit.prototype = {};
  A.EventSource.prototype = {};
  A.EventSourceInit.prototype = {};
  A.MessageChannel.prototype = {};
  A.MessagePort.prototype = {};
  A.StructuredSerializeOptions.prototype = {};
  A.BroadcastChannel.prototype = {};
  A.WorkerGlobalScope.prototype = {};
  A.DedicatedWorkerGlobalScope.prototype = {};
  A.SharedWorkerGlobalScope.prototype = {};
  A.AbstractWorker.prototype = {};
  A.Worker.prototype = {};
  A.WorkerOptions.prototype = {};
  A.SharedWorker.prototype = {};
  A.NavigatorConcurrentHardware.prototype = {};
  A.WorkerNavigator.prototype = {};
  A.WorkerLocation.prototype = {};
  A.WorkletGlobalScope.prototype = {};
  A.Worklet.prototype = {};
  A.WorkletOptions.prototype = {};
  A.Storage.prototype = {};
  A.WindowSessionStorage.prototype = {};
  A.WindowLocalStorage.prototype = {};
  A.StorageEvent.prototype = {};
  A.StorageEventInit.prototype = {};
  A.HTMLMarqueeElement.prototype = {};
  A.HTMLFrameSetElement.prototype = {};
  A.HTMLFrameElement.prototype = {};
  A.HTMLDirectoryElement.prototype = {};
  A.HTMLFontElement.prototype = {};
  A.HTMLParamElement.prototype = {};
  A.External.prototype = {};
  A.IdleOptions.prototype = {};
  A.IdleDetector.prototype = {};
  A.ImageCapture.prototype = {};
  A.PhotoCapabilities.prototype = {};
  A.PhotoSettings.prototype = {};
  A.MediaSettingsRange.prototype = {};
  A.ConstrainPoint2DParameters.prototype = {};
  A.Point2D.prototype = {};
  A.ImageResource.prototype = {};
  A.IDBRequest.prototype = {};
  A.IDBOpenDBRequest.prototype = {};
  A.IDBVersionChangeEvent.prototype = {};
  A.IDBVersionChangeEventInit.prototype = {};
  A.IDBFactory.prototype = {};
  A.IDBDatabaseInfo.prototype = {};
  A.IDBDatabase.prototype = {};
  A.IDBTransactionOptions.prototype = {};
  A.IDBObjectStoreParameters.prototype = {};
  A.IDBObjectStore.prototype = {};
  A.IDBIndexParameters.prototype = {};
  A.IDBIndex.prototype = {};
  A.IDBKeyRange.prototype = {};
  A.IDBCursor.prototype = {};
  A.IDBCursorWithValue.prototype = {};
  A.IDBTransaction.prototype = {};
  A.Ink.prototype = {};
  A.InkPresenterParam.prototype = {};
  A.InkPresenter.prototype = {};
  A.InkTrailStyle.prototype = {};
  A.InputDeviceCapabilities.prototype = {};
  A.InputDeviceCapabilitiesInit.prototype = {};
  A.IntersectionObserver.prototype = {};
  A.IntersectionObserverEntry.prototype = {};
  A.IntersectionObserverEntryInit.prototype = {};
  A.IntersectionObserverInit.prototype = {};
  A.InterventionReportBody.prototype = {};
  A.IsInputPendingOptions.prototype = {};
  A.Scheduling.prototype = {};
  A.Profiler.prototype = {};
  A.ProfilerTrace.prototype = {};
  A.ProfilerSample.prototype = {};
  A.ProfilerStack.prototype = {};
  A.ProfilerFrame.prototype = {};
  A.ProfilerInitOptions.prototype = {};
  A.JsonLd.prototype = {};
  A.JsonLdProcessor.prototype = {};
  A.RdfDataset.prototype = {};
  A.RdfGraph.prototype = {};
  A.RdfTriple.prototype = {};
  A.RdfLiteral.prototype = {};
  A.JsonLdOptions.prototype = {};
  A.LoadDocumentOptions.prototype = {};
  A.RemoteDocument.prototype = {};
  A.JsonLdError.prototype = {};
  A.JsonLdFramingError.prototype = {};
  A.Keyboard.prototype = {};
  A.KeyboardLayoutMap.prototype = {};
  A.KHRParallelShaderCompile.prototype = {};
  A.LargestContentfulPaint.prototype = {};
  A.LayoutShift.prototype = {};
  A.LayoutShiftAttribution.prototype = {};
  A.QueryOptions.prototype = {};
  A.FontData.prototype = {};
  A.PerformanceLongTaskTiming.prototype = {};
  A.TaskAttributionTiming.prototype = {};
  A.Magnetometer.prototype = {};
  A.MagnetometerSensorOptions.prototype = {};
  A.UncalibratedMagnetometer.prototype = {};
  A.MagnetometerReadingValues.prototype = {};
  A.UncalibratedMagnetometerReadingValues.prototype = {};
  A.BeforeInstallPromptEvent.prototype = {};
  A.PromptResponseObject.prototype = {};
  A.LaunchParams.prototype = {};
  A.LaunchQueue.prototype = {};
  A.MathMLElement.prototype = {};
  A.MediaConfiguration.prototype = {};
  A.MediaDecodingConfiguration.prototype = {};
  A.MediaEncodingConfiguration.prototype = {};
  A.VideoConfiguration.prototype = {};
  A.AudioConfiguration.prototype = {};
  A.MediaCapabilitiesKeySystemConfiguration.prototype = {};
  A.KeySystemTrackConfiguration.prototype = {};
  A.MediaCapabilitiesInfo.prototype = {};
  A.MediaCapabilitiesDecodingInfo.prototype = {};
  A.MediaCapabilitiesEncodingInfo.prototype = {};
  A.MediaCapabilities.prototype = {};
  A.VideoPlaybackQuality.prototype = {};
  A.MediaSource.prototype = {};
  A.MediaSourceHandle.prototype = {};
  A.SourceBuffer.prototype = {};
  A.SourceBufferList.prototype = {};
  A.MockCapturePromptResultConfiguration.prototype = {};
  A.MockCaptureDeviceConfiguration.prototype = {};
  A.MockCameraConfiguration.prototype = {};
  A.MockMicrophoneConfiguration.prototype = {};
  A.CanvasCaptureMediaStreamTrack.prototype = {};
  A.CaptureActionEvent.prototype = {};
  A.CaptureActionEventInit.prototype = {};
  A.CropTarget.prototype = {};
  A.BrowserCaptureMediaStreamTrack.prototype = {};
  A.MediaStream.prototype = {};
  A.MediaStreamTrack.prototype = {};
  A.MediaTrackSupportedConstraints.prototype = {};
  A.MediaTrackCapabilities.prototype = {};
  A.MediaTrackConstraints.prototype = {};
  A.MediaTrackConstraintSet.prototype = {};
  A.MediaTrackSettings.prototype = {};
  A.MediaStreamTrackEvent.prototype = {};
  A.MediaStreamTrackEventInit.prototype = {};
  A.OverconstrainedError.prototype = {};
  A.MediaDevices.prototype = {};
  A.MediaDeviceInfo.prototype = {};
  A.InputDeviceInfo.prototype = {};
  A.MediaStreamConstraints.prototype = {};
  A.DoubleRange.prototype = {};
  A.ConstrainDoubleRange.prototype = {};
  A.ULongRange.prototype = {};
  A.ConstrainULongRange.prototype = {};
  A.ConstrainBooleanParameters.prototype = {};
  A.ConstrainDOMStringParameters.prototype = {};
  A.DevicePermissionDescriptor.prototype = {};
  A.CameraDevicePermissionDescriptor.prototype = {};
  A.MediaStreamTrackProcessor.prototype = {};
  A.MediaStreamTrackProcessorInit.prototype = {};
  A.VideoTrackGenerator.prototype = {};
  A.ViewportMediaStreamConstraints.prototype = {};
  A.MediaSession.prototype = {};
  A.MediaMetadata.prototype = {};
  A.MediaMetadataInit.prototype = {};
  A.MediaImage.prototype = {};
  A.MediaPositionState.prototype = {};
  A.MediaSessionActionDetails.prototype = {};
  A.MediaRecorder.prototype = {};
  A.MediaRecorderOptions.prototype = {};
  A.BlobEvent.prototype = {};
  A.BlobEventInit.prototype = {};
  A.Navigation.prototype = {};
  A.NavigationUpdateCurrentEntryOptions.prototype = {};
  A.NavigationOptions.prototype = {};
  A.NavigationNavigateOptions.prototype = {};
  A.NavigationReloadOptions.prototype = {};
  A.NavigationResult.prototype = {};
  A.NavigationCurrentEntryChangeEvent.prototype = {};
  A.NavigationCurrentEntryChangeEventInit.prototype = {};
  A.NavigationTransition.prototype = {};
  A.NavigateEvent.prototype = {};
  A.NavigateEventInit.prototype = {};
  A.NavigationInterceptOptions.prototype = {};
  A.NavigationDestination.prototype = {};
  A.NavigationHistoryEntry.prototype = {};
  A.PerformanceNavigationTiming.prototype = {};
  A.PerformanceTiming.prototype = {};
  A.PerformanceNavigation.prototype = {};
  A.NavigatorNetworkInformation.prototype = {};
  A.NetworkInformation.prototype = {};
  A.Notification.prototype = {};
  A.NotificationOptions.prototype = {};
  A.NotificationAction.prototype = {};
  A.GetNotificationOptions.prototype = {};
  A.NotificationEvent.prototype = {};
  A.NotificationEventInit.prototype = {};
  A.OESDrawBuffersIndexed.prototype = {};
  A.OESElementIndexUint.prototype = {};
  A.OESFboRenderMipmap.prototype = {};
  A.OESStandardDerivatives.prototype = {};
  A.OESTextureFloat.prototype = {};
  A.OESTextureFloatLinear.prototype = {};
  A.OESTextureHalfFloat.prototype = {};
  A.OESTextureHalfFloatLinear.prototype = {};
  A.WebGLVertexArrayObjectOES.prototype = {};
  A.OESVertexArrayObject.prototype = {};
  A.DeviceOrientationEvent.prototype = {};
  A.DeviceOrientationEventInit.prototype = {};
  A.DeviceMotionEventAcceleration.prototype = {};
  A.DeviceMotionEventRotationRate.prototype = {};
  A.DeviceMotionEvent.prototype = {};
  A.DeviceMotionEventAccelerationInit.prototype = {};
  A.DeviceMotionEventRotationRateInit.prototype = {};
  A.DeviceMotionEventInit.prototype = {};
  A.OrientationSensor.prototype = {};
  A.OrientationSensorOptions.prototype = {};
  A.AbsoluteOrientationSensor.prototype = {};
  A.RelativeOrientationSensor.prototype = {};
  A.AbsoluteOrientationReadingValues.prototype = {};
  A.RelativeOrientationReadingValues.prototype = {};
  A.OVRMultiview2.prototype = {};
  A.PerformancePaintTiming.prototype = {};
  A.PaymentManager.prototype = {};
  A.PaymentInstruments.prototype = {};
  A.PaymentInstrument.prototype = {};
  A.ImageObject.prototype = {};
  A.CanMakePaymentEvent.prototype = {};
  A.CanMakePaymentEventInit.prototype = {};
  A.PaymentRequestDetailsUpdate.prototype = {};
  A.PaymentRequestEvent.prototype = {};
  A.PaymentRequestEventInit.prototype = {};
  A.PaymentHandlerResponse.prototype = {};
  A.PaymentRequest.prototype = {};
  A.PaymentMethodData.prototype = {};
  A.PaymentCurrencyAmount.prototype = {};
  A.PaymentDetailsBase.prototype = {};
  A.PaymentDetailsInit.prototype = {};
  A.PaymentDetailsUpdate.prototype = {};
  A.PaymentDetailsModifier.prototype = {};
  A.PaymentItem.prototype = {};
  A.PaymentCompleteDetails.prototype = {};
  A.PaymentResponse.prototype = {};
  A.PaymentValidationErrors.prototype = {};
  A.PaymentMethodChangeEvent.prototype = {};
  A.PaymentMethodChangeEventInit.prototype = {};
  A.PaymentRequestUpdateEvent.prototype = {};
  A.PaymentRequestUpdateEventInit.prototype = {};
  A.MemoryMeasurement.prototype = {};
  A.MemoryBreakdownEntry.prototype = {};
  A.MemoryAttribution.prototype = {};
  A.MemoryAttributionContainer.prototype = {};
  A.PerformanceEntry.prototype = {};
  A.PerformanceObserver.prototype = {};
  A.PerformanceObserverCallbackOptions.prototype = {};
  A.PerformanceObserverInit.prototype = {};
  A.PerformanceObserverEntryList.prototype = {};
  A.PeriodicSyncManager.prototype = {};
  A.BackgroundSyncOptions.prototype = {};
  A.PeriodicSyncEventInit.prototype = {};
  A.PeriodicSyncEvent.prototype = {};
  A.Permissions.prototype = {};
  A.PermissionDescriptor.prototype = {};
  A.PermissionStatus.prototype = {};
  A.PermissionSetParameters.prototype = {};
  A.PermissionsPolicy.prototype = {};
  A.PermissionsPolicyViolationReportBody.prototype = {};
  A.PictureInPictureWindow.prototype = {};
  A.PictureInPictureEvent.prototype = {};
  A.PictureInPictureEventInit.prototype = {};
  A.PointerEventInit.prototype = {};
  A.PointerEvent.prototype = {};
  A.HTMLPortalElement.prototype = {};
  A.PortalActivateOptions.prototype = {};
  A.PortalHost.prototype = {};
  A.PortalActivateEvent.prototype = {};
  A.PortalActivateEventInit.prototype = {};
  A.Presentation.prototype = {};
  A.PresentationRequest.prototype = {};
  A.PresentationAvailability.prototype = {};
  A.PresentationConnectionAvailableEvent.prototype = {};
  A.PresentationConnectionAvailableEventInit.prototype = {};
  A.PresentationConnection.prototype = {};
  A.PresentationConnectionCloseEvent.prototype = {};
  A.PresentationConnectionCloseEventInit.prototype = {};
  A.PresentationReceiver.prototype = {};
  A.PresentationConnectionList.prototype = {};
  A.ProximitySensor.prototype = {};
  A.ProximityReadingValues.prototype = {};
  A.PushPermissionDescriptor.prototype = {};
  A.PushManager.prototype = {};
  A.PushSubscriptionOptions.prototype = {};
  A.PushSubscriptionOptionsInit.prototype = {};
  A.PushSubscription.prototype = {};
  A.PushSubscriptionJSON.prototype = {};
  A.PushMessageData.prototype = {};
  A.PushEvent.prototype = {};
  A.PushEventInit.prototype = {};
  A.PushSubscriptionChangeEvent.prototype = {};
  A.PushSubscriptionChangeEventInit.prototype = {};
  A.RemotePlayback.prototype = {};
  A.ReportBody.prototype = {};
  A.Report.prototype = {};
  A.ReportingObserver.prototype = {};
  A.ReportingObserverOptions.prototype = {};
  A.GenerateTestReportParameters.prototype = {};
  A.IdleRequestOptions.prototype = {};
  A.IdleDeadline.prototype = {};
  A.ResizeObserverOptions.prototype = {};
  A.ResizeObserver.prototype = {};
  A.ResizeObserverEntry.prototype = {};
  A.ResizeObserverSize.prototype = {};
  A.PerformanceResourceTiming.prototype = {};
  A.Sanitizer.prototype = {};
  A.SetHTMLOptions.prototype = {};
  A.SanitizerConfig.prototype = {};
  A.NetworkInformationSaveData.prototype = {};
  A.SchedulerPostTaskOptions.prototype = {};
  A.Scheduler.prototype = {};
  A.TaskPriorityChangeEvent.prototype = {};
  A.TaskPriorityChangeEventInit.prototype = {};
  A.TaskControllerInit.prototype = {};
  A.TaskController.prototype = {};
  A.TaskSignal.prototype = {};
  A.DisplayMediaStreamOptions.prototype = {};
  A.ScreenOrientation.prototype = {};
  A.WakeLock.prototype = {};
  A.WakeLockSentinel.prototype = {};
  A.ScrollTimelineOptions.prototype = {};
  A.ScrollTimeline.prototype = {};
  A.ViewTimelineOptions.prototype = {};
  A.ViewTimeline.prototype = {};
  A.FragmentDirective.prototype = {};
  A.SecurePaymentConfirmationRequest.prototype = {};
  A.AuthenticationExtensionsPaymentInputs.prototype = {};
  A.CollectedClientPaymentData.prototype = {};
  A.CollectedClientAdditionalPaymentData.prototype = {};
  A.PaymentCredentialInstrument.prototype = {};
  A.Selection.prototype = {};
  A.Serial.prototype = {};
  A.SerialPortRequestOptions.prototype = {};
  A.SerialPortFilter.prototype = {};
  A.SerialPort.prototype = {};
  A.SerialPortInfo.prototype = {};
  A.SerialOptions.prototype = {};
  A.SerialOutputSignals.prototype = {};
  A.SerialInputSignals.prototype = {};
  A.PerformanceServerTiming.prototype = {};
  A.ServiceWorker.prototype = {};
  A.ServiceWorkerRegistration.prototype = {};
  A.ServiceWorkerContainer.prototype = {};
  A.RegistrationOptions.prototype = {};
  A.NavigationPreloadManager.prototype = {};
  A.NavigationPreloadState.prototype = {};
  A.ServiceWorkerGlobalScope.prototype = {};
  A.Client0.prototype = {};
  A.WindowClient.prototype = {};
  A.Clients.prototype = {};
  A.ClientQueryOptions.prototype = {};
  A.ExtendableEvent.prototype = {};
  A.ExtendableEventInit.prototype = {};
  A.FetchEvent.prototype = {};
  A.FetchEventInit.prototype = {};
  A.ExtendableMessageEvent.prototype = {};
  A.ExtendableMessageEventInit.prototype = {};
  A.Cache.prototype = {};
  A.CacheQueryOptions.prototype = {};
  A.CacheStorage.prototype = {};
  A.MultiCacheQueryOptions.prototype = {};
  A.FaceDetector.prototype = {};
  A.FaceDetectorOptions.prototype = {};
  A.DetectedFace.prototype = {};
  A.Landmark.prototype = {};
  A.BarcodeDetector.prototype = {};
  A.BarcodeDetectorOptions.prototype = {};
  A.DetectedBarcode.prototype = {};
  A.SpeechRecognition.prototype = {};
  A.SpeechRecognitionErrorEvent.prototype = {};
  A.SpeechRecognitionErrorEventInit.prototype = {};
  A.SpeechRecognitionAlternative.prototype = {};
  A.SpeechRecognitionResult.prototype = {};
  A.SpeechRecognitionResultList.prototype = {};
  A.SpeechRecognitionEvent.prototype = {};
  A.SpeechRecognitionEventInit.prototype = {};
  A.SpeechGrammar.prototype = {};
  A.SpeechGrammarList.prototype = {};
  A.SpeechSynthesis.prototype = {};
  A.SpeechSynthesisUtterance.prototype = {};
  A.SpeechSynthesisEvent.prototype = {};
  A.SpeechSynthesisEventInit.prototype = {};
  A.SpeechSynthesisErrorEvent.prototype = {};
  A.SpeechSynthesisErrorEventInit.prototype = {};
  A.SpeechSynthesisVoice.prototype = {};
  A.NavigatorStorage.prototype = {};
  A.StorageManager.prototype = {};
  A.StorageEstimate.prototype = {};
  A.ReadableStream0.prototype = {};
  A.ReadableStreamGetReaderOptions.prototype = {};
  A.ReadableStreamIteratorOptions.prototype = {};
  A.ReadableWritablePair.prototype = {};
  A.StreamPipeOptions.prototype = {};
  A.UnderlyingSource.prototype = {};
  A.ReadableStreamGenericReader.prototype = {};
  A.ReadableStreamDefaultReader0.prototype = {};
  A.ReadableStreamReadResult.prototype = {};
  A.ReadableStreamBYOBReader.prototype = {};
  A.ReadableStreamDefaultController.prototype = {};
  A.ReadableByteStreamController.prototype = {};
  A.ReadableStreamBYOBRequest.prototype = {};
  A.WritableStream.prototype = {};
  A.UnderlyingSink.prototype = {};
  A.WritableStreamDefaultWriter.prototype = {};
  A.WritableStreamDefaultController.prototype = {};
  A.TransformStream.prototype = {};
  A.Transformer.prototype = {};
  A.TransformStreamDefaultController.prototype = {};
  A.QueuingStrategy.prototype = {};
  A.QueuingStrategyInit.prototype = {};
  A.ByteLengthQueuingStrategy.prototype = {};
  A.CountQueuingStrategy.prototype = {};
  A.GenericTransformStream.prototype = {};
  A.SVGElement.prototype = {};
  A.SVGBoundingBoxOptions.prototype = {};
  A.SVGGraphicsElement.prototype = {};
  A.SVGGeometryElement.prototype = {};
  A.SVGNumber.prototype = {};
  A.SVGLength.prototype = {};
  A.SVGAngle.prototype = {};
  A.SVGNumberList.prototype = {};
  A.SVGLengthList.prototype = {};
  A.SVGStringList.prototype = {};
  A.SVGAnimatedBoolean.prototype = {};
  A.SVGAnimatedEnumeration.prototype = {};
  A.SVGAnimatedInteger.prototype = {};
  A.SVGAnimatedNumber.prototype = {};
  A.SVGAnimatedLength.prototype = {};
  A.SVGAnimatedAngle.prototype = {};
  A.SVGAnimatedString.prototype = {};
  A.SVGAnimatedRect.prototype = {};
  A.SVGAnimatedNumberList.prototype = {};
  A.SVGAnimatedLengthList.prototype = {};
  A.SVGUnitTypes.prototype = {};
  A.SVGTests.prototype = {};
  A.SVGFitToViewBox.prototype = {};
  A.SVGURIReference.prototype = {};
  A.SVGSVGElement.prototype = {};
  A.SVGGElement.prototype = {};
  A.SVGDefsElement.prototype = {};
  A.SVGDescElement.prototype = {};
  A.SVGMetadataElement.prototype = {};
  A.SVGTitleElement.prototype = {};
  A.SVGSymbolElement.prototype = {};
  A.SVGUseElement.prototype = {};
  A.SVGUseElementShadowRoot.prototype = {};
  A.SVGElementInstance.prototype = {};
  A.ShadowAnimation.prototype = {};
  A.SVGSwitchElement.prototype = {};
  A.GetSVGDocument.prototype = {};
  A.SVGStyleElement.prototype = {};
  A.SVGTransform.prototype = {};
  A.SVGTransformList.prototype = {};
  A.SVGAnimatedTransformList.prototype = {};
  A.SVGPreserveAspectRatio.prototype = {};
  A.SVGAnimatedPreserveAspectRatio.prototype = {};
  A.SVGPathElement.prototype = {};
  A.SVGRectElement.prototype = {};
  A.SVGCircleElement.prototype = {};
  A.SVGEllipseElement.prototype = {};
  A.SVGLineElement.prototype = {};
  A.SVGAnimatedPoints.prototype = {};
  A.SVGPointList.prototype = {};
  A.SVGPolylineElement.prototype = {};
  A.SVGPolygonElement.prototype = {};
  A.SVGTextContentElement.prototype = {};
  A.SVGTextPositioningElement.prototype = {};
  A.SVGTextElement.prototype = {};
  A.SVGTSpanElement.prototype = {};
  A.SVGTextPathElement.prototype = {};
  A.SVGImageElement.prototype = {};
  A.SVGForeignObjectElement.prototype = {};
  A.SVGMarkerElement.prototype = {};
  A.SVGGradientElement.prototype = {};
  A.SVGLinearGradientElement.prototype = {};
  A.SVGRadialGradientElement.prototype = {};
  A.SVGStopElement.prototype = {};
  A.SVGPatternElement.prototype = {};
  A.SVGScriptElement.prototype = {};
  A.SVGAElement.prototype = {};
  A.SVGViewElement.prototype = {};
  A.TimeEvent.prototype = {};
  A.SVGAnimationElement.prototype = {};
  A.SVGAnimateElement.prototype = {};
  A.SVGSetElement.prototype = {};
  A.SVGAnimateMotionElement.prototype = {};
  A.SVGMPathElement.prototype = {};
  A.SVGAnimateTransformElement.prototype = {};
  A.SVGDiscardElement.prototype = {};
  A.TestUtils.prototype = {};
  A.TextDetector.prototype = {};
  A.DetectedText.prototype = {};
  A.TouchInit.prototype = {};
  A.Touch.prototype = {};
  A.TouchList.prototype = {};
  A.TouchEventInit.prototype = {};
  A.TouchEvent.prototype = {};
  A.TrustedHTML.prototype = {};
  A.TrustedScript.prototype = {};
  A.TrustedScriptURL.prototype = {};
  A.TrustedTypePolicyFactory.prototype = {};
  A.TrustedTypePolicy.prototype = {};
  A.TrustedTypePolicyOptions.prototype = {};
  A.NavigatorUABrandVersion.prototype = {};
  A.UADataValues.prototype = {};
  A.UALowEntropyJSON.prototype = {};
  A.NavigatorUAData.prototype = {};
  A.NavigatorUA.prototype = {};
  A.UIEvent.prototype = {};
  A.UIEventInit.prototype = {};
  A.FocusEvent.prototype = {};
  A.FocusEventInit.prototype = {};
  A.MouseEvent.prototype = {};
  A.MouseEventInit.prototype = {};
  A.EventModifierInit.prototype = {};
  A.WheelEvent.prototype = {};
  A.WheelEventInit.prototype = {};
  A.InputEvent.prototype = {};
  A.InputEventInit.prototype = {};
  A.KeyboardEvent.prototype = {};
  A.KeyboardEventInit.prototype = {};
  A.CompositionEvent.prototype = {};
  A.CompositionEventInit.prototype = {};
  A.MutationEvent.prototype = {};
  A.Url.prototype = {};
  A.URLSearchParams.prototype = {};
  A.URLPattern.prototype = {};
  A.URLPatternInit.prototype = {};
  A.URLPatternResult.prototype = {};
  A.URLPatternComponentResult.prototype = {};
  A.PerformanceMarkOptions.prototype = {};
  A.PerformanceMeasureOptions.prototype = {};
  A.PerformanceMark.prototype = {};
  A.PerformanceMeasure.prototype = {};
  A.VideoFrameMetadata.prototype = {};
  A.VirtualKeyboard.prototype = {};
  A.ARIAMixin.prototype = {};
  A.WebAssemblyInstantiatedSource.prototype = {};
  A.WebAssembly.prototype = {};
  A.ModuleExportDescriptor.prototype = {};
  A.ModuleImportDescriptor.prototype = {};
  A.Module.prototype = {};
  A.Instance.prototype = {};
  A.MemoryDescriptor.prototype = {};
  A.Memory.prototype = {};
  A.TableDescriptor.prototype = {};
  A.Table.prototype = {};
  A.GlobalDescriptor.prototype = {};
  A.Global.prototype = {};
  A.AnimationTimeline.prototype = {};
  A.DocumentTimelineOptions.prototype = {};
  A.DocumentTimeline.prototype = {};
  A.Animation.prototype = {};
  A.AnimationEffect.prototype = {};
  A.EffectTiming.prototype = {};
  A.OptionalEffectTiming.prototype = {};
  A.ComputedEffectTiming.prototype = {};
  A.KeyframeEffect.prototype = {};
  A.BaseComputedKeyframe.prototype = {};
  A.BasePropertyIndexedKeyframe.prototype = {};
  A.BaseKeyframe.prototype = {};
  A.KeyframeEffectOptions.prototype = {};
  A.Animatable.prototype = {};
  A.KeyframeAnimationOptions.prototype = {};
  A.GetAnimationsOptions.prototype = {};
  A.GroupEffect.prototype = {};
  A.AnimationNodeList.prototype = {};
  A.SequenceEffect.prototype = {};
  A.AnimationPlaybackEvent.prototype = {};
  A.AnimationPlaybackEventInit.prototype = {};
  A.BluetoothDataFilterInit.prototype = {};
  A.BluetoothManufacturerDataFilterInit.prototype = {};
  A.BluetoothServiceDataFilterInit.prototype = {};
  A.BluetoothLEScanFilterInit.prototype = {};
  A.RequestDeviceOptions.prototype = {};
  A.Bluetooth.prototype = {};
  A.BluetoothPermissionDescriptor.prototype = {};
  A.AllowedBluetoothDevice.prototype = {};
  A.BluetoothPermissionStorage.prototype = {};
  A.BluetoothPermissionResult.prototype = {};
  A.ValueEvent.prototype = {};
  A.ValueEventInit.prototype = {};
  A.BluetoothDevice.prototype = {};
  A.WatchAdvertisementsOptions.prototype = {};
  A.BluetoothManufacturerDataMap.prototype = {};
  A.BluetoothServiceDataMap.prototype = {};
  A.BluetoothAdvertisingEvent.prototype = {};
  A.BluetoothAdvertisingEventInit.prototype = {};
  A.BluetoothRemoteGATTServer.prototype = {};
  A.BluetoothRemoteGATTService.prototype = {};
  A.BluetoothRemoteGATTCharacteristic.prototype = {};
  A.BluetoothCharacteristicProperties.prototype = {};
  A.BluetoothRemoteGATTDescriptor.prototype = {};
  A.CharacteristicEventHandlers.prototype = {};
  A.BluetoothDeviceEventHandlers.prototype = {};
  A.ServiceEventHandlers.prototype = {};
  A.BluetoothUUID.prototype = {};
  A.NavigatorLocks.prototype = {};
  A.LockManager.prototype = {};
  A.LockOptions.prototype = {};
  A.LockManagerSnapshot.prototype = {};
  A.LockInfo.prototype = {};
  A.Lock.prototype = {};
  A.NDEFMessage.prototype = {};
  A.NDEFMessageInit.prototype = {};
  A.NDEFRecord.prototype = {};
  A.NDEFRecordInit.prototype = {};
  A.NDEFReader.prototype = {};
  A.NDEFReadingEvent.prototype = {};
  A.NDEFReadingEventInit.prototype = {};
  A.NDEFWriteOptions.prototype = {};
  A.NDEFMakeReadOnlyOptions.prototype = {};
  A.NDEFScanOptions.prototype = {};
  A.OTPCredential.prototype = {};
  A.OTPCredentialRequestOptions.prototype = {};
  A.ShareData.prototype = {};
  A.BaseAudioContext.prototype = {};
  A.AudioContext.prototype = {};
  A.AudioContextOptions.prototype = {};
  A.AudioTimestamp.prototype = {};
  A.AudioRenderCapacity.prototype = {};
  A.AudioRenderCapacityOptions.prototype = {};
  A.AudioRenderCapacityEvent.prototype = {};
  A.AudioRenderCapacityEventInit.prototype = {};
  A.OfflineAudioContext.prototype = {};
  A.OfflineAudioContextOptions.prototype = {};
  A.OfflineAudioCompletionEvent.prototype = {};
  A.OfflineAudioCompletionEventInit.prototype = {};
  A.AudioBuffer.prototype = {};
  A.AudioBufferOptions.prototype = {};
  A.AudioNode.prototype = {};
  A.AudioNodeOptions.prototype = {};
  A.AudioParam.prototype = {};
  A.AudioScheduledSourceNode.prototype = {};
  A.AnalyserNode.prototype = {};
  A.AnalyserOptions.prototype = {};
  A.AudioBufferSourceNode.prototype = {};
  A.AudioBufferSourceOptions.prototype = {};
  A.AudioDestinationNode.prototype = {};
  A.AudioListener.prototype = {};
  A.AudioProcessingEvent.prototype = {};
  A.AudioProcessingEventInit.prototype = {};
  A.BiquadFilterNode.prototype = {};
  A.BiquadFilterOptions.prototype = {};
  A.ChannelMergerNode.prototype = {};
  A.ChannelMergerOptions.prototype = {};
  A.ChannelSplitterNode.prototype = {};
  A.ChannelSplitterOptions.prototype = {};
  A.ConstantSourceNode.prototype = {};
  A.ConstantSourceOptions.prototype = {};
  A.ConvolverNode.prototype = {};
  A.ConvolverOptions.prototype = {};
  A.DelayNode.prototype = {};
  A.DelayOptions.prototype = {};
  A.DynamicsCompressorNode.prototype = {};
  A.DynamicsCompressorOptions.prototype = {};
  A.GainNode.prototype = {};
  A.GainOptions.prototype = {};
  A.IIRFilterNode.prototype = {};
  A.IIRFilterOptions.prototype = {};
  A.MediaElementAudioSourceNode.prototype = {};
  A.MediaElementAudioSourceOptions.prototype = {};
  A.MediaStreamAudioDestinationNode.prototype = {};
  A.MediaStreamAudioSourceNode.prototype = {};
  A.MediaStreamAudioSourceOptions.prototype = {};
  A.MediaStreamTrackAudioSourceNode.prototype = {};
  A.MediaStreamTrackAudioSourceOptions.prototype = {};
  A.OscillatorNode.prototype = {};
  A.OscillatorOptions.prototype = {};
  A.PannerNode.prototype = {};
  A.PannerOptions.prototype = {};
  A.PeriodicWave.prototype = {};
  A.PeriodicWaveConstraints.prototype = {};
  A.PeriodicWaveOptions.prototype = {};
  A.ScriptProcessorNode.prototype = {};
  A.StereoPannerNode.prototype = {};
  A.StereoPannerOptions.prototype = {};
  A.WaveShaperNode.prototype = {};
  A.WaveShaperOptions.prototype = {};
  A.AudioWorklet.prototype = {};
  A.AudioWorkletGlobalScope.prototype = {};
  A.AudioParamMap.prototype = {};
  A.AudioWorkletNode.prototype = {};
  A.AudioWorkletNodeOptions.prototype = {};
  A.AudioWorkletProcessor.prototype = {};
  A.AudioParamDescriptor.prototype = {};
  A.PublicKeyCredential.prototype = {};
  A.RegistrationResponseJSON.prototype = {};
  A.AuthenticatorAttestationResponseJSON.prototype = {};
  A.AuthenticationResponseJSON.prototype = {};
  A.AuthenticatorAssertionResponseJSON.prototype = {};
  A.AuthenticationExtensionsClientOutputsJSON.prototype = {};
  A.PublicKeyCredentialCreationOptionsJSON.prototype = {};
  A.PublicKeyCredentialUserEntityJSON.prototype = {};
  A.PublicKeyCredentialDescriptorJSON.prototype = {};
  A.AuthenticationExtensionsClientInputsJSON.prototype = {};
  A.PublicKeyCredentialRequestOptionsJSON.prototype = {};
  A.AuthenticatorResponse.prototype = {};
  A.AuthenticatorAttestationResponse.prototype = {};
  A.AuthenticatorAssertionResponse.prototype = {};
  A.PublicKeyCredentialParameters.prototype = {};
  A.PublicKeyCredentialCreationOptions.prototype = {};
  A.PublicKeyCredentialEntity.prototype = {};
  A.PublicKeyCredentialRpEntity.prototype = {};
  A.PublicKeyCredentialUserEntity.prototype = {};
  A.AuthenticatorSelectionCriteria.prototype = {};
  A.PublicKeyCredentialRequestOptions.prototype = {};
  A.AuthenticationExtensionsClientInputs.prototype = {};
  A.AuthenticationExtensionsClientOutputs.prototype = {};
  A.CollectedClientData.prototype = {};
  A.TokenBinding.prototype = {};
  A.PublicKeyCredentialDescriptor.prototype = {};
  A.CredentialPropertiesOutput.prototype = {};
  A.AuthenticationExtensionsPRFValues.prototype = {};
  A.AuthenticationExtensionsPRFInputs.prototype = {};
  A.AuthenticationExtensionsPRFOutputs.prototype = {};
  A.AuthenticationExtensionsLargeBlobInputs.prototype = {};
  A.AuthenticationExtensionsLargeBlobOutputs.prototype = {};
  A.AudioDecoder.prototype = {};
  A.AudioDecoderInit.prototype = {};
  A.VideoDecoder.prototype = {};
  A.VideoDecoderInit.prototype = {};
  A.AudioEncoder.prototype = {};
  A.AudioEncoderInit.prototype = {};
  A.EncodedAudioChunkMetadata.prototype = {};
  A.VideoEncoder.prototype = {};
  A.VideoEncoderInit.prototype = {};
  A.EncodedVideoChunkMetadata.prototype = {};
  A.SvcOutputMetadata.prototype = {};
  A.AudioDecoderSupport.prototype = {};
  A.VideoDecoderSupport.prototype = {};
  A.AudioEncoderSupport.prototype = {};
  A.VideoEncoderSupport.prototype = {};
  A.AudioDecoderConfig.prototype = {};
  A.VideoDecoderConfig.prototype = {};
  A.AudioEncoderConfig.prototype = {};
  A.VideoEncoderConfig.prototype = {};
  A.VideoEncoderEncodeOptions.prototype = {};
  A.EncodedAudioChunk.prototype = {};
  A.EncodedAudioChunkInit.prototype = {};
  A.EncodedVideoChunk.prototype = {};
  A.EncodedVideoChunkInit.prototype = {};
  A.AudioData.prototype = {};
  A.AudioDataInit.prototype = {};
  A.AudioDataCopyToOptions.prototype = {};
  A.VideoFrame.prototype = {};
  A.VideoFrameInit.prototype = {};
  A.VideoFrameBufferInit.prototype = {};
  A.VideoFrameCopyToOptions.prototype = {};
  A.PlaneLayout.prototype = {};
  A.VideoColorSpace.prototype = {};
  A.VideoColorSpaceInit.prototype = {};
  A.ImageDecoder.prototype = {};
  A.ImageDecoderInit.prototype = {};
  A.ImageDecodeOptions.prototype = {};
  A.ImageDecodeResult.prototype = {};
  A.ImageTrackList.prototype = {};
  A.ImageTrack.prototype = {};
  A.Ed448Params.prototype = {};
  A.Crypto.prototype = {};
  A.Algorithm.prototype = {};
  A.KeyAlgorithm.prototype = {};
  A.CryptoKey.prototype = {};
  A.SubtleCrypto.prototype = {};
  A.RsaOtherPrimesInfo.prototype = {};
  A.JsonWebKey.prototype = {};
  A.CryptoKeyPair.prototype = {};
  A.RsaKeyGenParams.prototype = {};
  A.RsaHashedKeyGenParams.prototype = {};
  A.RsaKeyAlgorithm.prototype = {};
  A.RsaHashedKeyAlgorithm.prototype = {};
  A.RsaHashedImportParams.prototype = {};
  A.RsaPssParams.prototype = {};
  A.RsaOaepParams.prototype = {};
  A.EcdsaParams.prototype = {};
  A.EcKeyGenParams.prototype = {};
  A.EcKeyAlgorithm.prototype = {};
  A.EcKeyImportParams.prototype = {};
  A.EcdhKeyDeriveParams.prototype = {};
  A.AesCtrParams.prototype = {};
  A.AesKeyAlgorithm.prototype = {};
  A.AesKeyGenParams.prototype = {};
  A.AesDerivedKeyParams.prototype = {};
  A.AesCbcParams.prototype = {};
  A.AesGcmParams.prototype = {};
  A.HmacImportParams.prototype = {};
  A.HmacKeyAlgorithm.prototype = {};
  A.HmacKeyGenParams.prototype = {};
  A.HkdfParams.prototype = {};
  A.Pbkdf2Params.prototype = {};
  A.NavigatorAutomationInformation.prototype = {};
  A.WebGLContextAttributes.prototype = {};
  A.WebGLObject.prototype = {};
  A.WebGLBuffer.prototype = {};
  A.WebGLFramebuffer.prototype = {};
  A.WebGLProgram.prototype = {};
  A.WebGLRenderbuffer.prototype = {};
  A.WebGLShader.prototype = {};
  A.WebGLTexture.prototype = {};
  A.WebGLUniformLocation.prototype = {};
  A.WebGLActiveInfo.prototype = {};
  A.WebGLShaderPrecisionFormat.prototype = {};
  A.WebGLRenderingContextBase.prototype = {};
  A.WebGLRenderingContextOverloads.prototype = {};
  A.WebGLRenderingContext.prototype = {};
  A.WebGLContextEvent.prototype = {};
  A.WebGLContextEventInit.prototype = {};
  A.WebGLQuery.prototype = {};
  A.WebGLSampler.prototype = {};
  A.WebGLSync.prototype = {};
  A.WebGLTransformFeedback.prototype = {};
  A.WebGLVertexArrayObject.prototype = {};
  A.WebGL2RenderingContextBase.prototype = {};
  A.WebGL2RenderingContextOverloads.prototype = {};
  A.WebGL2RenderingContext.prototype = {};
  A.WEBGLBlendEquationAdvancedCoherent.prototype = {};
  A.WEBGLColorBufferFloat.prototype = {};
  A.WEBGLCompressedTextureAstc.prototype = {};
  A.WEBGLCompressedTextureEtc.prototype = {};
  A.WEBGLCompressedTextureEtc1.prototype = {};
  A.WEBGLCompressedTexturePvrtc.prototype = {};
  A.WEBGLCompressedTextureS3tc.prototype = {};
  A.WEBGLCompressedTextureS3tcSrgb.prototype = {};
  A.WEBGLDebugRendererInfo.prototype = {};
  A.WEBGLDebugShaders.prototype = {};
  A.WEBGLDepthTexture.prototype = {};
  A.WEBGLDrawBuffers.prototype = {};
  A.WEBGLDrawInstancedBaseVertexBaseInstance.prototype = {};
  A.WEBGLLoseContext.prototype = {};
  A.WEBGLMultiDraw.prototype = {};
  A.WEBGLMultiDrawInstancedBaseVertexBaseInstance.prototype = {};
  A.GPUObjectBase.prototype = {};
  A.GPUObjectDescriptorBase.prototype = {};
  A.GPUSupportedLimits.prototype = {};
  A.GPUSupportedFeatures.prototype = {};
  A.GPUAdapterInfo.prototype = {};
  A.NavigatorGPU.prototype = {};
  A.Gpu.prototype = {};
  A.GPURequestAdapterOptions.prototype = {};
  A.GPUAdapter.prototype = {};
  A.GPUDeviceDescriptor.prototype = {};
  A.GPUDevice.prototype = {};
  A.GPUBuffer.prototype = {};
  A.GPUBufferDescriptor.prototype = {};
  A.GPUBufferUsage.prototype = {};
  A.GPUMapMode.prototype = {};
  A.GPUTexture.prototype = {};
  A.GPUTextureDescriptor.prototype = {};
  A.GPUTextureUsage.prototype = {};
  A.GPUTextureView.prototype = {};
  A.GPUTextureViewDescriptor.prototype = {};
  A.GPUExternalTexture.prototype = {};
  A.GPUExternalTextureDescriptor.prototype = {};
  A.GPUSampler.prototype = {};
  A.GPUSamplerDescriptor.prototype = {};
  A.GPUBindGroupLayout.prototype = {};
  A.GPUBindGroupLayoutDescriptor.prototype = {};
  A.GPUBindGroupLayoutEntry.prototype = {};
  A.GPUShaderStage.prototype = {};
  A.GPUBufferBindingLayout.prototype = {};
  A.GPUSamplerBindingLayout.prototype = {};
  A.GPUTextureBindingLayout.prototype = {};
  A.GPUStorageTextureBindingLayout.prototype = {};
  A.GPUExternalTextureBindingLayout.prototype = {};
  A.GPUBindGroup.prototype = {};
  A.GPUBindGroupDescriptor.prototype = {};
  A.GPUBindGroupEntry.prototype = {};
  A.GPUBufferBinding.prototype = {};
  A.GPUPipelineLayout.prototype = {};
  A.GPUPipelineLayoutDescriptor.prototype = {};
  A.GPUShaderModule.prototype = {};
  A.GPUShaderModuleDescriptor.prototype = {};
  A.GPUShaderModuleCompilationHint.prototype = {};
  A.GPUCompilationMessage.prototype = {};
  A.GPUCompilationInfo.prototype = {};
  A.GPUPipelineDescriptorBase.prototype = {};
  A.GPUPipelineBase.prototype = {};
  A.GPUProgrammableStage.prototype = {};
  A.GPUComputePipeline.prototype = {};
  A.GPUComputePipelineDescriptor.prototype = {};
  A.GPURenderPipeline.prototype = {};
  A.GPURenderPipelineDescriptor.prototype = {};
  A.GPUPrimitiveState.prototype = {};
  A.GPUMultisampleState.prototype = {};
  A.GPUFragmentState.prototype = {};
  A.GPUColorTargetState.prototype = {};
  A.GPUBlendState.prototype = {};
  A.GPUColorWrite.prototype = {};
  A.GPUBlendComponent.prototype = {};
  A.GPUDepthStencilState.prototype = {};
  A.GPUStencilFaceState.prototype = {};
  A.GPUVertexState.prototype = {};
  A.GPUVertexBufferLayout.prototype = {};
  A.GPUVertexAttribute.prototype = {};
  A.GPUCommandBuffer.prototype = {};
  A.GPUCommandBufferDescriptor.prototype = {};
  A.GPUCommandsMixin.prototype = {};
  A.GPUCommandEncoder.prototype = {};
  A.GPUCommandEncoderDescriptor.prototype = {};
  A.GPUImageDataLayout.prototype = {};
  A.GPUImageCopyBuffer.prototype = {};
  A.GPUImageCopyTexture.prototype = {};
  A.GPUImageCopyTextureTagged.prototype = {};
  A.GPUImageCopyExternalImage.prototype = {};
  A.GPUBindingCommandsMixin.prototype = {};
  A.GPUDebugCommandsMixin.prototype = {};
  A.GPUComputePassEncoder.prototype = {};
  A.GPUComputePassTimestampWrite.prototype = {};
  A.GPUComputePassDescriptor.prototype = {};
  A.GPURenderPassEncoder.prototype = {};
  A.GPURenderPassTimestampWrite.prototype = {};
  A.GPURenderPassDescriptor.prototype = {};
  A.GPURenderPassColorAttachment.prototype = {};
  A.GPURenderPassDepthStencilAttachment.prototype = {};
  A.GPURenderPassLayout.prototype = {};
  A.GPURenderCommandsMixin.prototype = {};
  A.GPURenderBundle.prototype = {};
  A.GPURenderBundleDescriptor.prototype = {};
  A.GPURenderBundleEncoder.prototype = {};
  A.GPURenderBundleEncoderDescriptor.prototype = {};
  A.GPUQueueDescriptor.prototype = {};
  A.GPUQueue.prototype = {};
  A.GPUQuerySet.prototype = {};
  A.GPUQuerySetDescriptor.prototype = {};
  A.GPUCanvasContext.prototype = {};
  A.GPUCanvasConfiguration.prototype = {};
  A.GPUDeviceLostInfo.prototype = {};
  A.GPUError.prototype = {};
  A.GPUOutOfMemoryError.prototype = {};
  A.GPUValidationError.prototype = {};
  A.GPUUncapturedErrorEvent.prototype = {};
  A.GPUUncapturedErrorEventInit.prototype = {};
  A.GPUColorDict.prototype = {};
  A.GPUOrigin2DDict.prototype = {};
  A.GPUOrigin3DDict.prototype = {};
  A.GPUExtent3DDict.prototype = {};
  A.Hid.prototype = {};
  A.HIDDeviceRequestOptions.prototype = {};
  A.HIDDeviceFilter.prototype = {};
  A.HIDDevice.prototype = {};
  A.HIDConnectionEvent.prototype = {};
  A.HIDConnectionEventInit.prototype = {};
  A.HIDInputReportEvent.prototype = {};
  A.HIDInputReportEventInit.prototype = {};
  A.HIDCollectionInfo.prototype = {};
  A.HIDReportInfo.prototype = {};
  A.HIDReportItem.prototype = {};
  A.DOMException.prototype = {};
  A.MidiPermissionDescriptor.prototype = {};
  A.MIDIOptions.prototype = {};
  A.MIDIInputMap.prototype = {};
  A.MIDIOutputMap.prototype = {};
  A.MIDIAccess.prototype = {};
  A.MIDIPort.prototype = {};
  A.MIDIInput.prototype = {};
  A.MIDIOutput.prototype = {};
  A.MIDIMessageEvent.prototype = {};
  A.MIDIMessageEventInit.prototype = {};
  A.MIDIConnectionEvent.prototype = {};
  A.MIDIConnectionEventInit.prototype = {};
  A.NavigatorML.prototype = {};
  A.MLContextOptions.prototype = {};
  A.Ml.prototype = {};
  A.MLContext.prototype = {};
  A.MLOperandDescriptor.prototype = {};
  A.MLOperand.prototype = {};
  A.MLOperator.prototype = {};
  A.MLBufferResourceView.prototype = {};
  A.MLGraphBuilder.prototype = {};
  A.MLBatchNormalizationOptions.prototype = {};
  A.MLClampOptions.prototype = {};
  A.MLConv2dOptions.prototype = {};
  A.MLConvTranspose2dOptions.prototype = {};
  A.MLEluOptions.prototype = {};
  A.MLGemmOptions.prototype = {};
  A.MLGruOptions.prototype = {};
  A.MLGruCellOptions.prototype = {};
  A.MLHardSigmoidOptions.prototype = {};
  A.MLInstanceNormalizationOptions.prototype = {};
  A.MLLeakyReluOptions.prototype = {};
  A.MLLinearOptions.prototype = {};
  A.MLPadOptions.prototype = {};
  A.MLPool2dOptions.prototype = {};
  A.MLReduceOptions.prototype = {};
  A.MLResample2dOptions.prototype = {};
  A.MLSliceOptions.prototype = {};
  A.MLSoftplusOptions.prototype = {};
  A.MLSplitOptions.prototype = {};
  A.MLSqueezeOptions.prototype = {};
  A.MLTransposeOptions.prototype = {};
  A.MLGraph.prototype = {};
  A.MLCommandEncoder.prototype = {};
  A.RTCConfiguration.prototype = {};
  A.RTCIceServer.prototype = {};
  A.RTCOfferAnswerOptions.prototype = {};
  A.RTCOfferOptions.prototype = {};
  A.RTCAnswerOptions.prototype = {};
  A.RTCPeerConnection.prototype = {};
  A.RTCSessionDescription.prototype = {};
  A.RTCSessionDescriptionInit.prototype = {};
  A.RTCLocalSessionDescriptionInit.prototype = {};
  A.RTCIceCandidate.prototype = {};
  A.RTCIceCandidateInit.prototype = {};
  A.RTCPeerConnectionIceEvent.prototype = {};
  A.RTCPeerConnectionIceEventInit.prototype = {};
  A.RTCPeerConnectionIceErrorEvent.prototype = {};
  A.RTCPeerConnectionIceErrorEventInit.prototype = {};
  A.RTCCertificateExpiration.prototype = {};
  A.RTCCertificate.prototype = {};
  A.RTCRtpTransceiverInit.prototype = {};
  A.RTCRtpSender.prototype = {};
  A.RTCRtpParameters.prototype = {};
  A.RTCRtpSendParameters.prototype = {};
  A.RTCRtpReceiveParameters.prototype = {};
  A.RTCRtpCodingParameters.prototype = {};
  A.RTCRtpEncodingParameters.prototype = {};
  A.RTCRtcpParameters.prototype = {};
  A.RTCRtpHeaderExtensionParameters.prototype = {};
  A.RTCRtpCodecParameters.prototype = {};
  A.RTCRtpCapabilities.prototype = {};
  A.RTCRtpCodecCapability.prototype = {};
  A.RTCRtpHeaderExtensionCapability.prototype = {};
  A.RTCRtpReceiver.prototype = {};
  A.RTCRtpContributingSource.prototype = {};
  A.RTCRtpSynchronizationSource.prototype = {};
  A.RTCRtpTransceiver.prototype = {};
  A.RTCDtlsTransport.prototype = {};
  A.RTCDtlsFingerprint.prototype = {};
  A.RTCIceTransport.prototype = {};
  A.RTCIceParameters.prototype = {};
  A.RTCIceCandidatePair.prototype = {};
  A.RTCTrackEvent.prototype = {};
  A.RTCTrackEventInit.prototype = {};
  A.RTCSctpTransport.prototype = {};
  A.RTCDataChannel.prototype = {};
  A.RTCDataChannelInit.prototype = {};
  A.RTCDataChannelEvent.prototype = {};
  A.RTCDataChannelEventInit.prototype = {};
  A.RTCDTMFSender.prototype = {};
  A.RTCDTMFToneChangeEvent.prototype = {};
  A.RTCDTMFToneChangeEventInit.prototype = {};
  A.RTCStatsReport.prototype = {};
  A.RTCStats.prototype = {};
  A.RTCError.prototype = {};
  A.RTCErrorInit.prototype = {};
  A.RTCErrorEvent.prototype = {};
  A.RTCErrorEventInit.prototype = {};
  A.RTCInsertableStreams.prototype = {};
  A.SFrameTransformOptions.prototype = {};
  A.SFrameTransform.prototype = {};
  A.SFrameTransformErrorEvent.prototype = {};
  A.SFrameTransformErrorEventInit.prototype = {};
  A.RTCEncodedVideoFrameMetadata.prototype = {};
  A.RTCEncodedVideoFrame.prototype = {};
  A.RTCEncodedAudioFrameMetadata.prototype = {};
  A.RTCEncodedAudioFrame.prototype = {};
  A.RTCTransformEvent.prototype = {};
  A.RTCRtpScriptTransformer.prototype = {};
  A.RTCRtpScriptTransform.prototype = {};
  A.RTCIceGatherOptions.prototype = {};
  A.RTCIdentityProviderGlobalScope.prototype = {};
  A.RTCIdentityProviderRegistrar.prototype = {};
  A.RTCIdentityProvider.prototype = {};
  A.RTCIdentityAssertionResult.prototype = {};
  A.RTCIdentityProviderDetails.prototype = {};
  A.RTCIdentityValidationResult.prototype = {};
  A.RTCIdentityProviderOptions.prototype = {};
  A.RTCIdentityAssertion.prototype = {};
  A.RTCRtpStreamStats.prototype = {};
  A.RTCCodecStats.prototype = {};
  A.RTCReceivedRtpStreamStats.prototype = {};
  A.RTCInboundRtpStreamStats.prototype = {};
  A.RTCRemoteInboundRtpStreamStats.prototype = {};
  A.RTCSentRtpStreamStats.prototype = {};
  A.RTCOutboundRtpStreamStats.prototype = {};
  A.RTCRemoteOutboundRtpStreamStats.prototype = {};
  A.RTCMediaSourceStats.prototype = {};
  A.RTCAudioSourceStats.prototype = {};
  A.RTCVideoSourceStats.prototype = {};
  A.RTCPeerConnectionStats.prototype = {};
  A.RTCDataChannelStats.prototype = {};
  A.RTCTransportStats.prototype = {};
  A.RTCIceCandidateStats.prototype = {};
  A.RTCIceCandidatePairStats.prototype = {};
  A.RTCCertificateStats.prototype = {};
  A.WebSocket.prototype = {};
  A.CloseEvent.prototype = {};
  A.CloseEventInit.prototype = {};
  A.WebTransportDatagramDuplexStream.prototype = {};
  A.WebTransport.prototype = {};
  A.WebTransportHash.prototype = {};
  A.WebTransportOptions.prototype = {};
  A.WebTransportCloseInfo.prototype = {};
  A.WebTransportStats.prototype = {};
  A.WebTransportDatagramStats.prototype = {};
  A.WebTransportSendStream.prototype = {};
  A.WebTransportSendStreamStats.prototype = {};
  A.WebTransportReceiveStream.prototype = {};
  A.WebTransportReceiveStreamStats.prototype = {};
  A.WebTransportBidirectionalStream.prototype = {};
  A.WebTransportError.prototype = {};
  A.WebTransportErrorInit.prototype = {};
  A.USBDeviceFilter.prototype = {};
  A.USBDeviceRequestOptions.prototype = {};
  A.Usb.prototype = {};
  A.USBConnectionEventInit.prototype = {};
  A.USBConnectionEvent.prototype = {};
  A.USBInTransferResult.prototype = {};
  A.USBOutTransferResult.prototype = {};
  A.USBIsochronousInTransferPacket.prototype = {};
  A.USBIsochronousInTransferResult.prototype = {};
  A.USBIsochronousOutTransferPacket.prototype = {};
  A.USBIsochronousOutTransferResult.prototype = {};
  A.USBDevice.prototype = {};
  A.USBControlTransferParameters.prototype = {};
  A.USBConfiguration.prototype = {};
  A.USBInterface.prototype = {};
  A.USBAlternateInterface.prototype = {};
  A.USBEndpoint.prototype = {};
  A.USBPermissionDescriptor.prototype = {};
  A.AllowedUSBDevice.prototype = {};
  A.USBPermissionStorage.prototype = {};
  A.USBPermissionResult.prototype = {};
  A.VTTCue.prototype = {};
  A.VTTRegion.prototype = {};
  A.XRSystem.prototype = {};
  A.XRSessionInit.prototype = {};
  A.XRSession.prototype = {};
  A.XRRenderStateInit.prototype = {};
  A.XRRenderState.prototype = {};
  A.XRFrame.prototype = {};
  A.XRSpace.prototype = {};
  A.XRReferenceSpace.prototype = {};
  A.XRBoundedReferenceSpace.prototype = {};
  A.XRView.prototype = {};
  A.XRViewport.prototype = {};
  A.XRRigidTransform.prototype = {};
  A.XRPose.prototype = {};
  A.XRViewerPose.prototype = {};
  A.XRInputSource.prototype = {};
  A.XRInputSourceArray.prototype = {};
  A.XRLayer.prototype = {};
  A.XRWebGLLayerInit.prototype = {};
  A.XRWebGLLayer.prototype = {};
  A.XRSessionEvent.prototype = {};
  A.XRSessionEventInit.prototype = {};
  A.XRInputSourceEvent.prototype = {};
  A.XRInputSourceEventInit.prototype = {};
  A.XRInputSourcesChangeEvent.prototype = {};
  A.XRInputSourcesChangeEventInit.prototype = {};
  A.XRReferenceSpaceEvent.prototype = {};
  A.XRReferenceSpaceEventInit.prototype = {};
  A.XRSessionSupportedPermissionDescriptor.prototype = {};
  A.XRPermissionDescriptor.prototype = {};
  A.XRPermissionStatus.prototype = {};
  A.XRDepthStateInit.prototype = {};
  A.XRDepthInformation.prototype = {};
  A.XRCPUDepthInformation.prototype = {};
  A.XRWebGLDepthInformation.prototype = {};
  A.XRDOMOverlayInit.prototype = {};
  A.XRDOMOverlayState.prototype = {};
  A.XRHand.prototype = {};
  A.XRJointSpace.prototype = {};
  A.XRJointPose.prototype = {};
  A.XRHitTestOptionsInit.prototype = {};
  A.XRTransientInputHitTestOptionsInit.prototype = {};
  A.XRHitTestSource.prototype = {};
  A.XRTransientInputHitTestSource.prototype = {};
  A.XRHitTestResult.prototype = {};
  A.XRTransientInputHitTestResult.prototype = {};
  A.XRRayDirectionInit.prototype = {};
  A.XRRay.prototype = {};
  A.XRLightProbe.prototype = {};
  A.XRLightEstimate.prototype = {};
  A.XRLightProbeInit.prototype = {};
  A.XRCompositionLayer.prototype = {};
  A.XRProjectionLayer.prototype = {};
  A.XRQuadLayer.prototype = {};
  A.XRCylinderLayer.prototype = {};
  A.XREquirectLayer.prototype = {};
  A.XRCubeLayer.prototype = {};
  A.XRSubImage.prototype = {};
  A.XRWebGLSubImage.prototype = {};
  A.XRProjectionLayerInit.prototype = {};
  A.XRLayerInit.prototype = {};
  A.XRQuadLayerInit.prototype = {};
  A.XRCylinderLayerInit.prototype = {};
  A.XREquirectLayerInit.prototype = {};
  A.XRCubeLayerInit.prototype = {};
  A.XRWebGLBinding.prototype = {};
  A.XRMediaLayerInit.prototype = {};
  A.XRMediaQuadLayerInit.prototype = {};
  A.XRMediaCylinderLayerInit.prototype = {};
  A.XRMediaEquirectLayerInit.prototype = {};
  A.XRMediaBinding.prototype = {};
  A.XRLayerEvent.prototype = {};
  A.XRLayerEventInit.prototype = {};
  A.WindowControlsOverlay.prototype = {};
  A.WindowControlsOverlayGeometryChangeEvent.prototype = {};
  A.WindowControlsOverlayGeometryChangeEventInit.prototype = {};
  A.ScreenDetails.prototype = {};
  A.ScreenDetailed.prototype = {};
  A.XMLHttpRequestEventTarget.prototype = {};
  A.XMLHttpRequestUpload.prototype = {};
  A.XMLHttpRequest.prototype = {};
  A.FormData.prototype = {};
  A.ProgressEvent.prototype = {};
  A.ProgressEventInit.prototype = {};
  A.JsArray0.prototype = {};
  A.Symbol2.prototype = {};
  A.JsIterator.prototype = {};
  A.AsyncIterator0.prototype = {};
  A.IteratorResult0.prototype = {};
  A.JsIterable.prototype = {};
  A.JSObject.prototype = {};
  A.JsMap.prototype = {};
  A.Number.prototype = {};
  A.Reflect.prototype = {};
  A.Context.prototype = {
    absolute$1(part1) {
      var t2, parts,
        t1 = type$.JSArray_nullable_String;
      A._validateArgList("absolute", A._setArrayType([part1, null, null, null, null, null, null, null, null, null, null, null, null, null, null], t1));
      t2 = this.style;
      t2 = t2.rootLength$1(part1) > 0 && !t2.isRootRelative$1(part1);
      if (t2)
        return part1;
      t2 = A.current();
      parts = A._setArrayType([t2, part1, null, null, null, null, null, null, null, null, null, null, null, null, null, null], t1);
      A._validateArgList("join", parts);
      return this.joinAll$1(new A.WhereTypeIterable(parts, type$.WhereTypeIterable_String));
    },
    joinAll$1(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      type$.Iterable_String._as(parts);
      for (t1 = parts.$ti, t2 = t1._eval$1("bool(Iterable.E)")._as(new A.Context_joinAll_closure()), t3 = parts.get$iterator(parts), t1 = new A.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t3.get$current();
        if (t2.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = A.ParsedPath_ParsedPath$parse(t5, t2);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = B.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            B.JSArray_methods.$indexSet(parsed.separators, 0, t2.get$separator());
          t4 = "" + parsed.toString$0(0);
        } else if (t2.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t2.isRootRelative$1(t5);
          t4 = "" + t5;
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return A.ioore(t5, 0);
            t6 = t2.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t2.get$separator();
          t4 += t5;
        }
        needsSeparator = t2.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1(_, path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>");
      parsed.set$parts(A.List_List$of(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Context_split_closure()), t3), true, t3._eval$1("Iterable.E")));
      t1 = parsed.root;
      if (t1 != null)
        B.JSArray_methods.insert$2(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1(path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var i, start, previous, t2, t3, previousPrevious, codeUnit, t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (i = 0; i < root; ++i)
            if (B.JSString_methods._codeUnitAt$1(path, i) === 47)
              return true;
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new A.CodeUnits(path).__internal$_string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        codeUnit = B.JSString_methods.codeUnitAt$1(t2, i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1(path) {
      var from, fromParsed, pathParsed, t3, t4, t5, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = _this.style,
        t2 = t1.rootLength$1(path);
      if (t2 <= 0)
        return _this.normalize$1(path);
      from = A.current();
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      fromParsed = A.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0();
      pathParsed = A.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0();
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = J.$eq$(t2[0], ".");
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        t3 = t2.length;
        if (t3 !== 0) {
          t4 = pathParsed.parts;
          t5 = t4.length;
          if (t5 !== 0) {
            if (0 >= t3)
              return A.ioore(t2, 0);
            t2 = t2[0];
            if (0 >= t5)
              return A.ioore(t4, 0);
            t4 = t1.pathsEqual$2(t2, t4[0]);
            t2 = t4;
          } else
            t2 = false;
        } else
          t2 = false;
        if (!t2)
          break;
        B.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        B.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        B.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        B.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = J.$eq$(t2[0], "..");
      } else
        t2 = false;
      if (t2)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      t2 = type$.String;
      B.JSArray_methods.insertAll$2(pathParsed.parts, 0, A.List_List$filled(fromParsed.parts.length, "..", false, t2));
      B.JSArray_methods.$indexSet(pathParsed.separators, 0, "");
      B.JSArray_methods.insertAll$2(pathParsed.separators, 1, A.List_List$filled(fromParsed.parts.length, t1.get$separator(), false, t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq$(B.JSArray_methods.get$last(t1), ".")) {
        B.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        B.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    prettyUri$1(uri) {
      var path, rel, _this = this,
        typedUri = A._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style === $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style !== $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(_this.style.pathFromUri$1(A._parseUri(typedUri)));
      rel = _this.relative$1(path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  A.Context_joinAll_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 24
  };
  A.Context_split_closure.prototype = {
    call$1(part) {
      return A._asString(part).length !== 0;
    },
    $signature: 24
  };
  A._validateArgList_closure.prototype = {
    call$1(arg) {
      A._asStringQ(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 52
  };
  A.InternalStyle.prototype = {
    getRoot$1(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return B.JSString_methods.substring$2(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    pathsEqual$2(path1, path2) {
      return path1 === path2;
    }
  };
  A.ParsedPath.prototype = {
    removeTrailingSeparators$0() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(B.JSArray_methods.get$last(t1), "")))
          break;
        B.JSArray_methods.removeLast$0(_this.parts);
        t1 = _this.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        B.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$0() {
      var t1, t2, leadingDoubles, _i, part, t3, _this = this,
        newParts = A._setArrayType([], type$.JSArray_String);
      for (t1 = _this.parts, t2 = t1.length, leadingDoubles = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        t3 = J.getInterceptor$(part);
        if (!(t3.$eq(part, ".") || t3.$eq(part, "")))
          if (t3.$eq(part, "..")) {
            t3 = newParts.length;
            if (t3 !== 0) {
              if (0 >= t3)
                return A.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            B.JSArray_methods.add$1(newParts, part);
      }
      if (_this.root == null)
        B.JSArray_methods.insertAll$2(newParts, 0, A.List_List$filled(leadingDoubles, "..", false, type$.String));
      if (newParts.length === 0 && _this.root == null)
        B.JSArray_methods.add$1(newParts, ".");
      _this.set$parts(newParts);
      t1 = _this.style;
      _this.set$separators(A.List_List$filled(newParts.length + 1, t1.get$separator(), true, type$.String));
      t2 = _this.root;
      if (t2 == null || newParts.length === 0 || !t1.needsSeparator$1(t2))
        B.JSArray_methods.$indexSet(_this.separators, 0, "");
      t2 = _this.root;
      if (t2 != null && t1 === $.$get$Style_windows()) {
        t2.toString;
        _this.root = A.stringReplaceAllUnchecked(t2, "/", "\\");
      }
      _this.removeTrailingSeparators$0();
    },
    toString$0(_) {
      var i, t2, t3, _this = this,
        t1 = _this.root;
      t1 = t1 != null ? "" + t1 : "";
      for (i = 0; i < _this.parts.length; ++i, t1 = t3) {
        t2 = _this.separators;
        if (!(i < t2.length))
          return A.ioore(t2, i);
        t2 = A.S(t2[i]);
        t3 = _this.parts;
        if (!(i < t3.length))
          return A.ioore(t3, i);
        t3 = t1 + t2 + A.S(t3[i]);
      }
      t1 += A.S(B.JSArray_methods.get$last(_this.separators));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$parts(parts) {
      this.parts = type$.List_String._as(parts);
    },
    set$separators(separators) {
      this.separators = type$.List_String._as(separators);
    }
  };
  A.PathException.prototype = {
    toString$0(_) {
      return "PathException: " + this.message;
    },
    $isException: 1
  };
  A.Style.prototype = {
    toString$0(_) {
      return this.get$name();
    }
  };
  A.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      return t1 !== 0 && B.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47;
    },
    rootLength$2$withDrive(path, withDrive) {
      if (path.length !== 0 && B.JSString_methods._codeUnitAt$1(path, 0) === 47)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return false;
    },
    pathFromUri$1(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path();
        return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
      }
      throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
    },
    get$name() {
      return "posix";
    },
    get$separator() {
      return "/";
    }
  };
  A.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      if (B.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47)
        return true;
      return B.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var i, codeUnit, index, t2,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (B.JSString_methods._codeUnitAt$1(path, 0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(path, i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = B.JSString_methods.indexOf$2(path, "/", B.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!B.JSString_methods.startsWith$1(path, "file://"))
            return index;
          if (!A.isDriveLetter(path, index + 1))
            return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return path.length !== 0 && B.JSString_methods._codeUnitAt$1(path, 0) === 47;
    },
    pathFromUri$1(uri) {
      return uri.toString$0(0);
    },
    get$name() {
      return "url";
    },
    get$separator() {
      return "/";
    }
  };
  A.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      t1 = B.JSString_methods.codeUnitAt$1(path, t1 - 1);
      return !(t1 === 47 || t1 === 92);
    },
    rootLength$2$withDrive(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      t2 = B.JSString_methods._codeUnitAt$1(path, 0);
      if (t2 === 47)
        return 1;
      if (t2 === 92) {
        if (t1 < 2 || B.JSString_methods._codeUnitAt$1(path, 1) !== 92)
          return 1;
        index = B.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = B.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!A.isAlphabetic(t2))
        return 0;
      if (B.JSString_methods._codeUnitAt$1(path, 1) !== 58)
        return 0;
      t1 = B.JSString_methods._codeUnitAt$1(path, 2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
      path = uri.get$path();
      if (uri.get$host() === "") {
        t1 = path.length;
        if (t1 >= 3 && B.JSString_methods.startsWith$1(path, "/") && A.isDriveLetter(path, 1)) {
          A.RangeError_checkValueInInterval(0, 0, t1, "startIndex");
          path = A.stringReplaceFirstUnchecked(path, "/", "", 0);
        }
      } else
        path = "\\\\" + uri.get$host() + path;
      t1 = A.stringReplaceAllUnchecked(path, "/", "\\");
      return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2(path1, path2) {
      var t1, i;
      if (path1 === path2)
        return true;
      t1 = path1.length;
      if (t1 !== path2.length)
        return false;
      for (i = 0; i < t1; ++i)
        if (!this.codeUnitsEqual$2(B.JSString_methods._codeUnitAt$1(path1, i), B.JSString_methods._codeUnitAt$1(path2, i)))
          return false;
      return true;
    },
    get$name() {
      return "windows";
    },
    get$separator() {
      return "\\";
    }
  };
  A.PostgrestClient.prototype = {};
  A.PostgrestBuilder.prototype = {
    PostgrestBuilder$8$body$headers$httpClient$isolate$method$options$schema$url(body, headers, httpClient, isolate, method, options, schema, url, $T, $S) {
      var _this = this;
      _this.__PostgrestBuilder__url_A = url;
      type$.Map_String_String._as(headers);
      _this.__PostgrestBuilder__headers_F !== $ && A.throwLateFieldAI("_headers");
      _this.set$__PostgrestBuilder__headers_F(headers);
      _this.__PostgrestBuilder__schema_F !== $ && A.throwLateFieldAI("_schema");
      _this.__PostgrestBuilder__schema_F = schema;
      _this._postgrest_builder$_method = method;
      _this._body = body;
      _this.__PostgrestBuilder__httpClient_F !== $ && A.throwLateFieldAI("_httpClient");
      _this.__PostgrestBuilder__httpClient_F = httpClient;
      _this.__PostgrestBuilder__isolate_F !== $ && A.throwLateFieldAI("_isolate");
      _this.__PostgrestBuilder__isolate_F = isolate;
      _this._options = options;
    },
    _execute$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.PostgrestResponse_dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, uppercaseMethod, response, bodyStr, t2, t3, exception, t1, $async$exception, $async$temp1;
      var $async$_execute$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._options == null && null;
              if (t1 === true)
                $async$self._postgrest_builder$_method = "HEAD";
              $async$handler = 4;
              t1 = $async$self._postgrest_builder$_method;
              if (t1 == null) {
                t1 = A.ArgumentError$("Missing table operation: select, insert, update or delete", null);
                throw A.wrapException(t1);
              }
              uppercaseMethod = t1.toUpperCase();
              response = A._Cell$named("response");
              t1 = $async$self.__PostgrestBuilder__schema_F;
              t1 === $ && A.throwLateFieldNI("_schema");
              t2 = B.JSArray_methods.contains$1(A._setArrayType(["GET", "HEAD"], type$.JSArray_String), $async$self._postgrest_builder$_method);
              t3 = $async$self.__PostgrestBuilder__headers_F;
              if (t2) {
                t3 === $ && A.throwLateFieldNI("_headers");
                t3.$indexSet(0, "Accept-Profile", t1);
              } else {
                t3 === $ && A.throwLateFieldNI("_headers");
                t3.$indexSet(0, "Content-Profile", t1);
              }
              t1 = $async$self._postgrest_builder$_method;
              if (t1 !== "GET" && t1 !== "HEAD") {
                t1 = $async$self.__PostgrestBuilder__headers_F;
                t1 === $ && A.throwLateFieldNI("_headers");
                t1.$indexSet(0, "Content-Type", "application/json");
              }
              bodyStr = B.C_JsonCodec.encode$2$toEncodable($async$self._body, null);
              $async$goto = J.$eq$(uppercaseMethod, "GET") ? 7 : 9;
              break;
            case 7:
              // then
              t1 = $async$self.__PostgrestBuilder__httpClient_F;
              t1 === $ && A.throwLateFieldNI("_httpClient");
              t1 = t1.get$get();
              t2 = $async$self.__PostgrestBuilder__url_A;
              t2 === $ && A.throwLateFieldNI("_url");
              t3 = $async$self.__PostgrestBuilder__headers_F;
              t3 === $ && A.throwLateFieldNI("_headers");
              $async$temp1 = response;
              $async$goto = 10;
              return A._asyncAwait(t1.call$2$headers(t2, t3), $async$_execute$0);
            case 10:
              // returning from await.
              $async$temp1.__late_helper$_value = $async$result;
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              $async$goto = J.$eq$(uppercaseMethod, "POST") ? 11 : 13;
              break;
            case 11:
              // then
              t1 = $async$self.__PostgrestBuilder__httpClient_F;
              t1 === $ && A.throwLateFieldNI("_httpClient");
              t1 = t1.get$post();
              t2 = $async$self.__PostgrestBuilder__url_A;
              t2 === $ && A.throwLateFieldNI("_url");
              t3 = $async$self.__PostgrestBuilder__headers_F;
              t3 === $ && A.throwLateFieldNI("_headers");
              $async$temp1 = response;
              $async$goto = 14;
              return A._asyncAwait(t1.call$3$body$headers(t2, bodyStr, t3), $async$_execute$0);
            case 14:
              // returning from await.
              $async$temp1.__late_helper$_value = $async$result;
              // goto join
              $async$goto = 12;
              break;
            case 13:
              // else
              $async$goto = J.$eq$(uppercaseMethod, "PUT") ? 15 : 17;
              break;
            case 15:
              // then
              t1 = $async$self.__PostgrestBuilder__httpClient_F;
              t1 === $ && A.throwLateFieldNI("_httpClient");
              t1 = t1.get$put();
              t2 = $async$self.__PostgrestBuilder__url_A;
              t2 === $ && A.throwLateFieldNI("_url");
              t3 = $async$self.__PostgrestBuilder__headers_F;
              t3 === $ && A.throwLateFieldNI("_headers");
              $async$temp1 = response;
              $async$goto = 18;
              return A._asyncAwait(t1.call$3$body$headers(t2, bodyStr, t3), $async$_execute$0);
            case 18:
              // returning from await.
              $async$temp1.__late_helper$_value = $async$result;
              // goto join
              $async$goto = 16;
              break;
            case 17:
              // else
              $async$goto = J.$eq$(uppercaseMethod, "PATCH") ? 19 : 21;
              break;
            case 19:
              // then
              t1 = $async$self.__PostgrestBuilder__httpClient_F;
              t1 === $ && A.throwLateFieldNI("_httpClient");
              t1 = t1.get$patch();
              t2 = $async$self.__PostgrestBuilder__url_A;
              t2 === $ && A.throwLateFieldNI("_url");
              t3 = $async$self.__PostgrestBuilder__headers_F;
              t3 === $ && A.throwLateFieldNI("_headers");
              $async$temp1 = response;
              $async$goto = 22;
              return A._asyncAwait(t1.call$3$body$headers(t2, bodyStr, t3), $async$_execute$0);
            case 22:
              // returning from await.
              $async$temp1.__late_helper$_value = $async$result;
              // goto join
              $async$goto = 20;
              break;
            case 21:
              // else
              $async$goto = J.$eq$(uppercaseMethod, "DELETE") ? 23 : 25;
              break;
            case 23:
              // then
              t1 = $async$self.__PostgrestBuilder__httpClient_F;
              t1 === $ && A.throwLateFieldNI("_httpClient");
              t1 = t1.get$$delete();
              t2 = $async$self.__PostgrestBuilder__url_A;
              t2 === $ && A.throwLateFieldNI("_url");
              t3 = $async$self.__PostgrestBuilder__headers_F;
              t3 === $ && A.throwLateFieldNI("_headers");
              $async$temp1 = response;
              $async$goto = 26;
              return A._asyncAwait(t1.call$2$headers(t2, t3), $async$_execute$0);
            case 26:
              // returning from await.
              $async$temp1.__late_helper$_value = $async$result;
              // goto join
              $async$goto = 24;
              break;
            case 25:
              // else
              $async$goto = J.$eq$(uppercaseMethod, "HEAD") ? 27 : 28;
              break;
            case 27:
              // then
              t1 = $async$self.__PostgrestBuilder__httpClient_F;
              t1 === $ && A.throwLateFieldNI("_httpClient");
              t1 = t1.get$head();
              t2 = $async$self.__PostgrestBuilder__url_A;
              t2 === $ && A.throwLateFieldNI("_url");
              t3 = $async$self.__PostgrestBuilder__headers_F;
              t3 === $ && A.throwLateFieldNI("_headers");
              $async$temp1 = response;
              $async$goto = 29;
              return A._asyncAwait(t1.call$2$headers(t2, t3), $async$_execute$0);
            case 29:
              // returning from await.
              $async$temp1.__late_helper$_value = $async$result;
            case 28:
              // join
            case 24:
              // join
            case 20:
              // join
            case 16:
              // join
            case 12:
              // join
            case 8:
              // join
              t1 = $async$self._parseResponse$1(response._readLocal$0());
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_execute$0, $async$completer);
    },
    _parseResponse$1(response) {
      return this._parseResponse$body$PostgrestBuilder(response);
    },
    _parseResponse$body$PostgrestBuilder(response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.PostgrestResponse_dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, body, error, errorJson, t2, t3, exception, contentRange, count, t4, t5, t6, t1, $async$exception;
      var $async$_parseResponse$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = response.statusCode;
              $async$goto = t1 >= 200 && t1 <= 299 ? 3 : 5;
              break;
            case 3:
              // then
              body = null;
              t1 = response.request;
              $async$goto = t1.method !== "HEAD" ? 6 : 7;
              break;
            case 6:
              // then
              $async$goto = J.$eq$(t1.headers.$index(0, "Accept"), "text/csv") ? 8 : 10;
              break;
            case 8:
              // then
              body = A.encodingForCharset(A._contentTypeForHeaders(response.headers).parameters._map.$index(0, "charset")).decode$1(response.bodyBytes);
              // goto join
              $async$goto = 9;
              break;
            case 10:
              // else
              $async$handler = 12;
              t1 = response.contentLength;
              if ((t1 == null ? 0 : t1) > 10000) {
                $async$self.__PostgrestBuilder__isolate_F === $ && A.throwLateFieldNI("_isolate");
                t1 = true;
              } else
                t1 = false;
              t2 = response.headers;
              t3 = response.bodyBytes;
              $async$goto = t1 ? 15 : 17;
              break;
            case 15:
              // then
              t1 = $async$self.__PostgrestBuilder__isolate_F;
              t1 === $ && A.throwLateFieldNI("_isolate");
              $async$goto = 18;
              return A._asyncAwait(t1.decode$1(A.encodingForCharset(A._contentTypeForHeaders(t2).parameters._map.$index(0, "charset")).decode$1(t3)), $async$_parseResponse$1);
            case 18:
              // returning from await.
              body = $async$result;
              // goto join
              $async$goto = 16;
              break;
            case 17:
              // else
              body = B.C_JsonCodec.decode$2$reviver(A.encodingForCharset(A._contentTypeForHeaders(t2).parameters._map.$index(0, "charset")).decode$1(t3), null);
            case 16:
              // join
              $async$handler = 2;
              // goto after finally
              $async$goto = 14;
              break;
            case 12:
              // catch
              $async$handler = 11;
              $async$exception = $async$currentError;
              if (type$.FormatException._is(A.unwrapException($async$exception)))
                body = null;
              else
                throw $async$exception;
              // goto after finally
              $async$goto = 14;
              break;
            case 11:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 14:
              // after finally
            case 9:
              // join
            case 7:
              // join
              contentRange = response.headers.$index(0, "content-range");
              if (contentRange != null && contentRange.length > 1)
                count = J.$eq$(B.JSArray_methods.get$last(contentRange.split("/")), "*") ? null : A.int_parse(B.JSArray_methods.get$last(contentRange.split("/")), null);
              else
                count = null;
              t1 = A._instanceType($async$self)._eval$1("PostgrestBuilder.S");
              if (A.createRuntimeType(t1) === B.Type_List_naM)
                body = t1._as(A.List_List$from(type$.Iterable_dynamic._as(body), true, type$.Map_String_dynamic));
              else if (A.createRuntimeType(t1) === B.Type_List_naM0)
                body = t1._as(A.List_List$from(type$.Iterable_dynamic._as(body), true, type$.Map_dynamic_dynamic));
              else if (A.createRuntimeType(t1) === B.Type_Map_2Zi)
                body = t1._as(A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(body), type$.String, type$.dynamic));
              else if (A.createRuntimeType(t1) === B.Type_ccy)
                if (body == null) {
                  t1._as(null);
                  body = null;
                } else
                  body = t1._as(A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(body), type$.String, type$.dynamic));
              else if (A.createRuntimeType(t1) === B.Type_PostgrestResponse_Qo2) {
                body = A.List_List$from(type$.Iterable_dynamic._as(body), true, type$.Map_String_dynamic);
                $async$returnValue = new A.PostgrestResponse(type$.nullable_List_Map_String_dynamic._as(body), count, type$.PostgrestResponse_List_Map_String_dynamic);
                // goto return
                $async$goto = 1;
                break;
              } else if (A.createRuntimeType(t1) === B.Type_PostgrestResponse_Qo20) {
                body = A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(body), type$.String, type$.dynamic);
                $async$returnValue = new A.PostgrestResponse(type$.nullable_Map_String_dynamic._as(body), count, type$.PostgrestResponse_Map_String_dynamic);
                // goto return
                $async$goto = 1;
                break;
              } else if (A.createRuntimeType(t1) === B.Type_PostgrestResponse_Qo21) {
                if (body == null)
                  body = null;
                else
                  body = A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(body), type$.String, type$.dynamic);
                $async$returnValue = new A.PostgrestResponse(type$.nullable_Map_String_dynamic._as(body), count, type$.PostgrestResponse_nullable_Map_String_dynamic);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = new A.PostgrestResponse(body, count, type$.PostgrestResponse_dynamic);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              error = A._Cell$named("error");
              if (response.request.method !== "HEAD")
                try {
                  t2 = response.headers;
                  t3 = response.bodyBytes;
                  errorJson = type$.Map_String_dynamic._as(B.C_JsonCodec.decode$2$reviver(A.encodingForCharset(A._contentTypeForHeaders(t2).parameters._map.$index(0, "charset")).decode$1(t3), null));
                  t4 = errorJson;
                  t3 = A.encodingForCharset(A._contentTypeForHeaders(t2).parameters._map.$index(0, "charset")).decode$1(t3);
                  t2 = response.reasonPhrase;
                  t5 = t4.$index(0, "message");
                  t3 = A._asString(t5 == null ? t3 : t5);
                  t5 = t4.$index(0, "code");
                  t5 = A._asStringQ(t5 == null ? "" + t1 : t5);
                  t6 = t4.$index(0, "details");
                  t2 = t6 == null ? t2 : t6;
                  error.__late_helper$_value = new A.PostgrestException(t3, t5, t2, A._asStringQ(t4.$index(0, "hint")));
                } catch (exception) {
                  error.__late_helper$_value = new A.PostgrestException(A.encodingForCharset(A._contentTypeForHeaders(response.headers).parameters._map.$index(0, "charset")).decode$1(response.bodyBytes), "" + t1, response.reasonPhrase, null);
                }
              else
                error.__late_helper$_value = new A.PostgrestException(A.encodingForCharset(A._contentTypeForHeaders(response.headers).parameters._map.$index(0, "charset")).decode$1(response.bodyBytes), "" + t1, "Error in Postgrest response for method HEAD", response.reasonPhrase);
              throw A.wrapException(error.readLocal$0());
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_parseResponse$1, $async$completer);
    },
    appendSearchParams$2(key, value) {
      var t2, searchParams,
        t1 = this.__PostgrestBuilder__url_A;
      t1 === $ && A.throwLateFieldNI("_url");
      t2 = type$.dynamic;
      searchParams = A.LinkedHashMap_LinkedHashMap$from(t1.get$queryParametersAll(), type$.String, t2);
      t1 = searchParams.$index(0, key);
      if (t1 == null)
        t1 = [];
      t2 = A.List_List$of(type$.Iterable_dynamic._as(t1), true, t2);
      t2.push(value);
      searchParams.$indexSet(0, key, t2);
      this.__PostgrestBuilder__url_A = this.__PostgrestBuilder__url_A.replace$1$queryParameters(0, searchParams);
    },
    then$1$2$onError(_, onValue, onError, $R) {
      return this.then$body$PostgrestBuilder(0, A._instanceType(this)._bind$1($R)._eval$1("1/(PostgrestBuilder.T)")._as(onValue), onError, $R, $R);
    },
    then$1$1($receiver, onValue, $R) {
      return this.then$1$2$onError($receiver, onValue, null, $R);
    },
    then$body$PostgrestBuilder(_, onValue, onError, $R, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, response, data, error, stack, result, t2, t3, exception, t1, $async$exception;
      var $async$then$1$2$onError = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = onError != null;
              if (t1 && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
                throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait($async$self._execute$0(), $async$then$1$2$onError);
            case 7:
              // returning from await.
              response = $async$result;
              data = response.data;
              t2 = $async$self._options == null && null;
              t2 = t2 === true || response.count != null;
              t3 = A._instanceType($async$self)._eval$1("PostgrestBuilder.T");
              if (t2) {
                t2 = onValue.call$1(t3._as(response));
                $async$returnValue = t2;
                // goto return
                $async$goto = 1;
                break;
              } else {
                t2 = onValue.call$1(t3._as(data));
                $async$returnValue = t2;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              error = A.unwrapException($async$exception);
              stack = A.getTraceFromException($async$exception);
              result = null;
              if (t1) {
                if (type$.dynamic_Function_Object_StackTrace._is(onError))
                  result = onError.call$2(error, stack);
                else if (type$.dynamic_Function_Object._is(onError))
                  result = onError.call$1(error);
                else
                  throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
                try {
                  t1 = $R._eval$1("0/")._as(result);
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                } catch (exception) {
                  if (type$.TypeError._is(A.unwrapException($async$exception)))
                    throw A.wrapException(A.ArgumentError$(string$.The_er, "onError"));
                  else
                    throw $async$exception;
                }
              }
              throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$then$1$2$onError, $async$completer);
    },
    whenComplete$1(action) {
      type$.void_Function._as(action);
      return this.then$1$2$onError(0, new A.PostgrestBuilder_whenComplete_closure(this, action), new A.PostgrestBuilder_whenComplete_closure0(action), A._instanceType(this)._eval$1("PostgrestBuilder.T"));
    },
    set$__PostgrestBuilder__headers_F(__PostgrestBuilder__headers_F) {
      this.__PostgrestBuilder__headers_F = type$.Map_String_String._as(__PostgrestBuilder__headers_F);
    },
    $isFuture: 1
  };
  A.PostgrestBuilder_whenComplete_closure.prototype = {
    call$1(v) {
      var f2,
        t1 = this.$this,
        t2 = A._instanceType(t1)._eval$1("PostgrestBuilder.T");
      t2._as(v);
      f2 = this.action.call$0();
      if (type$.Future_dynamic._is(f2))
        return f2.then$1$1(0, new A.PostgrestBuilder_whenComplete__closure0(t1, v), t2);
      return v;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("PostgrestBuilder.T/(PostgrestBuilder.T)");
    }
  };
  A.PostgrestBuilder_whenComplete__closure0.prototype = {
    call$1(_) {
      return this.v;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("PostgrestBuilder.T(@)");
    }
  };
  A.PostgrestBuilder_whenComplete_closure0.prototype = {
    call$1(e) {
      var f2;
      type$.Object._as(e);
      f2 = this.action.call$0();
      if (type$.Future_dynamic._is(f2))
        return f2.then$1$1(0, new A.PostgrestBuilder_whenComplete__closure(e), type$.Never);
      throw A.wrapException(e);
    },
    $signature: 53
  };
  A.PostgrestBuilder_whenComplete__closure.prototype = {
    call$1(_) {
      throw A.wrapException(this.e);
    },
    $signature: 54
  };
  A.PostgrestFilterBuilder.prototype = {
    _cleanFilterArray$1(filter) {
      var t1 = J.getInterceptor$ax(filter),
        t2 = type$.String;
      if (t1.every$1(filter, new A.PostgrestFilterBuilder__cleanFilterArray_closure()))
        return t1.map$1$1(filter, new A.PostgrestFilterBuilder__cleanFilterArray_closure0(), t2).join$1(0, ",");
      else
        return t1.map$1$1(filter, new A.PostgrestFilterBuilder__cleanFilterArray_closure1(), t2).join$1(0, ",");
    },
    eq$2(column, value) {
      var _this = this;
      if (type$.List_dynamic._is(value))
        _this.appendSearchParams$2(column, "eq.{" + _this._cleanFilterArray$1(value) + "}");
      else
        _this.appendSearchParams$2(column, "eq." + A.S(value));
      return _this;
    }
  };
  A.PostgrestFilterBuilder__cleanFilterArray_closure.prototype = {
    call$1(element) {
      return typeof element == "number";
    },
    $signature: 14
  };
  A.PostgrestFilterBuilder__cleanFilterArray_closure0.prototype = {
    call$1(s) {
      return A.S(s);
    },
    $signature: 25
  };
  A.PostgrestFilterBuilder__cleanFilterArray_closure1.prototype = {
    call$1(s) {
      return '"' + A.S(s) + '"';
    },
    $signature: 25
  };
  A.PostgrestQueryBuilder.prototype = {
    select$1$1(columns, $R) {
      var re, cleanedColumns, searchParams, t2, t3, t4, t5, _this = this, t1 = {};
      A.createRuntimeType($R);
      _this._postgrest_builder$_method = "GET";
      t1.quoted = false;
      re = A.RegExp_RegExp("\\s");
      cleanedColumns = new A.MappedListIterable(A._setArrayType(columns.split(""), type$.JSArray_String), type$.String_Function_String._as(new A.PostgrestQueryBuilder_select_closure(t1, re)), type$.MappedListIterable_String_String).join$0(0);
      t1 = _this.__PostgrestBuilder__url_A;
      t1 === $ && A.throwLateFieldNI("_url");
      searchParams = A.LinkedHashMap_LinkedHashMap$from(t1.get$queryParametersAll(), type$.String, type$.dynamic);
      searchParams.$indexSet(0, "select", cleanedColumns);
      t1 = _this.__PostgrestBuilder__url_A.replace$1$queryParameters(0, searchParams);
      _this.__PostgrestBuilder__url_A = t1;
      _this._options = B.FetchOptions_false_null_false;
      t1 = t1.toString$0(0);
      t2 = _this.__PostgrestBuilder__headers_F;
      t2 === $ && A.throwLateFieldNI("_headers");
      t3 = _this.__PostgrestBuilder__schema_F;
      t3 === $ && A.throwLateFieldNI("_schema");
      t4 = _this.__PostgrestBuilder__httpClient_F;
      t4 === $ && A.throwLateFieldNI("_httpClient");
      t5 = _this.__PostgrestBuilder__isolate_F;
      t5 === $ && A.throwLateFieldNI("_isolate");
      t3 = A.PostgrestQueryBuilder$(t1, t2, t4, t5, _this._options, t3, $R);
      t3._postgrest_builder$_method = _this._postgrest_builder$_method;
      return A.PostgrestFilterBuilder$(t3, $R);
    },
    update$1(values) {
      var t1, _this = this;
      _this._postgrest_builder$_method = "PATCH";
      t1 = _this.__PostgrestBuilder__headers_F;
      t1 === $ && A.throwLateFieldNI("_headers");
      t1.$indexSet(0, "Prefer", "");
      _this._body = values;
      _this._options = new A.FetchOptions(false, null, false);
      return A.PostgrestFilterBuilder$(_this, A._instanceType(_this)._eval$1("PostgrestQueryBuilder.T"));
    }
  };
  A.PostgrestQueryBuilder_select_closure.prototype = {
    call$1(c) {
      var t1;
      A._asString(c);
      if (this.re._nativeRegExp.test(c) && !this._box_0.quoted)
        return "";
      if (c === '"') {
        t1 = this._box_0;
        t1.quoted = !t1.quoted;
      }
      return c;
    },
    $signature: 5
  };
  A.PostgrestTransformBuilder.prototype = {};
  A.PostgrestException.prototype = {
    toString$0(_) {
      var _this = this;
      return "PostgrestException(message: " + _this.message + ", code: " + _this.code + ", details: " + A.S(_this.details) + ", hint: " + A.S(_this.hint) + ")";
    },
    $isException: 1
  };
  A.PostgrestResponse.prototype = {};
  A.FetchOptions.prototype = {};
  A.SocketStates.prototype = {
    _enumToString$0() {
      return "SocketStates." + this._core$_name;
    }
  };
  A.ChannelEvents.prototype = {
    _enumToString$0() {
      return "ChannelEvents." + this._core$_name;
    }
  };
  A.Message.prototype = {
    toJson$0() {
      var t3, t4, t5, t6, outerKey, outerValue, t7, innerKey, innerValue, t8, t9, _this = this,
        processedPayload = A._Cell$named("processedPayload"),
        t1 = type$.String,
        t2 = type$.dynamic;
      processedPayload.set$finalLocalValue(A.LinkedHashMap_LinkedHashMap$_empty(t1, t2));
      for (t3 = _this.payload, t4 = A.LinkedHashMapKeyIterator$(t3, t3._modifications, A._instanceType(t3)._precomputed1), t5 = type$.Map_dynamic_dynamic, t6 = processedPayload.__late_helper$_name; t4.moveNext$0();) {
        outerKey = t4.__js_helper$_current;
        outerValue = t3.$index(0, outerKey);
        if (t5._is(outerValue))
          for (t7 = outerValue.get$keys(outerValue), t7 = t7.get$iterator(t7); t7.moveNext$0();) {
            innerKey = t7.get$current();
            innerValue = outerValue.$index(0, innerKey);
            t8 = processedPayload.__late_helper$_value;
            if (t8 === processedPayload)
              A.throwExpression(A.LateError$localNI(t6));
            t9 = J.getInterceptor$asx(t8);
            if (t9.$index(t8, outerKey) == null)
              t9.$indexSet(t8, outerKey, A.LinkedHashMap_LinkedHashMap$_empty(t2, t2));
            t8 = processedPayload.__late_helper$_value;
            if (t8 === processedPayload)
              A.throwExpression(A.LateError$localNI(t6));
            J.$indexSet$ax(J.$index$asx(t8, outerKey), innerKey, innerValue);
          }
        else {
          t7 = processedPayload.__late_helper$_value;
          if (t7 === processedPayload)
            A.throwExpression(A.LateError$localNI(t6));
          J.$indexSet$ax(t7, outerKey, outerValue);
        }
      }
      t3 = _this.event;
      t3 = t3 !== B.ChannelEvents_5 ? A.ChannelEventsExtended_eventName(t3) : "heartbeat";
      return A.LinkedHashMap_LinkedHashMap$_literal(["topic", _this.topic, "event", t3, "payload", processedPayload._readLocal$0(), "ref", _this.ref], t1, t2);
    }
  };
  A.RealtimeClient.prototype = {
    get$encode() {
      var t1 = this.__RealtimeClient_encode_A;
      t1 === $ && A.throwLateFieldNI("encode");
      return t1;
    },
    get$decode() {
      var t1 = this.__RealtimeClient_decode_A;
      t1 === $ && A.throwLateFieldNI("decode");
      return t1;
    },
    RealtimeClient$11$decode$encode$headers$heartbeatIntervalMs$logger$longpollerTimeout$params$reconnectAfterMs$timeout$transport(endPoint, decode, encode, headers, heartbeatIntervalMs, logger, longpollerTimeout, params, reconnectAfterMs, timeout, transport) {
      var t1, _this = this,
        eventsPerSecond = _this.params.$index(0, "eventsPerSecond");
      if (eventsPerSecond != null)
        _this.eventsPerSecondLimitMs = B.JSNumber_methods.floor$0(1000 / A.int_parse(eventsPerSecond, null));
      t1 = A.RetryTimer_createRetryFunction();
      _this.set$__RealtimeClient_reconnectAfterMs_A(type$.int_Function_int._as(t1));
      _this.set$__RealtimeClient_encode_A(type$.void_Function_2_dynamic_and_void_Function_String._as(new A.RealtimeClient_closure()));
      _this.set$__RealtimeClient_decode_A(type$.void_Function_2_String_and_void_Function_dynamic._as(new A.RealtimeClient_closure0()));
      t1 = _this.__RealtimeClient_reconnectAfterMs_A;
      t1 === $ && A.throwLateFieldNI("reconnectAfterMs");
      _this.__RealtimeClient_reconnectTimer_A = new A.RetryTimer(new A.RealtimeClient_closure1(_this), t1);
    },
    connect$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, e, t1, exception;
      var $async$connect$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                $async$self.connState = B.SocketStates_0;
                $async$self.set$conn($async$self.transport.call$2($async$self.get$endPointURL(), $async$self.headers));
                t1 = $async$self.get$_onConnError();
                $async$self.conn.get$ready().catchError$1(t1);
                $async$self.connState = B.SocketStates_1;
                $async$self._onConnOpen$0();
                $async$self.conn.get$stream().timeout$1(0, A.Duration$(20000));
                $async$self.conn.get$stream().listen$3$onDone$onError(new A.RealtimeClient_connect_closure($async$self), new A.RealtimeClient_connect_closure0($async$self), t1);
              } catch (exception) {
                e = A.unwrapException(exception);
                $async$self._onConnError$1(e);
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$connect$0, $async$completer);
    },
    log$3(kind, msg, data) {
    },
    log$2(kind, msg) {
      return this.log$3(kind, msg, null);
    },
    get$connectionState() {
      switch (this.connState) {
        case B.SocketStates_0:
          return "connecting";
        case B.SocketStates_1:
          return "open";
        case B.SocketStates_2:
          return "closing";
        case B.SocketStates_4:
          return "disconnected";
        case B.SocketStates_3:
        default:
          return "closed";
      }
    },
    push$1(message) {
      var _this = this,
        $event = message.event,
        t1 = new A.RealtimeClient_push_callback(_this, message);
      _this.log$3("push", message.topic + " " + $event.toString$0(0) + " (" + message.ref + ")", message.payload);
      if (_this.get$connectionState() === "open")
        if (B.JSArray_methods.contains$1(A._setArrayType([B.ChannelEvents_7, B.ChannelEvents_8, B.ChannelEvents_9], type$.JSArray_ChannelEvents), $event)) {
          if (_this._throttle$1(t1).call$0())
            return "rate limited";
        } else
          t1.call$0();
      else
        B.JSArray_methods.add$1(_this.sendBuffer, t1);
      return null;
    },
    onConnMessage$1(rawMessage) {
      this.decode$2(rawMessage, new A.RealtimeClient_onConnMessage_closure(this));
    },
    get$endPointURL() {
      var t1 = type$.String,
        params = A.LinkedHashMap_LinkedHashMap$from(this.params, t1, t1);
      params.$indexSet(0, "vsn", "1.0.0");
      return this._appendParams$2(this.endPoint, params);
    },
    setAuth$1(token) {
      var t1, t2, t3, t4, _i, channel;
      this.accessToken = token;
      for (t1 = this.channels, t2 = token != null, t3 = type$.String, t4 = type$.dynamic, _i = 0; false; ++_i) {
        channel = t1[_i];
        if (t2)
          channel.updateJoinPayload$1(A.LinkedHashMap_LinkedHashMap$_literal(["user_token", token], t3, t4));
        if (channel.get$joinedOnce() && channel.get$isJoined())
          channel.push$2(B.ChannelEvents_6, A.LinkedHashMap_LinkedHashMap$_literal(["access_token", token], t3, t4));
      }
    },
    _onConnOpen$0() {
      var t1, _i, _this = this;
      _this.log$2("transport", "connected to " + _this.get$endPointURL());
      _this._flushSendBuffer$0();
      t1 = _this.__RealtimeClient_reconnectTimer_A;
      t1 === $ && A.throwLateFieldNI("reconnectTimer");
      t1.reset$0();
      t1 = _this.heartbeatTimer;
      if (t1 != null)
        t1.cancel$0();
      _this.heartbeatTimer = A.Timer_Timer$periodic(A.Duration$(30000), new A.RealtimeClient__onConnOpen_closure(_this));
      t1 = _this.stateChangeCallbacks.$index(0, "open");
      t1.toString;
      _i = 0;
      for (; false; ++_i)
        t1[_i].call$0();
    },
    _onConnClose$1($event) {
      var t1, _i, _this = this;
      _this.log$3("transport", "close", $event);
      if (_this.connState === B.SocketStates_3) {
        _this._triggerChanError$0();
        t1 = _this.__RealtimeClient_reconnectTimer_A;
        t1 === $ && A.throwLateFieldNI("reconnectTimer");
        t1.scheduleTimeout$0();
      }
      t1 = _this.heartbeatTimer;
      if (t1 != null)
        t1.cancel$0();
      t1 = _this.stateChangeCallbacks.$index(0, "close");
      t1.toString;
      _i = 0;
      for (; false; ++_i)
        t1[_i].call$1($event);
    },
    _onConnError$1(error) {
      var t1, _i;
      this.log$2("transport", J.toString$0$(error));
      this._triggerChanError$1(error);
      t1 = this.stateChangeCallbacks.$index(0, "error");
      t1.toString;
      _i = 0;
      for (; false; ++_i)
        t1[_i].call$1(error);
    },
    _triggerChanError$1(error) {
      var t1, _i;
      for (t1 = this.channels, _i = 0; false; ++_i)
        t1[_i].trigger$2(A.ChannelEventsExtended_eventName(B.ChannelEvents_1), error);
    },
    _triggerChanError$0() {
      return this._triggerChanError$1(null);
    },
    _appendParams$2(url, params) {
      var endpoint, searchParams;
      type$.Map_String_String._as(params);
      if (params.__js_helper$_length === 0)
        return url;
      endpoint = A.Uri_parse(url, 0, null);
      searchParams = A.LinkedHashMap_LinkedHashMap$from(endpoint.get$queryParameters(), type$.String, type$.dynamic);
      params.forEach$1(0, new A.RealtimeClient__appendParams_closure(searchParams));
      return endpoint.replace$1$queryParameters(0, searchParams).get$_text();
    },
    _flushSendBuffer$0() {
      var t1, t2, _i, _this = this;
      if (_this.get$connectionState() === "open" && _this.sendBuffer.length !== 0) {
        for (t1 = _this.sendBuffer, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].call$0();
        _this.sendBuffer = [];
      }
    },
    sendHeartbeat$0() {
      var newRef, t1, t2, _this = this;
      if (_this.get$connectionState() !== "open")
        return;
      if (_this.pendingHeartbeatRef != null) {
        _this.pendingHeartbeatRef = null;
        _this.log$2("transport", "heartbeat timeout. Attempting to re-establish connection");
        return;
      }
      newRef = _this.ref + 1;
      _this.ref = newRef;
      t1 = B.JSInt_methods.toString$0(newRef);
      _this.pendingHeartbeatRef = t1;
      t2 = type$.dynamic;
      _this.push$1(new A.Message("phoenix", B.ChannelEvents_5, A.LinkedHashMap_LinkedHashMap$_empty(t2, t2), t1));
      _this.setAuth$1(_this.accessToken);
    },
    _throttle$1(callback) {
      return new A.RealtimeClient__throttle_closure(this, callback, null);
    },
    set$__RealtimeClient_encode_A(__RealtimeClient_encode_A) {
      this.__RealtimeClient_encode_A = type$.void_Function_2_dynamic_and_void_Function_String._as(__RealtimeClient_encode_A);
    },
    set$__RealtimeClient_decode_A(__RealtimeClient_decode_A) {
      this.__RealtimeClient_decode_A = type$.void_Function_2_String_and_void_Function_dynamic._as(__RealtimeClient_decode_A);
    },
    set$__RealtimeClient_reconnectAfterMs_A(__RealtimeClient_reconnectAfterMs_A) {
      this.__RealtimeClient_reconnectAfterMs_A = type$.int_Function_int._as(__RealtimeClient_reconnectAfterMs_A);
    },
    set$conn(conn) {
      this.conn = type$.nullable_WebSocketChannel._as(conn);
    },
    encode$2(arg0, arg1) {
      return this.get$encode().call$2(arg0, arg1);
    },
    decode$2(arg0, arg1) {
      return this.get$decode().call$2(arg0, arg1);
    }
  };
  A.RealtimeClient_closure.prototype = {
    call$2(payload, callback) {
      return type$.dynamic_Function_String._as(callback).call$1(B.C_JsonCodec.encode$1(payload));
    },
    $signature: 56
  };
  A.RealtimeClient_closure0.prototype = {
    call$2(payload, callback) {
      return type$.dynamic_Function_dynamic._as(callback).call$1(B.C_JsonCodec.decode$1(payload));
    },
    $signature: 57
  };
  A.RealtimeClient_closure1.prototype = {
    call$0() {
      this.$this.connect$0();
    },
    $signature: 0
  };
  A.RealtimeClient_connect_closure.prototype = {
    call$1(message) {
      return this.$this.onConnMessage$1(message);
    },
    $signature: 2
  };
  A.RealtimeClient_connect_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1.connState !== B.SocketStates_4)
        t1.connState = B.SocketStates_3;
      t1._onConnClose$1("");
    },
    $signature: 0
  };
  A.RealtimeClient_push_callback.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.encode$2(this.message.toJson$0(), new A.RealtimeClient_push_callback_closure(t1));
    },
    $signature: 0
  };
  A.RealtimeClient_push_callback_closure.prototype = {
    call$1(result) {
      A._asString(result);
      return null;
    },
    $signature: 58
  };
  A.RealtimeClient_onConnMessage_closure.prototype = {
    call$1(msg) {
      var t2, t3, _i,
        t1 = J.getInterceptor$asx(msg),
        topic = A._asString(t1.$index(msg, "topic")),
        $event = A._asString(t1.$index(msg, "event")),
        payload = t1.$index(msg, "payload"),
        ref = A._asStringQ(t1.$index(msg, "ref"));
      t1 = ref != null;
      if (t1 && ref === this.$this.pendingHeartbeatRef)
        this.$this.pendingHeartbeatRef = null;
      t2 = this.$this;
      t3 = J.$index$asx(payload, "status");
      t3 = A.S(t3 == null ? "" : t3);
      t1 = t1 ? "(" + ref + ")" : "";
      t2.log$3("receive", t3 + " " + topic + " " + $event + " " + t1, payload);
      t1 = t2.channels;
      t3 = A._arrayInstanceType(t1);
      new A.WhereIterable(t1, t3._eval$1("bool(1)")._as(new A.RealtimeClient_onConnMessage__closure(topic)), t3._eval$1("WhereIterable<1>")).forEach$1(0, new A.RealtimeClient_onConnMessage__closure0($event, payload, ref));
      t1 = t2.stateChangeCallbacks.$index(0, "message");
      t1.toString;
      _i = 0;
      for (; false; ++_i)
        t1[_i].call$1(msg);
    },
    $signature: 2
  };
  A.RealtimeClient_onConnMessage__closure.prototype = {
    call$1(channel) {
      return type$.RealtimeChannel._as(channel).isMember$1(this.topic);
    },
    $signature: 89
  };
  A.RealtimeClient_onConnMessage__closure0.prototype = {
    call$1(channel) {
      return type$.RealtimeChannel._as(channel).trigger$3(this.event, this.payload, this.ref);
    },
    $signature: 60
  };
  A.RealtimeClient__onConnOpen_closure.prototype = {
    call$1(t) {
      type$.Timer._as(t);
      return this.$this.sendHeartbeat$0();
    },
    $signature: 61
  };
  A.RealtimeClient__appendParams_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      A._asString(v);
      this.searchParams.$indexSet(0, k, v);
      return v;
    },
    $signature: 8
  };
  A.RealtimeClient__throttle_closure.prototype = {
    call$0() {
      var t2,
        t1 = this.$this;
      if (t1.inThrottle)
        return true;
      this.callback.call$0();
      t1.inThrottle = true;
      t2 = t1.eventsPerSecondLimitMs;
      A.Timer_Timer(A.Duration$(t2), new A.RealtimeClient__throttle__closure(t1));
      return false;
    },
    $signature: 21
  };
  A.RealtimeClient__throttle__closure.prototype = {
    call$0() {
      return this.$this.inThrottle = false;
    },
    $signature: 0
  };
  A.RetryTimer.prototype = {
    reset$0() {
      this._tries = 0;
      var t1 = this._timer;
      if (t1 != null)
        t1.cancel$0();
    },
    scheduleTimeout$0() {
      var _this = this,
        t1 = _this._timer;
      if (t1 != null)
        t1.cancel$0();
      _this._timer = A.Timer_Timer(A.Duration$(_this.timerCalc.call$1(_this._tries + 1)), new A.RetryTimer_scheduleTimeout_closure(_this));
    }
  };
  A.RetryTimer_scheduleTimeout_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      ++t1._tries;
      t1.callback.call$0();
    },
    $signature: 0
  };
  A.RetryTimer_createRetryFunction_closure.prototype = {
    call$1(tries) {
      var delay, t1,
        shiftAmount = A._asInt(tries) - 1;
      if (shiftAmount > 20)
        shiftAmount = 20;
      delay = B.JSInt_methods.$shl(this.firstDelay, shiftAmount);
      t1 = this.maxDelay;
      return delay > t1 ? t1 : delay;
    },
    $signature: 62
  };
  A.DeferStream.prototype = {
    get$isBroadcast() {
      return true;
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var stream, e, s, exception, t2, t3, t4, _null = null,
        t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      stream = null;
      try {
        stream = this._factory.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t2 = e;
        t3 = s;
        A.checkNotNullable(t2, "error", type$.Object);
        t1 = t1._eval$1("_AsyncStreamController<1>");
        t4 = new A._AsyncStreamController(_null, _null, _null, _null, t1);
        t4._addError$2(t2, t3 == null ? A.AsyncError_defaultStackTrace(t2) : t3);
        t4._closeUnchecked$0();
        return new A._ControllerStream(t4, t1._eval$1("_ControllerStream<1>")).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
      }
      return stream.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A.BehaviorSubject.prototype = {};
  A.BehaviorSubject__deferStream_closure.prototype = {
    call$0() {
      var t2, t3, value, _this = this,
        t1 = _this.wrapper,
        errorAndStackTrace = t1.errorAndStackTrace;
      if (errorAndStackTrace != null && !t1.isValue) {
        t1 = _this.controller;
        t2 = A._instanceType(t1)._eval$1("_BroadcastStream<1>");
        t3 = _this.T;
        return t2._bind$1(t3)._eval$1("StreamTransformer<Stream.T,1>")._as(new A.StartWithErrorStreamTransformer(errorAndStackTrace.error, errorAndStackTrace.stackTrace, t3._eval$1("StartWithErrorStreamTransformer<0>"))).bind$1(new A._BroadcastStream(t1, t2));
      }
      value = t1.value;
      if (value !== B.C__Empty && t1.isValue) {
        t1 = _this.controller;
        t2 = A._instanceType(t1)._eval$1("_BroadcastStream<1>");
        t3 = _this.T;
        return t2._bind$1(t3)._eval$1("StreamTransformer<Stream.T,1>")._as(new A.StartWithStreamTransformer(t3._as(value), t3._eval$1("StartWithStreamTransformer<0>"))).bind$1(new A._BroadcastStream(t1, t2));
      }
      t1 = _this.controller;
      return new A._BroadcastStream(t1, A._instanceType(t1)._eval$1("_BroadcastStream<1>"));
    },
    $signature() {
      return this.T._eval$1("Stream<0>()");
    }
  };
  A._Wrapper.prototype = {};
  A._BehaviorSubjectStream.prototype = {
    get$isBroadcast() {
      return true;
    },
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this._subject) ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A._BehaviorSubjectStream && other._subject === this._subject;
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      return this._subject.listen$4$cancelOnError$onDone$onError(this.$ti._eval$1("~(1)?")._as(onData), cancelOnError, type$.nullable_void_Function._as(onDone), onError);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$2$onError(onData, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, onError);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A.Subject.prototype = {
    addError$2(error, stackTrace) {
      if (this._isAddingStreamItems)
        throw A.wrapException(A.StateError$("You cannot add an error while items are being added from addStream"));
      this._subject$_addError$2(error, stackTrace);
    },
    _subject$_addError$2(error, stackTrace) {
      var t2,
        t1 = this._subject$_controller;
      if ((t1._state & 4) === 0) {
        t2 = this._wrapper;
        t2.errorAndStackTrace = new A.ErrorAndStackTrace(error, stackTrace);
        t2.isValue = false;
      }
      t1.addError$2(error, stackTrace);
    },
    add$1(_, $event) {
      this.$ti._precomputed1._as($event);
      if (this._isAddingStreamItems)
        throw A.wrapException(A.StateError$("You cannot add items while items are being added from addStream"));
      this._subject$_add$1($event);
    },
    _subject$_add$1($event) {
      var t2, t3,
        t1 = this.$ti;
      t1._precomputed1._as($event);
      t2 = this._subject$_controller;
      if ((t2._state & 4) === 0) {
        t3 = this._wrapper;
        t3.value = t3.$ti._precomputed1._as(t1._precomputed1._as($event));
        t3.isValue = true;
      }
      t2.add$1(0, $event);
    },
    close$0() {
      if (this._isAddingStreamItems)
        throw A.wrapException(A.StateError$("You cannot close the subject while items are being added from addStream"));
      return this._subject$_controller.close$0();
    },
    $isEventSink: 1,
    $isStreamController: 1,
    $isSink: 1
  };
  A._StartWithStreamSink.prototype = {
    onData$1(data) {
      this.$ti._precomputed1._as(data);
      return this.get$sink().add$1(0, data);
    },
    onError$2(e, st) {
      type$.Object._as(e);
      type$.StackTrace._as(st);
      return this.get$sink().addError$2(e, st);
    },
    onDone$0() {
      return this.get$sink().close$0();
    },
    onCancel$0() {
    },
    onListen$0() {
      this.get$sink().add$1(0, this._startValue);
    },
    onPause$0() {
    },
    onResume$0() {
    }
  };
  A.StartWithStreamTransformer.prototype = {
    bind$1(stream) {
      var t1 = this.$ti,
        t2 = t1._precomputed1;
      return A.forwardStream(t1._eval$1("Stream<1>")._as(stream), new A.StartWithStreamTransformer_bind_closure(this), t2, t2);
    }
  };
  A.StartWithStreamTransformer_bind_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      return new A._StartWithStreamSink(t1.startValue, t1.$ti._eval$1("_StartWithStreamSink<1>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("_StartWithStreamSink<1>()");
    }
  };
  A._StartWithErrorStreamSink.prototype = {
    onData$1(data) {
      this.$ti._precomputed1._as(data);
      return this.get$sink().add$1(0, data);
    },
    onError$2(e, st) {
      type$.Object._as(e);
      type$.StackTrace._as(st);
      return this.get$sink().addError$2(e, st);
    },
    onDone$0() {
      return this.get$sink().close$0();
    },
    onCancel$0() {
    },
    onListen$0() {
      this.get$sink().addError$2(this._e, this._st);
    },
    onPause$0() {
    },
    onResume$0() {
    }
  };
  A.StartWithErrorStreamTransformer.prototype = {
    bind$1(stream) {
      var t1 = this.$ti,
        t2 = t1._precomputed1;
      return A.forwardStream(t1._eval$1("Stream<1>")._as(stream), new A.StartWithErrorStreamTransformer_bind_closure(this), t2, t2);
    }
  };
  A.StartWithErrorStreamTransformer_bind_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      return new A._StartWithErrorStreamSink(t1.error, t1.stackTrace, t1.$ti._eval$1("_StartWithErrorStreamSink<1>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("_StartWithErrorStreamSink<1>()");
    }
  };
  A._Empty.prototype = {
    toString$0(_) {
      return "<<EMPTY>>";
    }
  };
  A.ErrorAndStackTrace.prototype = {
    toString$0(_) {
      return "ErrorAndStackTrace{error: " + A.S(this.error) + ", stacktrace: " + this.stackTrace.toString$0(0) + "}";
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this !== other)
        t1 = other instanceof A.ErrorAndStackTrace && A.getRuntimeType(_this) === A.getRuntimeType(other) && J.$eq$(_this.error, other.error) && _this.stackTrace === other.stackTrace;
      else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return (J.get$hashCode$(this.error) ^ A.Primitives_objectHashCode(this.stackTrace)) >>> 0;
    }
  };
  A.ForwardingSink.prototype = {
    get$sink() {
      var t1 = this._forwarding_sink$_sink;
      return t1 == null ? A.throwExpression(A.StateError$("Must call setSink(sink) before accessing!")) : t1;
    },
    set$_forwarding_sink$_sink(_sink) {
      this._forwarding_sink$_sink = A._instanceType(this)._eval$1("EventSink<ForwardingSink.R>?")._as(_sink);
    }
  };
  A._forwardMulti_closure.prototype = {
    call$1(controller) {
      var sink, _this = this, t1 = {},
        t2 = _this.R;
      t2._eval$1("MultiStreamController<0>")._as(controller);
      sink = _this.sinkFactory.call$0();
      sink.set$_forwarding_sink$_sink(A._instanceType(sink)._eval$1("EventSink<ForwardingSink.R>")._as(new A._MultiControllerSink(controller, t2._eval$1("_MultiControllerSink<0>"))));
      t1.subscription = null;
      t1.cancelled = false;
      sink.onListen$0();
      new A._forwardMulti_closure_listenToUpstream(t1, _this.stream, sink, _this.T).call$0();
      controller.set$onCancel(new A._forwardMulti__closure(t1, sink));
    },
    $signature() {
      return this.R._eval$1("~(MultiStreamController<0>)");
    }
  };
  A._forwardMulti_closure_listenToUpstream.prototype = {
    call$1(_) {
      var t2, t3, t4, _this = this,
        t1 = _this._box_0;
      if (t1.cancelled)
        return;
      t2 = _this.sink;
      t3 = _this.T._eval$1("~(0)")._as(t2.get$onData());
      t4 = t2.get$onError();
      t1.subscription = _this.stream.listen$3$onDone$onError(t3, t2.get$onDone(), t4);
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 26
  };
  A._forwardMulti__closure.prototype = {
    call$0() {
      var t2, future,
        t1 = this._box_0;
      t1.cancelled = true;
      t2 = t1.subscription;
      future = t2 == null ? null : t2.cancel$0();
      t1.subscription = null;
      return A.waitTwoFutures(future, this.sink.onCancel$0());
    },
    $signature: 0
  };
  A._forward_closure.prototype = {
    call$0() {
      return this.sinkFactory.call$0();
    },
    $signature() {
      return this.T._eval$1("@<0>")._bind$1(this.R)._eval$1("ForwardingSink<1,2>()");
    }
  };
  A._forward_closure0.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.sink,
        t2 = _this.controller,
        t3 = t1._readFinal$0();
      t3.set$_forwarding_sink$_sink(A.instanceType(t3)._eval$1("EventSink<ForwardingSink.R>")._as(t2));
      t1._readFinal$0().onListen$0();
      new A._forward_closure_listenToUpstream(_this._box_0, _this.stream, t1, t2, _this.T).call$0();
    },
    $signature: 0
  };
  A._forward_closure_listenToUpstream.prototype = {
    call$1(_) {
      var t2, t3, t4, t5, _this = this,
        t1 = _this._box_0;
      if (t1.cancelled)
        return;
      t2 = _this.stream;
      t3 = _this.sink;
      t4 = _this.T._eval$1("~(0)")._as(t3._readFinal$0().get$onData());
      t5 = t3._readFinal$0().get$onError();
      t1.subscription = t2.listen$3$onDone$onError(t4, t3._readFinal$0().get$onDone(), t5);
      if (!t2.get$isBroadcast()) {
        t2 = _this.controller;
        t2.set$onPause(new A._forward__listenToUpstream_closure(t1, t3));
        t2.set$onResume(new A._forward__listenToUpstream_closure0(t1, t3));
      }
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 26
  };
  A._forward__listenToUpstream_closure.prototype = {
    call$0() {
      this._box_0.subscription.pause$0();
      this.sink._readFinal$0().onPause$0();
    },
    $signature: 0
  };
  A._forward__listenToUpstream_closure0.prototype = {
    call$0() {
      this._box_0.subscription.resume$0();
      this.sink._readFinal$0().onResume$0();
    },
    $signature: 0
  };
  A._forward_closure1.prototype = {
    call$0() {
      var t2, future,
        t1 = this._box_0;
      t1.cancelled = true;
      t2 = t1.subscription;
      future = t2 == null ? null : t2.cancel$0();
      t1.subscription = null;
      return A.waitTwoFutures(future, this.sink._readFinal$0().onCancel$0());
    },
    $signature: 0
  };
  A._MultiControllerSink.prototype = {
    add$1(_, $event) {
      var t2,
        t1 = this.controller;
      $event = t1.$ti._precomputed1._as(this.$ti._precomputed1._as($event));
      t2 = t1._state;
      if (t2 >= 4)
        A.throwExpression(t1._badEventState$0());
      if ((t2 & 1) !== 0)
        t1.get$_subscription()._add$1($event);
      return null;
    },
    addError$2(error, stackTrace) {
      var t1 = this.controller,
        t2 = t1._state;
      if (t2 >= 4)
        A.throwExpression(t1._badEventState$0());
      if ((t2 & 1) !== 0) {
        t1 = t1.get$_subscription();
        t1._addError$2(error, stackTrace);
      }
      return null;
    },
    close$0() {
      return this.controller.closeSync$0();
    },
    $isEventSink: 1,
    $isSink: 1
  };
  A.SourceFile.prototype = {
    get$length(_) {
      return this._decodedChars.length;
    },
    get$lines(_) {
      return this._lineStarts.length;
    },
    SourceFile$decoded$2$url(decodedChars, url) {
      var t1, t2, t3, i, c, j, t4;
      for (t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0; i < t2; ++i) {
        c = t1[i];
        if (c === 13) {
          j = i + 1;
          if (j < t2) {
            if (!(j < t2))
              return A.ioore(t1, j);
            t4 = t1[j] !== 10;
          } else
            t4 = true;
          if (t4)
            c = 10;
        }
        if (c === 10)
          B.JSArray_methods.add$1(t3, i + 1);
      }
    },
    getLine$1(offset) {
      var t1, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + string$.x20must_ + _this.get$length(_this) + "."));
      t1 = _this._lineStarts;
      if (offset < B.JSArray_methods.get$first(t1))
        return -1;
      if (offset >= B.JSArray_methods.get$last(t1))
        return t1.length - 1;
      if (_this._isNearCachedLine$1(offset)) {
        t1 = _this._cachedLine;
        t1.toString;
        return t1;
      }
      return _this._cachedLine = _this._binarySearch$1(offset) - 1;
    },
    _isNearCachedLine$1(offset) {
      var t2, t3, t4,
        t1 = this._cachedLine;
      if (t1 == null)
        return false;
      t2 = this._lineStarts;
      t3 = t2.length;
      if (t1 >>> 0 !== t1 || t1 >= t3)
        return A.ioore(t2, t1);
      if (offset < t2[t1])
        return false;
      if (!(t1 >= t3 - 1)) {
        t4 = t1 + 1;
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t4 = offset < t2[t4];
      } else
        t4 = true;
      if (t4)
        return true;
      if (!(t1 >= t3 - 2)) {
        t4 = t1 + 2;
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t4 = offset < t2[t4];
        t2 = t4;
      } else
        t2 = true;
      if (t2) {
        this._cachedLine = t1 + 1;
        return true;
      }
      return false;
    },
    _binarySearch$1(offset) {
      var min, half,
        t1 = this._lineStarts,
        t2 = t1.length,
        max = t2 - 1;
      for (min = 0; min < max;) {
        half = min + B.JSInt_methods._tdivFast$1(max - min, 2);
        if (!(half >= 0 && half < t2))
          return A.ioore(t1, half);
        if (t1[half] > offset)
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1(offset) {
      var line, t1, lineStart, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      line = _this.getLine$1(offset);
      t1 = _this._lineStarts;
      if (!(line >= 0 && line < t1.length))
        return A.ioore(t1, line);
      lineStart = t1[line];
      if (lineStart > offset)
        throw A.wrapException(A.RangeError$("Line " + line + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$1(line) {
      var t1, t2, result, t3, _this = this;
      if (line < 0)
        throw A.wrapException(A.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = _this._lineStarts;
        t2 = t1.length;
        if (line >= t2)
          throw A.wrapException(A.RangeError$("Line " + line + " must be less than the number of lines in the file, " + _this.get$lines(_this) + "."));
      }
      result = t1[line];
      if (result <= _this._decodedChars.length) {
        t3 = line + 1;
        t1 = t3 < t2 && result >= t1[t3];
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.RangeError$("Line " + line + " doesn't have 0 columns."));
      return result;
    }
  };
  A.FileLocation.prototype = {
    get$sourceUrl() {
      return this.file.url;
    },
    get$line() {
      return this.file.getLine$1(this.offset);
    },
    get$column() {
      return this.file.getColumn$1(this.offset);
    },
    get$offset() {
      return this.offset;
    }
  };
  A._FileSpan.prototype = {
    get$sourceUrl() {
      return this.file.url;
    },
    get$length(_) {
      return this._end - this._file$_start;
    },
    get$start() {
      return A.FileLocation$_(this.file, this._file$_start);
    },
    get$end() {
      return A.FileLocation$_(this.file, this._end);
    },
    get$text() {
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._file$_start, this._end), 0, null);
    },
    get$context() {
      var _this = this,
        t1 = _this.file,
        endOffset = _this._end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (endOffset - _this._file$_start === 0)
          return endLine === t1._lineStarts.length - 1 ? "" : A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(endLine), t1.getOffset$1(endLine + 1)), 0, null);
      } else
        endOffset = endLine === t1._lineStarts.length - 1 ? t1._decodedChars.length : t1.getOffset$1(endLine + 1);
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(t1.getLine$1(_this._file$_start)), endOffset), 0, null);
    },
    compareTo$1(_, other) {
      var result;
      type$.SourceSpan._as(other);
      if (!(other instanceof A._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = B.JSInt_methods.compareTo$1(this._file$_start, other._file$_start);
      return result === 0 ? B.JSInt_methods.compareTo$1(this._end, other._end) : result;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!type$.FileSpan._is(other))
        return _this.super$SourceSpanMixin$$eq(0, other);
      return _this._file$_start === other._file$_start && _this._end === other._end && J.$eq$(_this.file.url, other.file.url);
    },
    get$hashCode(_) {
      return A.Object_hash(this._file$_start, this._end, this.file.url);
    },
    $isFileSpan: 1,
    $isSourceSpanWithContext: 1
  };
  A.Highlighter.prototype = {
    highlight$0() {
      var t2, highlightsByColumn, t3, t4, i, line, lastLine, t5, t6, t7, t8, t9, t10, t11, index, primaryIdx, primary, _i, _this = this, _null = null,
        t1 = _this._lines;
      _this._writeFileStart$1(B.JSArray_methods.get$first(t1).url);
      t2 = _this._maxMultilineSpans;
      highlightsByColumn = A.List_List$filled(t2, _null, false, type$.nullable__Highlight);
      for (t3 = _this._highlighter$_buffer, t2 = t2 !== 0, t4 = _this._primaryColor, i = 0; i < t1.length; ++i) {
        line = t1[i];
        if (i > 0) {
          lastLine = t1[i - 1];
          t5 = lastLine.url;
          t6 = line.url;
          if (!J.$eq$(t5, t6)) {
            _this._writeSidebar$1$end("\u2575");
            t3._contents += "\n";
            _this._writeFileStart$1(t6);
          } else if (lastLine.number + 1 !== line.number) {
            _this._writeSidebar$1$text("...");
            t3._contents += "\n";
          }
        }
        for (t5 = line.highlights, t6 = A._arrayInstanceType(t5)._eval$1("ReversedListIterable<1>"), t7 = new A.ReversedListIterable(t5, t6), t7 = new A.ListIterator(t7, t7.get$length(t7), t6._eval$1("ListIterator<ListIterable.E>")), t6 = t6._eval$1("ListIterable.E"), t8 = line.number, t9 = line.text; t7.moveNext$0();) {
          t10 = t7.__internal$_current;
          if (t10 == null)
            t10 = t6._as(t10);
          t11 = t10.span;
          if (t11.get$start().get$line() !== t11.get$end().get$line() && t11.get$start().get$line() === t8 && _this._isOnlyWhitespace$1(B.JSString_methods.substring$2(t9, 0, t11.get$start().get$column()))) {
            index = B.JSArray_methods.indexOf$1(highlightsByColumn, _null);
            if (index < 0)
              A.throwExpression(A.ArgumentError$(A.S(highlightsByColumn) + " contains no null elements.", _null));
            B.JSArray_methods.$indexSet(highlightsByColumn, index, t10);
          }
        }
        _this._writeSidebar$1$line(t8);
        t3._contents += " ";
        _this._writeMultilineHighlights$2(line, highlightsByColumn);
        if (t2)
          t3._contents += " ";
        primaryIdx = B.JSArray_methods.indexWhere$1(t5, new A.Highlighter_highlight_closure());
        if (primaryIdx === -1)
          primary = _null;
        else {
          if (!(primaryIdx >= 0 && primaryIdx < t5.length))
            return A.ioore(t5, primaryIdx);
          primary = t5[primaryIdx];
        }
        t6 = primary != null;
        if (t6) {
          t7 = primary.span;
          t10 = t7.get$start().get$line() === t8 ? t7.get$start().get$column() : 0;
          _this._writeHighlightedText$4$color(t9, t10, t7.get$end().get$line() === t8 ? t7.get$end().get$column() : t9.length, t4);
        } else
          _this._writeText$1(t9);
        t3._contents += "\n";
        if (t6)
          _this._writeIndicator$3(line, primary, highlightsByColumn);
        for (t6 = t5.length, _i = 0; _i < t6; ++_i) {
          t5[_i].toString;
          continue;
        }
      }
      _this._writeSidebar$1$end("\u2575");
      t1 = t3._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeFileStart$1(url) {
      var _this = this;
      if (!_this._multipleFiles || !type$.Uri._is(url))
        _this._writeSidebar$1$end("\u2577");
      else {
        _this._writeSidebar$1$end("\u250c");
        _this._colorize$1$2$color(new A.Highlighter__writeFileStart_closure(_this), "\x1b[34m", type$.void);
        _this._highlighter$_buffer._contents += " " + $.$get$context().prettyUri$1(url);
      }
      _this._highlighter$_buffer._contents += "\n";
    },
    _writeMultilineHighlights$3$current(line, highlightsByColumn, current) {
      var t1, currentColor, t2, t3, t4, t5, t6, foundCurrent, _i, highlight, t7, startLine, endLine, _this = this, _box_0 = {};
      type$.List_nullable__Highlight._as(highlightsByColumn);
      _box_0.openedOnThisLine = false;
      _box_0.openedOnThisLineColor = null;
      t1 = current == null;
      if (t1)
        currentColor = null;
      else
        currentColor = _this._primaryColor;
      for (t2 = highlightsByColumn.length, t3 = type$.Null, t4 = _this._primaryColor, t1 = !t1, t5 = _this._highlighter$_buffer, t6 = type$.void, foundCurrent = false, _i = 0; _i < t2; ++_i) {
        highlight = highlightsByColumn[_i];
        t7 = highlight == null;
        startLine = t7 ? null : highlight.span.get$start().get$line();
        endLine = t7 ? null : highlight.span.get$end().get$line();
        if (t1 && highlight === current) {
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure(_this, startLine, line), currentColor, t3);
          foundCurrent = true;
        } else if (foundCurrent)
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure0(_this, highlight), currentColor, t3);
        else if (t7)
          if (_box_0.openedOnThisLine)
            _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure1(_this), _box_0.openedOnThisLineColor, t6);
          else
            t5._contents += " ";
        else
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure2(_box_0, _this, current, startLine, line, highlight, endLine), t4, t3);
      }
    },
    _writeMultilineHighlights$2(line, highlightsByColumn) {
      return this._writeMultilineHighlights$3$current(line, highlightsByColumn, null);
    },
    _writeHighlightedText$4$color(text, startColumn, endColumn, color) {
      var _this = this;
      _this._writeText$1(B.JSString_methods.substring$2(text, 0, startColumn));
      _this._colorize$1$2$color(new A.Highlighter__writeHighlightedText_closure(_this, text, startColumn, endColumn), color, type$.void);
      _this._writeText$1(B.JSString_methods.substring$2(text, endColumn, text.length));
    },
    _writeIndicator$3(line, highlight, highlightsByColumn) {
      var color, t1, t2, coversWholeLine, _this = this;
      type$.List_nullable__Highlight._as(highlightsByColumn);
      color = _this._primaryColor;
      t1 = highlight.span;
      if (t1.get$start().get$line() === t1.get$end().get$line()) {
        _this._writeSidebar$0();
        t1 = _this._highlighter$_buffer;
        t1._contents += " ";
        _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
        if (highlightsByColumn.length !== 0)
          t1._contents += " ";
        _this._writeLabel$3(highlight, highlightsByColumn, _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure(_this, line, highlight), color, type$.int));
      } else {
        t2 = line.number;
        if (t1.get$start().get$line() === t2) {
          if (B.JSArray_methods.contains$1(highlightsByColumn, highlight))
            return;
          A.replaceFirstNull(highlightsByColumn, highlight, type$._Highlight);
          _this._writeSidebar$0();
          t1 = _this._highlighter$_buffer;
          t1._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure0(_this, line, highlight), color, type$.void);
          t1._contents += "\n";
        } else if (t1.get$end().get$line() === t2) {
          coversWholeLine = t1.get$end().get$column() === line.text.length;
          if (coversWholeLine && true) {
            A.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
            return;
          }
          _this._writeSidebar$0();
          _this._highlighter$_buffer._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._writeLabel$3(highlight, highlightsByColumn, _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure1(_this, coversWholeLine, line, highlight), color, type$.int));
          A.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
        }
      }
    },
    _writeArrow$3$beginning(line, column, beginning) {
      var t1 = beginning ? 0 : 1,
        t2 = this._highlighter$_buffer;
      t1 = t2._contents += B.JSString_methods.$mul("\u2500", 1 + column + this._countTabs$1(B.JSString_methods.substring$2(line.text, 0, column + t1)) * 3);
      t2._contents = t1 + "^";
    },
    _writeArrow$2(line, column) {
      return this._writeArrow$3$beginning(line, column, true);
    },
    _writeLabel$3(highlight, highlightsByColumn, underlineLength) {
      type$.List_nullable__Highlight._as(highlightsByColumn);
      this._highlighter$_buffer._contents += "\n";
      return;
    },
    _writeText$1(text) {
      var t1, t2, t3, t4;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListMixin.E>")), t3 = this._highlighter$_buffer, t2 = t2._eval$1("ListMixin.E"); t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        if (t4 == null)
          t4 = t2._as(t4);
        if (t4 === 9)
          t3._contents += B.JSString_methods.$mul(" ", 4);
        else
          t3._contents += A.Primitives_stringFromCharCode(t4);
      }
    },
    _writeSidebar$3$end$line$text(end, line, text) {
      var t1 = {};
      t1.text = text;
      if (line != null)
        t1.text = B.JSInt_methods.toString$0(line + 1);
      this._colorize$1$2$color(new A.Highlighter__writeSidebar_closure(t1, this, end), "\x1b[34m", type$.Null);
    },
    _writeSidebar$1$end(end) {
      return this._writeSidebar$3$end$line$text(end, null, null);
    },
    _writeSidebar$1$text(text) {
      return this._writeSidebar$3$end$line$text(null, null, text);
    },
    _writeSidebar$1$line(line) {
      return this._writeSidebar$3$end$line$text(null, line, null);
    },
    _writeSidebar$0() {
      return this._writeSidebar$3$end$line$text(null, null, null);
    },
    _countTabs$1(text) {
      var t1, t2, count, t3;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListMixin.E>")), t2 = t2._eval$1("ListMixin.E"), count = 0; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if ((t3 == null ? t2._as(t3) : t3) === 9)
          ++count;
      }
      return count;
    },
    _isOnlyWhitespace$1(text) {
      var t1, t2, t3;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListMixin.E>")), t2 = t2._eval$1("ListMixin.E"); t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (t3 !== 32 && t3 !== 9)
          return false;
      }
      return true;
    },
    _colorize$1$2$color(callback, color, $T) {
      var t1, result;
      $T._eval$1("0()")._as(callback);
      t1 = this._primaryColor != null;
      if (t1 && color != null)
        this._highlighter$_buffer._contents += color;
      result = callback.call$0();
      if (t1 && color != null)
        this._highlighter$_buffer._contents += "\x1b[0m";
      return result;
    }
  };
  A.Highlighter_closure.prototype = {
    call$0() {
      return this.color;
    },
    $signature: 64
  };
  A.Highlighter$__closure.prototype = {
    call$1(line) {
      var t1 = type$._Line._as(line).highlights,
        t2 = A._arrayInstanceType(t1);
      t2 = new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Highlighter$___closure()), t2._eval$1("WhereIterable<1>"));
      return t2.get$length(t2);
    },
    $signature: 65
  };
  A.Highlighter$___closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span;
      return t1.get$start().get$line() !== t1.get$end().get$line();
    },
    $signature: 11
  };
  A.Highlighter$__closure0.prototype = {
    call$1(line) {
      return type$._Line._as(line).url;
    },
    $signature: 67
  };
  A.Highlighter__collateLines_closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span.get$sourceUrl();
      return t1 == null ? new A.Object() : t1;
    },
    $signature: 68
  };
  A.Highlighter__collateLines_closure0.prototype = {
    call$2(highlight1, highlight2) {
      var t1 = type$._Highlight;
      return t1._as(highlight1).span.compareTo$1(0, t1._as(highlight2).span);
    },
    $signature: 69
  };
  A.Highlighter__collateLines_closure1.prototype = {
    call$1(entry) {
      var url, highlightsForFile, lines, t1, t2, t3, t4, context, t5, linesBeforeSpan, lineNumber, _i, line, activeHighlights, highlightIndex, oldHighlightLength;
      type$.MapEntry_of_Object_and_List__Highlight._as(entry);
      url = entry.key;
      highlightsForFile = entry.value;
      lines = A._setArrayType([], type$.JSArray__Line);
      for (t1 = J.getInterceptor$ax(highlightsForFile), t2 = t1.get$iterator(highlightsForFile), t3 = type$.JSArray__Highlight; t2.moveNext$0();) {
        t4 = t2.get$current().span;
        context = t4.get$context();
        t5 = A.findLineStart(context, t4.get$text(), t4.get$start().get$column());
        t5.toString;
        t5 = B.JSString_methods.allMatches$1("\n", B.JSString_methods.substring$2(context, 0, t5));
        linesBeforeSpan = t5.get$length(t5);
        lineNumber = t4.get$start().get$line() - linesBeforeSpan;
        for (t4 = context.split("\n"), t5 = t4.length, _i = 0; _i < t5; ++_i) {
          line = t4[_i];
          if (lines.length === 0 || lineNumber > B.JSArray_methods.get$last(lines).number)
            B.JSArray_methods.add$1(lines, new A._Line(line, lineNumber, url, A._setArrayType([], t3)));
          ++lineNumber;
        }
      }
      activeHighlights = A._setArrayType([], t3);
      for (t2 = lines.length, t3 = type$.bool_Function__Highlight, highlightIndex = 0, _i = 0; _i < lines.length; lines.length === t2 || (0, A.throwConcurrentModificationError)(lines), ++_i) {
        line = lines[_i];
        t4 = t3._as(new A.Highlighter__collateLines__closure(line));
        if (!!activeHighlights.fixed$length)
          A.throwExpression(A.UnsupportedError$("removeWhere"));
        B.JSArray_methods._removeWhere$2(activeHighlights, t4, true);
        oldHighlightLength = activeHighlights.length;
        for (t4 = t1.skip$1(highlightsForFile, highlightIndex), t4 = t4.get$iterator(t4); t4.moveNext$0();) {
          t5 = t4.get$current();
          if (t5.span.get$start().get$line() > line.number)
            break;
          B.JSArray_methods.add$1(activeHighlights, t5);
        }
        highlightIndex += activeHighlights.length - oldHighlightLength;
        B.JSArray_methods.addAll$1(line.highlights, activeHighlights);
      }
      return lines;
    },
    $signature: 70
  };
  A.Highlighter__collateLines__closure.prototype = {
    call$1(highlight) {
      return type$._Highlight._as(highlight).span.get$end().get$line() < this.line.number;
    },
    $signature: 11
  };
  A.Highlighter_highlight_closure.prototype = {
    call$1(highlight) {
      type$._Highlight._as(highlight);
      return true;
    },
    $signature: 11
  };
  A.Highlighter__writeFileStart_closure.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += B.JSString_methods.$mul("\u2500", 2) + ">";
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure.prototype = {
    call$0() {
      var t1 = this.startLine === this.line.number ? "\u250c" : "\u2514";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 1
  };
  A.Highlighter__writeMultilineHighlights_closure0.prototype = {
    call$0() {
      var t1 = this.highlight == null ? "\u2500" : "\u253c";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 1
  };
  A.Highlighter__writeMultilineHighlights_closure1.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += "\u2500";
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure2.prototype = {
    call$0() {
      var t2, t3, _this = this,
        t1 = _this._box_0,
        vertical = t1.openedOnThisLine ? "\u253c" : "\u2502";
      if (_this.current != null)
        _this.$this._highlighter$_buffer._contents += vertical;
      else {
        t2 = _this.line;
        t3 = t2.number;
        if (_this.startLine === t3) {
          t2 = _this.$this;
          t2._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights__closure(t1, t2), t1.openedOnThisLineColor, type$.Null);
          t1.openedOnThisLine = true;
          if (t1.openedOnThisLineColor == null)
            t1.openedOnThisLineColor = t2._primaryColor;
        } else {
          t2 = _this.endLine === t3 && _this.highlight.span.get$end().get$column() === t2.text.length;
          t3 = _this.$this;
          if (t2)
            t3._highlighter$_buffer._contents += "\u2514";
          else
            t3._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights__closure0(t3, vertical), t1.openedOnThisLineColor, type$.Null);
        }
      }
    },
    $signature: 1
  };
  A.Highlighter__writeMultilineHighlights__closure.prototype = {
    call$0() {
      var t1 = this._box_0.openedOnThisLine ? "\u252c" : "\u250c";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 1
  };
  A.Highlighter__writeMultilineHighlights__closure0.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += this.vertical;
    },
    $signature: 1
  };
  A.Highlighter__writeHighlightedText_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this._writeText$1(B.JSString_methods.substring$2(_this.text, _this.startColumn, _this.endColumn));
    },
    $signature: 0
  };
  A.Highlighter__writeIndicator_closure.prototype = {
    call$0() {
      var tabsBefore, tabsInside,
        t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents,
        t4 = this.highlight.span,
        startColumn = t4.get$start().get$column(),
        endColumn = t4.get$end().get$column();
      t4 = this.line.text;
      tabsBefore = t1._countTabs$1(B.JSString_methods.substring$2(t4, 0, startColumn));
      tabsInside = t1._countTabs$1(B.JSString_methods.substring$2(t4, startColumn, endColumn));
      startColumn += tabsBefore * 3;
      t2._contents += B.JSString_methods.$mul(" ", startColumn);
      t2 = t2._contents += B.JSString_methods.$mul("^", Math.max(endColumn + (tabsBefore + tabsInside) * 3 - startColumn, 1));
      return t2.length - t3.length;
    },
    $signature: 27
  };
  A.Highlighter__writeIndicator_closure0.prototype = {
    call$0() {
      return this.$this._writeArrow$2(this.line, this.highlight.span.get$start().get$column());
    },
    $signature: 0
  };
  A.Highlighter__writeIndicator_closure1.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents;
      if (_this.coversWholeLine)
        t2._contents += B.JSString_methods.$mul("\u2500", 3);
      else
        t1._writeArrow$3$beginning(_this.line, Math.max(_this.highlight.span.get$end().get$column() - 1, 0), false);
      return t2._contents.length - t3.length;
    },
    $signature: 27
  };
  A.Highlighter__writeSidebar_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = this._box_0.text;
      if (t3 == null)
        t3 = "";
      t1 = t2._contents += B.JSString_methods.padRight$1(t3, t1._paddingBeforeSidebar);
      t3 = this.end;
      t2._contents = t1 + (t3 == null ? "\u2502" : t3);
    },
    $signature: 1
  };
  A._Highlight.prototype = {
    toString$0(_) {
      var t1 = this.span;
      t1 = "" + "primary " + ("" + t1.get$start().get$line() + ":" + t1.get$start().get$column() + "-" + t1.get$end().get$line() + ":" + t1.get$end().get$column());
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._Highlight_closure.prototype = {
    call$0() {
      var t2, t3, t4, t5,
        t1 = this.span;
      if (!(type$.SourceSpanWithContext._is(t1) && A.findLineStart(t1.get$context(), t1.get$text(), t1.get$start().get$column()) != null)) {
        t2 = A.SourceLocation$(t1.get$start().get$offset(), 0, 0, t1.get$sourceUrl());
        t3 = t1.get$end().get$offset();
        t4 = t1.get$sourceUrl();
        t5 = A.countCodeUnits(t1.get$text(), 10);
        t1 = A.SourceSpanWithContext$(t2, A.SourceLocation$(t3, A._Highlight__lastLineLength(t1.get$text()), t5, t4), t1.get$text(), t1.get$text());
      }
      return A._Highlight__normalizeEndOfLine(A._Highlight__normalizeTrailingNewline(A._Highlight__normalizeNewlines(t1)));
    },
    $signature: 72
  };
  A._Line.prototype = {
    toString$0(_) {
      return "" + this.number + ': "' + this.text + '" (' + B.JSArray_methods.join$1(this.highlights, ", ") + ")";
    }
  };
  A.SourceLocation.prototype = {
    distance$1(other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      var t1;
      type$.SourceLocation._as(other);
      t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.sourceUrl, other.get$sourceUrl()) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.sourceUrl;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var _this = this,
        t1 = A.getRuntimeType(_this).toString$0(0),
        source = _this.sourceUrl;
      return "<" + t1 + ": " + _this.offset + " " + (A.S(source == null ? "unknown source" : source) + ":" + (_this.line + 1) + ":" + (_this.column + 1)) + ">";
    },
    $isComparable: 1,
    get$sourceUrl() {
      return this.sourceUrl;
    },
    get$offset() {
      return this.offset;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    }
  };
  A.SourceLocationMixin.prototype = {
    distance$1(other) {
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(this.get$sourceUrl()) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      type$.SourceLocation._as(other);
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(this.get$sourceUrl()) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.file.url, other.get$sourceUrl()) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.file.url;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var t1 = A.getRuntimeType(this).toString$0(0),
        t2 = this.offset,
        t3 = this.file,
        source = t3.url;
      return "<" + t1 + ": " + t2 + " " + (A.S(source == null ? "unknown source" : source) + ":" + (t3.getLine$1(t2) + 1) + ":" + (t3.getColumn$1(t2) + 1)) + ">";
    },
    $isComparable: 1,
    $isSourceLocation: 1
  };
  A.SourceSpanBase.prototype = {
    SourceSpanBase$3(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(), t2.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t2.get$sourceUrl()) + '" and  "' + A.S(t1.get$sourceUrl()) + "\" don't match.", null));
      else if (t1.get$offset() < t2.get$offset())
        throw A.wrapException(A.ArgumentError$("End " + t1.toString$0(0) + " must come after start " + t2.toString$0(0) + ".", null));
      else {
        t3 = this.text;
        if (t3.length !== t2.distance$1(t1))
          throw A.wrapException(A.ArgumentError$('Text "' + t3 + '" must be ' + t2.distance$1(t1) + " characters long.", null));
      }
    },
    get$start() {
      return this.start;
    },
    get$end() {
      return this.end;
    },
    get$text() {
      return this.text;
    }
  };
  A.SourceSpanException.prototype = {
    get$message() {
      return this._span_exception$_message;
    },
    toString$0(_) {
      var t3, highlight,
        t1 = this._span,
        t2 = "" + ("line " + (t1.get$start().get$line() + 1) + ", column " + (t1.get$start().get$column() + 1));
      if (t1.get$sourceUrl() != null) {
        t3 = t1.get$sourceUrl();
        t3 = t2 + (" of " + $.$get$context().prettyUri$1(t3));
        t2 = t3;
      }
      t2 += ": " + this._span_exception$_message;
      highlight = t1.highlight$1$color(null);
      t1 = highlight.length !== 0 ? t2 + "\n" + highlight : t2;
      return "Error on " + (t1.charCodeAt(0) == 0 ? t1 : t1);
    },
    $isException: 1
  };
  A.SourceSpanFormatException.prototype = {
    get$offset() {
      var t1 = this._span;
      t1 = A.FileLocation$_(t1.file, t1._file$_start);
      return t1.offset;
    },
    $isFormatException: 1,
    get$source() {
      return this.source;
    }
  };
  A.SourceSpanMixin.prototype = {
    get$sourceUrl() {
      return this.get$start().get$sourceUrl();
    },
    get$length(_) {
      return this.get$end().get$offset() - this.get$start().get$offset();
    },
    compareTo$1(_, other) {
      var result;
      type$.SourceSpan._as(other);
      result = this.get$start().compareTo$1(0, other.get$start());
      return result === 0 ? this.get$end().compareTo$1(0, other.get$end()) : result;
    },
    highlight$1$color(color) {
      var _this = this;
      if (!type$.SourceSpanWithContext._is(_this) && _this.get$length(_this) === 0)
        return "";
      return A.Highlighter$(_this, color).highlight$0();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceSpan._is(other) && this.get$start().$eq(0, other.get$start()) && this.get$end().$eq(0, other.get$end());
    },
    get$hashCode(_) {
      return A.Object_hash(this.get$start(), this.get$end(), B.C_SentinelValue);
    },
    toString$0(_) {
      var _this = this;
      return "<" + A.getRuntimeType(_this).toString$0(0) + ": from " + _this.get$start().toString$0(0) + " to " + _this.get$end().toString$0(0) + ' "' + _this.get$text() + '">';
    },
    $isComparable: 1,
    $isSourceSpan: 1
  };
  A.SourceSpanWithContext.prototype = {
    get$context() {
      return this._context;
    }
  };
  A.StorageBucketApi.prototype = {};
  A.SupabaseStorageClient.prototype = {};
  A.StringScannerException.prototype = {
    get$source() {
      return A._asString(this.source);
    }
  };
  A.StringScanner.prototype = {
    get$lastMatch() {
      var _this = this;
      if (_this._position !== _this._lastMatchPosition)
        _this._lastMatch = null;
      return _this._lastMatch;
    },
    scan$1(pattern) {
      var success, _this = this,
        t1 = _this._lastMatch = J.matchAsPrefix$2$s(type$.Pattern._as(pattern), _this.string, _this._position);
      _this._lastMatchPosition = _this._position;
      success = t1 != null;
      if (success)
        _this._lastMatchPosition = _this._position = t1.get$end();
      return success;
    },
    expect$2$name(pattern, $name) {
      var t1;
      type$.Pattern._as(pattern);
      if (this.scan$1(pattern))
        return;
      if ($name == null)
        if (type$.RegExp._is(pattern))
          $name = "/" + pattern.pattern + "/";
        else {
          t1 = J.toString$0$(pattern);
          t1 = A.stringReplaceAllUnchecked(t1, "\\", "\\\\");
          $name = '"' + A.stringReplaceAllUnchecked(t1, '"', '\\"') + '"';
        }
      this.error$3$length$position(0, "expected " + $name + ".", 0, this._position);
    },
    expect$1(pattern) {
      return this.expect$2$name(pattern, null);
    },
    expectDone$0() {
      var t1 = this._position;
      if (t1 === this.string.length)
        return;
      this.error$3$length$position(0, "expected no more input.", 0, t1);
    },
    error$3$length$position(_, message, $length, position) {
      var t2, t3, t4, t5, sourceFile, end,
        t1 = this.string;
      if (position < 0)
        A.throwExpression(A.RangeError$("position must be greater than or equal to 0."));
      else if (position > t1.length)
        A.throwExpression(A.RangeError$("position must be less than or equal to the string length."));
      t2 = position + $length > t1.length;
      if (t2)
        A.throwExpression(A.RangeError$("position plus length must not go beyond the end of the string."));
      t2 = this.sourceUrl;
      t3 = new A.CodeUnits(t1);
      t4 = A._setArrayType([0], type$.JSArray_int);
      t5 = new Uint32Array(A._ensureNativeList(t3.toList$0(t3)));
      sourceFile = new A.SourceFile(t2, t4, t5);
      sourceFile.SourceFile$decoded$2$url(t3, t2);
      end = position + $length;
      if (end > t5.length)
        A.throwExpression(A.RangeError$("End " + end + string$.x20must_ + sourceFile.get$length(sourceFile) + "."));
      else if (position < 0)
        A.throwExpression(A.RangeError$("Start may not be negative, was " + position + "."));
      throw A.wrapException(new A.StringScannerException(t1, message, new A._FileSpan(sourceFile, position, end)));
    }
  };
  A.SupabaseClient.prototype = {
    from$1(table) {
      var t1, t2, t3, t4, t5, _this = this, _null = null;
      ++_this._incrementId;
      _this.__SupabaseClient_realtime_F === $ && A.throwLateFieldNI("realtime");
      t1 = _this.__SupabaseClient_rest_F;
      t1 === $ && A.throwLateFieldNI("rest");
      t2 = type$.String;
      t2 = A.LinkedHashMap_LinkedHashMap$of(t1.headers, t2, t2);
      t1 = _this.__SupabaseClient__isolate_F;
      t1 === $ && A.throwLateFieldNI("_isolate");
      t3 = A.Uri_parse(_this.restUrl + "/" + table, 0, _null);
      t4 = new A.SupabaseQueryBuilder();
      t5 = type$.dynamic;
      t4.PostgrestBuilder$8$body$headers$httpClient$isolate$method$options$schema$url(_null, t2, _this._supabase_client$_httpClient, t1, _null, _null, _this.schema, t3, t5, t5);
      return t4;
    },
    _getAuthHeaders$0() {
      var authBearer, t1;
      this.__SupabaseClient_auth_F === $ && A.throwLateFieldNI("auth");
      authBearer = this.supabaseKey;
      t1 = type$.String;
      t1 = A.LinkedHashMap_LinkedHashMap$of(A.LinkedHashMap_LinkedHashMap$_literal(["apikey", authBearer, "Authorization", "Bearer " + authBearer], t1, t1), t1, t1);
      t1.addAll$1(0, B.Map_taoYl);
      return t1;
    },
    _listenForAuthEvents$0() {
      var t1 = this.__SupabaseClient_auth_F;
      t1 === $ && A.throwLateFieldNI("auth");
      t1 = t1._onAuthStateChangeController;
      this.set$__SupabaseClient__authStateSubscription_A(type$.StreamSubscription_AuthState._as(new A._BehaviorSubjectStream(t1, t1.$ti._eval$1("_BehaviorSubjectStream<1>")).listen$2$onError(new A.SupabaseClient__listenForAuthEvents_closure(this), new A.SupabaseClient__listenForAuthEvents_closure0())));
    },
    set$__SupabaseClient__authStateSubscription_A(__SupabaseClient__authStateSubscription_A) {
      type$.StreamSubscription_AuthState._as(__SupabaseClient__authStateSubscription_A);
    }
  };
  A.SupabaseClient__listenForAuthEvents_closure.prototype = {
    call$1(data) {
      type$.AuthState._as(data);
      data.get$event();
      data.get$session().get$accessToken();
    },
    $signature: 73
  };
  A.SupabaseClient__listenForAuthEvents_closure0.prototype = {
    call$2(error, stack) {
    },
    $signature: 74
  };
  A.SupabaseQueryBuilder.prototype = {};
  A.main_closure.prototype = {
    call$1(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response_2),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, queueId, userId, queue, tweets, userData, authParams, replyId, firstTweetID, tweet, body, id, body0, t1, t2, t3, t4, t5, t6, _i, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A.print("heee");
              $async$goto = 3;
              return A._asyncAwait(request.json$0(0), $async$call$1);
            case 3:
              // returning from await.
              body0 = $async$result;
              A.print("yes");
              t1 = J.getInterceptor$asx(body0);
              queueId = t1.$index(body0, "queueId");
              userId = t1.$index(body0, "userId");
              A.print("done");
              $async$handler = 5;
              t1 = $async$self.supabase;
              t2 = type$.dynamic;
              $async$goto = 8;
              return A._asyncAwait(t1.from$1("queue").select$1$1("tweets", t2).eq$2("id", queueId), $async$call$1);
            case 8:
              // returning from await.
              queue = $async$result;
              A.print(queue);
              t3 = type$.List_dynamic;
              tweets = J.map$1$1$ax(t3._as(J.$index$asx(J.$index$asx(queue, 0), "tweets")), new A.main__closure(), type$.QueueTweetModelEdge).toList$0(0);
              $async$goto = 9;
              return A._asyncAwait(t1.from$1("info").select$1$1("twitter", t2).eq$2("id", userId), $async$call$1);
            case 9:
              // returning from await.
              userData = $async$result;
              A.print(userData);
              authParams = J.$index$asx(J.get$first$ax(userData), "twitter");
              replyId = null;
              firstTweetID = null;
              t4 = tweets, t5 = t4.length, t6 = type$.String, _i = 0;
            case 10:
              // for condition
              if (!(_i < t4.length)) {
                // goto after for
                $async$goto = 12;
                break;
              }
              tweet = t4[_i];
              body = A.LinkedHashMap_LinkedHashMap$_literal(["text", tweet.content], t6, t2);
              if (J.get$isNotEmpty$asx(tweet.mediaIds))
                J.$indexSet$ax(body, "media", A.LinkedHashMap_LinkedHashMap$_literal(["media_ids", tweet.mediaIds], t6, t3));
              if (replyId != null)
                J.$indexSet$ax(body, "reply", A.LinkedHashMap_LinkedHashMap$_literal(["in_reply_to_tweet_id", replyId], t6, t6));
              $async$goto = 13;
              return A._asyncAwait(A.TwitterApi_postTweet(A._asString(J.$index$asx(authParams, "apiKey")), A._asString(J.$index$asx(authParams, "apiSecretKey")), body, A._asString(J.$index$asx(authParams, "oauthToken")), A._asString(J.$index$asx(authParams, "oauthTokenSecret"))), $async$call$1);
            case 13:
              // returning from await.
              id = $async$result;
              $async$goto = id.id == null ? 14 : 16;
              break;
            case 14:
              // then
              A.printString(id.message);
              A.printString("" + id.statusCode);
              t4 = t1.from$1("queue").update$1(A.LinkedHashMap_LinkedHashMap$_literal(["status", "error", "twitter_id", firstTweetID], t2, t2));
              t5 = queueId;
              if (t3._is(t5))
                t4.appendSearchParams$2("id", "eq.{" + t4._cleanFilterArray$1(t5) + "}");
              else
                t4.appendSearchParams$2("id", "eq." + A.S(t5));
              $async$goto = 17;
              return A._asyncAwait(t4, $async$call$1);
            case 17:
              // returning from await.
              t1 = A.Response_Response$json(A.LinkedHashMap_LinkedHashMap$_literal(["status", "ERROR", "message", id.message], t6, type$.nullable_String));
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 15;
              break;
            case 16:
              // else
              replyId = id.id;
              if (J.indexOf$1$asx(tweets, tweet) === 0)
                firstTweetID = id.id;
            case 15:
              // join
            case 11:
              // for update
              t4.length === t5 || (0, A.throwConcurrentModificationError)(t4), ++_i;
              // goto for condition
              $async$goto = 10;
              break;
            case 12:
              // after for
              $async$goto = 18;
              return A._asyncAwait(t1.from$1("queue").update$1(A.LinkedHashMap_LinkedHashMap$_literal(["status", "posted", "twitter_id", firstTweetID], t2, t2)).eq$2("id", queueId), $async$call$1);
            case 18:
              // returning from await.
              t1 = A.Response_Response$json(A.LinkedHashMap_LinkedHashMap$_literal(["status", "OK", "id", firstTweetID], t6, type$.nullable_String));
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception = $async$currentError;
              t1 = type$.String;
              t1 = A.Response_Response$json(A.LinkedHashMap_LinkedHashMap$_literal(["status", "ERROR", "message", "INTERNAL SERVER ERROR"], t1, t1));
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 7:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 75
  };
  A.main__closure.prototype = {
    call$1(e) {
      var t1 = J.getInterceptor$asx(e),
        t2 = A._asString(t1.$index(e, "id")),
        t3 = A._asString(t1.$index(e, "content")),
        t4 = type$.List_dynamic,
        t5 = J.map$1$1$ax(t4._as(t1.$index(e, "media")), A.queue_tweet_model_QueueMedia___fromMap_tearOff$closure(), type$.QueueMedia).toList$0(0),
        t6 = t4._as(t1.$index(e, "polls")),
        t7 = t1.$index(e, "media_ids");
      return new A.QueueTweetModelEdge(t2, t3, t5, t6, t4._as(t7 == null ? [] : t7), A._asString(t1.$index(e, "created_at")));
    },
    $signature: 76
  };
  A.EdgeIsolate.prototype = {
    decode$1(json) {
      return A.Future_Future$value(B.C_JsonCodec.decode$2$reviver(json, null), type$.dynamic);
    },
    $isYAJsonIsolate: 1
  };
  A.SupabaseFunctions.prototype = {
    SupabaseFunctions$1$fetch(fetch) {
      var t2, t3, _s4_ = "self",
        _s8_ = "location",
        t1 = $.$get$_context();
      if (J.$index$asx(t1.$index(0, _s4_), _s8_) == null) {
        t2 = t1.$index(0, _s4_);
        t3 = type$.String;
        t3 = A.LinkedHashMap_LinkedHashMap$_literal(["href", ""], t3, t3);
        J.$indexSet$ax(t2, _s8_, A._wrapToDart(A.JsObject__convertDataTree(t3)));
      }
      if (t1.$index(0, "window") == null)
        t1.$indexSet(0, "window", t1.$index(0, _s4_));
      self.__dartSupabaseFetchHandler = A.allowInterop(new A.SupabaseFunctions_closure(this), type$.Promise_JavaScriptObject_Function_JavaScriptObject);
    }
  };
  A.SupabaseFunctions_closure.prototype = {
    call$1(request) {
      var t1 = type$.JavaScriptObject;
      return A.futureToPromise(A.Future_Future(new A.SupabaseFunctions__closure(this.$this, t1._as(request)), t1), t1);
    },
    $signature: 77
  };
  A.SupabaseFunctions__closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JavaScriptObject),
        $async$returnValue, $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.$this.fetch.call$1(new A.Request($async$self.request)), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result._delegate;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 78
  };
  A.TypedDataBuffer.prototype = {
    get$length(_) {
      return this._typed_buffer$_length;
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      if (index >= this._typed_buffer$_length)
        throw A.wrapException(A.IndexError$(index, this));
      t1 = this._typed_buffer$_buffer;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $indexSet(_, index, value) {
      var _this = this;
      A._asInt(index);
      A._instanceType(_this)._eval$1("TypedDataBuffer.E")._as(value);
      if (index >= _this._typed_buffer$_length)
        throw A.wrapException(A.IndexError$(index, _this));
      B.NativeUint8List_methods.$indexSet(_this._typed_buffer$_buffer, index, value);
    },
    set$length(_, newLength) {
      var t2, t3, i, newBuffer, _this = this,
        t1 = _this._typed_buffer$_length;
      if (newLength < t1)
        for (t2 = _this._typed_buffer$_buffer, t3 = t2.length, i = newLength; i < t1; ++i) {
          if (!(i >= 0 && i < t3))
            return A.ioore(t2, i);
          t2[i] = 0;
        }
      else {
        t1 = _this._typed_buffer$_buffer.length;
        if (newLength > t1) {
          if (t1 === 0)
            newBuffer = new Uint8Array(newLength);
          else
            newBuffer = _this._createBiggerBuffer$1(newLength);
          B.NativeUint8List_methods.setRange$3(newBuffer, 0, _this._typed_buffer$_length, _this._typed_buffer$_buffer);
          _this.set$_typed_buffer$_buffer(newBuffer);
        }
      }
      _this._typed_buffer$_length = newLength;
    },
    _typed_buffer$_add$1(value) {
      var t1, _this = this;
      A._instanceType(_this)._eval$1("TypedDataBuffer.E")._as(value);
      t1 = _this._typed_buffer$_length;
      if (t1 === _this._typed_buffer$_buffer.length)
        _this._grow$1(t1);
      B.NativeUint8List_methods.$indexSet(_this._typed_buffer$_buffer, _this._typed_buffer$_length++, value);
    },
    add$1(_, element) {
      var t1, _this = this;
      A._instanceType(_this)._eval$1("TypedDataBuffer.E")._as(element);
      t1 = _this._typed_buffer$_length;
      if (t1 === _this._typed_buffer$_buffer.length)
        _this._grow$1(t1);
      B.NativeUint8List_methods.$indexSet(_this._typed_buffer$_buffer, _this._typed_buffer$_length++, element);
    },
    addAll$1(_, values) {
      A._instanceType(this)._eval$1("Iterable<TypedDataBuffer.E>")._as(values);
      A.RangeError_checkNotNegative(0, "start");
      this._addAll$3(values, 0, null);
    },
    _addAll$3(values, start, end) {
      var t2, i, value, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("Iterable<TypedDataBuffer.E>")._as(values);
      if (type$.List_dynamic._is(values))
        end = J.get$length$asx(values);
      if (end != null) {
        _this._insertKnownLength$4(_this._typed_buffer$_length, values, start, end);
        return;
      }
      for (t2 = J.get$iterator$ax(values), t1 = t1._eval$1("TypedDataBuffer.E"), i = 0; t2.moveNext$0();) {
        value = t2.get$current();
        if (i >= start)
          _this._typed_buffer$_add$1(t1._as(value));
        ++i;
      }
      if (i < start)
        throw A.wrapException(A.StateError$("Too few elements"));
    },
    _insertKnownLength$4(index, values, start, end) {
      var t1, valuesLength, newLength, t2, _this = this;
      A._instanceType(_this)._eval$1("Iterable<TypedDataBuffer.E>")._as(values);
      if (type$.List_dynamic._is(values)) {
        t1 = J.getInterceptor$asx(values);
        if (start > t1.get$length(values) || end > t1.get$length(values))
          throw A.wrapException(A.StateError$("Too few elements"));
      }
      valuesLength = end - start;
      newLength = _this._typed_buffer$_length + valuesLength;
      _this._ensureCapacity$1(newLength);
      t1 = _this._typed_buffer$_buffer;
      t2 = index + valuesLength;
      B.NativeUint8List_methods.setRange$4(t1, t2, _this._typed_buffer$_length + valuesLength, t1, index);
      B.NativeUint8List_methods.setRange$4(_this._typed_buffer$_buffer, index, t2, values, start);
      _this._typed_buffer$_length = newLength;
    },
    _ensureCapacity$1(requiredCapacity) {
      var newBuffer, _this = this;
      if (requiredCapacity <= _this._typed_buffer$_buffer.length)
        return;
      newBuffer = _this._createBiggerBuffer$1(requiredCapacity);
      B.NativeUint8List_methods.setRange$3(newBuffer, 0, _this._typed_buffer$_length, _this._typed_buffer$_buffer);
      _this.set$_typed_buffer$_buffer(newBuffer);
    },
    _createBiggerBuffer$1(requiredCapacity) {
      var newLength = this._typed_buffer$_buffer.length * 2;
      if (requiredCapacity != null && newLength < requiredCapacity)
        newLength = requiredCapacity;
      else if (newLength < 8)
        newLength = 8;
      return new Uint8Array(newLength);
    },
    _grow$1($length) {
      var t1 = this._createBiggerBuffer$1(null);
      B.NativeUint8List_methods.setRange$3(t1, 0, $length, this._typed_buffer$_buffer);
      this.set$_typed_buffer$_buffer(t1);
    },
    set$_typed_buffer$_buffer(_buffer) {
      this._typed_buffer$_buffer = A._instanceType(this)._eval$1("List<TypedDataBuffer.E>")._as(_buffer);
    }
  };
  A._IntBuffer.prototype = {};
  A.Uint8Buffer.prototype = {};
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _ = A._BroadcastStreamController.prototype;
    _.super$_BroadcastStreamController$_addEventError = _._addEventError$0;
    _ = A.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = A.Object.prototype;
    _.super$Object$toString = _.toString$0;
    _ = A.JsObject.prototype;
    _.super$JsObject$$index = _.$index;
    _.super$JsObject$$indexSet = _.$indexSet;
    _ = A._JsArray_JsObject_ListMixin.prototype;
    _.super$_JsArray_JsObject_ListMixin$$indexSet = _.$indexSet;
    _ = A.BaseRequest.prototype;
    _.super$BaseRequest$finalize = _.finalize$0;
    _ = A.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_u = hunkHelpers._instance_1u,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_i = hunkHelpers._instance_1i,
      _static = hunkHelpers.installStaticTearOff;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 28);
    _instance_1_u(A.CastStreamSubscription.prototype, "get$__internal$_onData", "__internal$_onData$1", 4);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 12);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 12);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 12);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_1(A, "async___nullDataHandler$closure", "_nullDataHandler", 2);
    _static_2(A, "async___nullErrorHandler$closure", "_nullErrorHandler", 3);
    _static_0(A, "async___nullDoneHandler$closure", "_nullDoneHandler", 0);
    var _;
    _instance_0_u(_ = A._BroadcastSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance(A._Completer.prototype, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 36, 0, 0);
    _instance_2_u(A._Future.prototype, "get$_completeError", "_completeError$2", 3);
    _instance_1_u(_ = A._StreamController.prototype, "get$_add", "_add$1", 4);
    _instance_2_u(_, "get$_addError", "_addError$2", 3);
    _instance_0_u(_, "get$_close", "_close$0", 0);
    _instance_0_u(_ = A._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(_ = A._BufferingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(A._DoneStreamSubscription.prototype, "get$_sendDone", "_sendDone$0", 0);
    _static_2(A, "collection___defaultEquals$closure", "_defaultEquals", 29);
    _static_1(A, "collection___defaultHashCode$closure", "_defaultHashCode", 13);
    _static_2(A, "collection_ListMixin__compareAny$closure", "ListMixin__compareAny", 28);
    _instance(A._LinkedHashSet.prototype, "get$_newSimilarSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSimilarSet$1$0", "_newSimilarSet$0"], 15, 0, 0);
    _instance(A._UnmodifiableSet.prototype, "get$_newSimilarSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSimilarSet$1$0", "_newSimilarSet$0"], 15, 0, 0);
    _static_1(A, "convert___defaultToEncodable$closure", "_defaultToEncodable", 6);
    _instance_1_i(_ = A._ByteCallbackSink.prototype, "get$add", "add$1", 4);
    _instance_0_u(_, "get$close", "close$0", 0);
    _static_1(A, "core__identityHashCode$closure", "identityHashCode", 13);
    _static_2(A, "core__identical$closure", "identical", 29);
    _static_1(A, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 5);
    _static_0(A, "core__Uri__createList$closure", "_Uri__createList", 83);
    _static_2(A, "core___toUnmodifiableStringList$closure", "_toUnmodifiableStringList", 84);
    _static_1(A, "js___convertToJS$closure", "_convertToJS", 19);
    _static_1(A, "js___convertToDart$closure", "_convertToDart", 85);
    _instance(_ = A.EdgeHttpClient.prototype, "get$$delete", 0, 1, null, ["call$4$body$encoding$headers", "call$1", "call$2$headers", "call$3$body$headers", "call$3$body$headers"], ["delete$4$body$encoding$headers", "delete$1", "delete$2$headers", "delete$3$body$headers", "delete$3$body$headers"], 7, 0, 0);
    _instance(_, "get$get", 0, 1, null, ["call$2$headers", "call$1"], ["$get$2$headers", "$get$1"], 20, 0, 0);
    _instance(_, "get$head", 0, 1, null, ["call$2$headers", "call$1"], ["head$2$headers", "head$1"], 20, 0, 0);
    _instance(_, "get$patch", 0, 1, null, ["call$4$body$encoding$headers", "call$1", "call$2$headers", "call$3$body$headers", "call$3$body$headers"], ["patch$4$body$encoding$headers", "patch$1", "patch$2$headers", "patch$3$body$headers", "patch$3$body$headers"], 7, 0, 0);
    _instance(_, "get$post", 0, 1, null, ["call$4$body$encoding$headers", "call$1", "call$2$headers", "call$3$body$headers", "call$3$body$headers"], ["post$4$body$encoding$headers", "post$1", "post$2$headers", "post$3$body$headers", "post$3$body$headers"], 7, 0, 0);
    _instance(_, "get$put", 0, 1, null, ["call$4$body$encoding$headers", "call$1", "call$2$headers", "call$3$body$headers", "call$3$body$headers"], ["put$4$body$encoding$headers", "put$1", "put$2$headers", "put$3$body$headers", "put$3$body$headers"], 7, 0, 0);
    _static(A, "utils_interop__dartify$closure", 1, null, ["call$1$1", "call$1"], ["dartify", function(jsObject) {
      return A.dartify(jsObject, type$.dynamic);
    }], 86, 1);
    _static_1(A, "queue_tweet_model_QueueMedia___fromMap_tearOff$closure", "QueueMedia___fromMap_tearOff", 87);
    _instance_1_u(A.RealtimeClient.prototype, "get$_onConnError", "_onConnError$1", 2);
    _instance_1_u(_ = A._StartWithStreamSink.prototype, "get$onData", "onData$1", 4);
    _instance_2_u(_, "get$onError", "onError$2", 3);
    _instance_0_u(_, "get$onDone", "onDone$0", 0);
    _instance_1_u(_ = A._StartWithErrorStreamSink.prototype, "get$onData", "onData$1", 4);
    _instance_2_u(_, "get$onError", "onError$2", 3);
    _instance_0_u(_, "get$onDone", "onDone$0", 0);
    _static(A, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      return A.max(a, b, type$.num);
    }], 88, 1);
    _static_2(A, "websocket_stub__createWebSocketClient$closure", "createWebSocketClient", 59);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _mixinHard = hunkHelpers.mixinHard,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Stream, A.CastStreamSubscription, A.Iterable, A.CastIterator, A.Closure, A.Error, A._ListBase_Object_ListMixin, A.SentinelValue, A.ListIterator, A.Iterator, A.ExpandIterator, A.EmptyIterator, A.WhereTypeIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.Symbol, A.MapView, A.ConstantMap, A.JSInvocationMirror, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A._Required, A.MapMixin, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A._InitializedCell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._AsyncStarStreamController, A._IterationMarker, A._SyncStarIterator, A.AsyncError, A._BufferingStreamSubscription, A._BroadcastStreamController, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.StreamTransformerBase, A._StreamController, A._SyncStreamControllerDispatch, A._AsyncStreamControllerDispatch, A._StreamSinkWrapper, A._AddStreamState, A._DelayedEvent, A._DelayedDone, A._PendingEvents, A._DoneStreamSubscription, A._StreamIterator, A._Zone, A._HashMapKeyIterator, A.__SetBase_Object_SetMixin, A._LinkedHashSetCell, A._LinkedHashSetIterator, A.ListMixin, A._UnmodifiableMapMixin, A.SetMixin, A._UnmodifiableSetMixin, A.Codec, A._Base64Encoder, A.ChunkedConversionSink, A._JsonStringifier, A.StringConversionSinkMixin, A._Utf8Encoder, A._Utf8Decoder, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.MapEntry, A.Null, A.Sink, A._StringStackTrace, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A.JsObject, A.NullRejectionException, A.Endian, A.CanonicalizedMap, A.Digest, A.HashSink, A.EdgeHttpClient, A.AbortController, A.AbortSignal, A.Headers, A.ReadResult, A.HttpClient, A.HttpClientRequest, A.HttpHeaders, A.HttpClientResponse, A.Request, A.UriValue, A.Response, A.QueueTweetModelEdge, A.QueueMedia, A.Signature, A.TwitterApiResponse, A.FunctionsClient, A.GotrueFetch, A.GoTrueAdminApi, A.GoTrueAdminMFAApi, A.GoTrueClient, A.GoTrueMFAApi, A.BaseRequest, A.BaseResponse, A.MediaType, A.Context, A.Style, A.ParsedPath, A.PathException, A.PostgrestClient, A.PostgrestBuilder, A.PostgrestException, A.PostgrestResponse, A.FetchOptions, A.Message, A.RealtimeClient, A.RetryTimer, A._Wrapper, A.ForwardingSink, A._Empty, A.ErrorAndStackTrace, A._MultiControllerSink, A.SourceFile, A.SourceLocationMixin, A.SourceSpanMixin, A.Highlighter, A._Highlight, A._Line, A.SourceLocation, A.SourceSpanException, A.StorageBucketApi, A.StringScanner, A.SupabaseClient, A.EdgeIsolate, A.SupabaseFunctions]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, A.NativeTypedData]);
    _inherit(J.LegacyJavaScriptObject, J.JavaScriptObject);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction, A.Env, A.DirEntry, A.ReadFileOptions, A.Headers0, A.Symbol1, A.Iterator0, A.AsyncIterator, A.IteratorResult, A.Promise, A.ReadableStream, A.ReadableStreamDefaultReader, A.JavaScriptObject0, A.Accelerometer, A.AccelerometerSensorOptions, A.LinearAccelerationSensor, A.GravitySensor, A.AccelerometerReadingValues, A.LinearAccelerationReadingValues, A.GravityReadingValues, A.AmbientLightSensor, A.AmbientLightReadingValues, A.XRAnchor, A.JsIterable, A.ANGLEInstancedArrays, A.HTMLAttributionSrcElementUtils, A.AudioOutputOptions, A.BackgroundFetchManager, A.BackgroundFetchUIOptions, A.BackgroundFetchOptions, A.BackgroundFetchRegistration, A.BackgroundFetchRecord, A.BackgroundFetchEvent, A.BackgroundFetchEventInit, A.BackgroundFetchUpdateUIEvent, A.SyncManager, A.SyncEvent, A.SyncEventInit, A.NavigatorBadge, A.BatteryManager, A.CaptureHandleConfig, A.CaptureHandle, A.ClipboardEventInit, A.ClipboardEvent, A.ClipboardItem, A.ClipboardItemOptions, A.Clipboard, A.ClipboardPermissionDescriptor, A.CloseWatcher, A.CloseWatcherOptions, A.CompressionStream, A.DecompressionStream, A.PressureObserver, A.PressureRecord, A.PressureObserverOptions, A.Console, A.ContactAddress, A.ContactInfo, A.ContactsSelectOptions, A.ContactsManager, A.ContentDescription, A.ContentIndex, A.ContentIndexEventInit, A.ContentIndexEvent, A.CookieStore, A.CookieStoreGetOptions, A.CookieInit, A.CookieStoreDeleteOptions, A.CookieListItem, A.CookieStoreManager, A.CookieChangeEvent, A.CookieChangeEventInit, A.ExtendableCookieChangeEvent, A.ExtendableCookieChangeEventInit, A.CrashReportBody, A.Credential, A.CredentialUserData, A.CredentialsContainer, A.CredentialData, A.CredentialRequestOptions, A.CredentialCreationOptions, A.PasswordCredential, A.PasswordCredentialData, A.FederatedCredential, A.FederatedCredentialRequestOptions, A.FederatedCredentialInit, A.CSPViolationReportBody, A.SecurityPolicyViolationEvent, A.SecurityPolicyViolationEventInit, A.ScriptingPolicyReportBody, A.AnimationWorkletGlobalScope, A.WorkletAnimationEffect, A.WorkletAnimation, A.WorkletGroupEffect, A.AnimationEvent, A.AnimationEventInit, A.CSSKeyframeRule, A.CSSKeyframesRule, A.CSSAnimation, A.CSSLayerBlockRule, A.CSSLayerStatementRule, A.CSSConditionRule, A.CSSMediaRule, A.CSSSupportsRule, A.ContentVisibilityAutoStateChangedEvent, A.ContentVisibilityAutoStateChangedEventInit, A.CSSContainerRule, A.CSSCounterStyleRule, A.CSSViewportRule, A.FontFaceDescriptors, A.FontFace, A.FontFaceFeatures, A.FontFaceVariationAxis, A.FontFaceSetLoadEventInit, A.FontFaceSetLoadEvent, A.FontFaceSet, A.FontFaceSource, A.CSSFontFaceRule, A.CSSFontFeatureValuesRule, A.JsMap, A.CSSFontPaletteValuesRule, A.LayoutWorkletGlobalScope, A.LayoutOptions, A.LayoutChild, A.LayoutFragment, A.IntrinsicSizes, A.LayoutConstraints, A.LayoutConstraintsOptions, A.ChildBreakToken, A.BreakToken, A.BreakTokenOptions, A.LayoutEdges, A.FragmentResultOptions, A.FragmentResult, A.IntrinsicSizesResultOptions, A.SVGClipPathElement, A.SVGMaskElement, A.FocusableAreasOption, A.SpatialNavigationSearchOptions, A.NavigationEvent, A.NavigationEventInit, A.CSSNestingRule, A.PaintWorkletGlobalScope, A.PaintRenderingContext2DSettings, A.PaintRenderingContext2D, A.PaintSize, A.CSSParserOptions, A.CSSParserRule, A.CSSParserAtRule, A.CSSParserQualifiedRule, A.CSSParserDeclaration, A.CSSParserValue, A.CSSParserBlock, A.CSSParserFunction, A.PropertyDefinition, A.CSSPropertyRule, A.CSSPseudoElement, A.NamedFlow, A.Region, A.TransitionEvent, A.TransitionEventInit, A.CSSTransition, A.CSSStyleValue, A.StylePropertyMap, A.CSSUnparsedValue, A.CSSVariableReferenceValue, A.CSSKeywordValue, A.CSSNumericType, A.CSSNumericValue, A.CSSUnitValue, A.CSSMathValue, A.CSSMathSum, A.CSSMathProduct, A.CSSMathNegate, A.CSSMathInvert, A.CSSMathMin, A.CSSMathMax, A.CSSMathClamp, A.CSSTransformValue, A.CSSTransformComponent, A.CSSTranslate, A.CSSRotate, A.CSSScale, A.CSSSkew, A.CSSSkewX, A.CSSSkewY, A.CSSPerspective, A.CSSMatrixComponent, A.CSSMatrixComponentOptions, A.CSSImageValue, A.CSSColorValue, A.Cssrgb, A.Csshsl, A.Csshwb, A.CSSLab, A.Csslch, A.CSSOKLab, A.Cssoklch, A.CSSColor, A.MediaList, A.StyleSheet, A.CSSStyleSheet, A.CSSStyleSheetInit, A.StyleSheetList, A.LinkStyle, A.CSSRuleList, A.CSSRule, A.CSSStyleRule, A.CSSImportRule, A.CSSGroupingRule, A.CSSPageRule, A.CSSMarginRule, A.CSSNamespaceRule, A.CSSStyleDeclaration, A.ElementCSSInlineStyle, A.Css, A.ScrollOptions, A.ScrollToOptions, A.MediaQueryList, A.MediaQueryListEvent, A.MediaQueryListEventInit, A.Screen, A.CaretPosition, A.ScrollIntoViewOptions, A.CheckVisibilityOptions, A.BoxQuadOptions, A.ConvertCoordinateOptions, A.GeometryUtils, A.VisualViewport, A.DataCue, A.DeprecationReportBody, A.NavigatorDeviceMemory, A.DevicePosture, A.DigitalGoodsService, A.ItemDetails, A.PurchaseDetails, A.Event, A.EventInit, A.CustomEvent, A.CustomEventInit, A.EventTarget, A.EventListenerOptions, A.AddEventListenerOptions, A.AbortController0, A.AbortSignal0, A.NonElementParentNode, A.DocumentOrShadowRoot, A.ParentNode, A.NonDocumentTypeChildNode, A.ChildNode, A.Slottable, A.HTMLCollection, A.MutationObserver, A.MutationObserverInit, A.MutationRecord, A.Node, A.GetRootNodeOptions, A.Document, A.XMLDocument, A.ElementCreationOptions, A.DOMImplementation, A.DocumentType, A.DocumentFragment, A.ShadowRoot, A.Element, A.ShadowRootInit, A.NamedNodeMap, A.Attr, A.CharacterData, A.Text, A.CDATASection, A.ProcessingInstruction, A.Comment, A.AbstractRange, A.StaticRangeInit, A.StaticRange, A.Range, A.NodeIterator, A.TreeWalker, A.NodeFilter, A.XPathResult, A.XPathExpression, A.XPathNSResolver, A.XPathEvaluatorBase, A.XPathEvaluator, A.XSLTProcessor, A.XMLSerializer, A.InnerHTML, A.EditContextInit, A.EditContext, A.TextUpdateEventInit, A.TextUpdateEvent, A.TextFormatInit, A.TextFormat, A.TextFormatUpdateEventInit, A.TextFormatUpdateEvent, A.CharacterBoundsUpdateEventInit, A.CharacterBoundsUpdateEvent, A.PerformanceElementTiming, A.TextDecoderCommon, A.TextDecoderOptions, A.TextDecodeOptions, A.TextDecoder, A.TextEncoderCommon, A.TextEncoderEncodeIntoResult, A.TextEncoder, A.TextDecoderStream, A.TextEncoderStream, A.MediaKeySystemConfiguration, A.MediaKeySystemMediaCapability, A.MediaKeySystemAccess, A.MediaKeys, A.MediaKeySession, A.MediaKeyMessageEvent, A.MediaKeyMessageEventInit, A.MediaEncryptedEvent, A.MediaEncryptedEventInit, A.FileSystemEntry, A.FileSystemDirectoryEntry, A.FileSystemFlags, A.FileSystemDirectoryReader, A.FileSystemFileEntry, A.FileSystem, A.EpubReadingSystem, A.PerformanceEventTiming, A.EXTBlendMinmax, A.EXTClipCullDistance, A.EXTColorBufferFloat, A.EXTColorBufferHalfFloat, A.WebGLTimerQueryEXT, A.EXTDisjointTimerQuery, A.EXTDisjointTimerQueryWebgl2, A.EXTFloatBlend, A.EXTFragDepth, A.EXTShaderTextureLod, A.EXTSRGB, A.EXTTextureCompressionBptc, A.EXTTextureCompressionRgtc, A.EXTTextureFilterAnisotropic, A.EXTTextureNorm16, A.ColorSelectionResult, A.ColorSelectionOptions, A.EyeDropper, A.IdentityCredential, A.IdentityCredentialRequestOptions, A.IdentityProvider, A.IdentityCredentialLogoutRPsRequest, A.Body, A.Request1, A.RequestInit, A.Response1, A.ResponseInit, A.FileSystemPermissionDescriptor, A.FileSystemHandlePermissionDescriptor, A.FilePickerAcceptType, A.FilePickerOptions, A.OpenFilePickerOptions, A.SaveFilePickerOptions, A.DirectoryPickerOptions, A.Blob, A.BlobPropertyBag, A.File, A.FilePropertyBag, A.FileList, A.FileReader, A.FileReaderSync, A.SVGFilterElement, A.SVGFilterPrimitiveStandardAttributes, A.SVGFEBlendElement, A.SVGFEColorMatrixElement, A.SVGFEComponentTransferElement, A.SVGComponentTransferFunctionElement, A.SVGFEFuncRElement, A.SVGFEFuncGElement, A.SVGFEFuncBElement, A.SVGFEFuncAElement, A.SVGFECompositeElement, A.SVGFEConvolveMatrixElement, A.SVGFEDiffuseLightingElement, A.SVGFEDistantLightElement, A.SVGFEPointLightElement, A.SVGFESpotLightElement, A.SVGFEDisplacementMapElement, A.SVGFEDropShadowElement, A.SVGFEFloodElement, A.SVGFEGaussianBlurElement, A.SVGFEImageElement, A.SVGFEMergeElement, A.SVGFEMergeNodeElement, A.SVGFEMorphologyElement, A.SVGFEOffsetElement, A.SVGFESpecularLightingElement, A.SVGFETileElement, A.SVGFETurbulenceElement, A.FontMetrics, A.Baseline, A.Font, A.FileSystemHandle, A.FileSystemCreateWritableOptions, A.FileSystemFileHandle, A.FileSystemGetFileOptions, A.FileSystemGetDirectoryOptions, A.FileSystemRemoveOptions, A.FileSystemDirectoryHandle, A.WriteParams, A.FileSystemWritableFileStream, A.FullscreenOptions, A.Gamepad, A.GamepadButton, A.GamepadEvent, A.GamepadEventInit, A.GamepadHapticActuator, A.GamepadPose, A.GamepadTouch, A.Sensor, A.SensorOptions, A.SensorErrorEvent, A.SensorErrorEventInit, A.MockSensorConfiguration, A.MockSensor, A.MockSensorReadingValues, A.Geolocation, A.PositionOptions, A.GeolocationPosition, A.GeolocationCoordinates, A.GeolocationPositionError, A.GeolocationSensor, A.GeolocationSensorOptions, A.ReadOptions, A.GeolocationSensorReading, A.GeolocationReadingValues, A.DOMPointReadOnly, A.DOMPoint, A.DOMPointInit, A.DOMRectReadOnly, A.DOMRect, A.DOMRectInit, A.DOMRectList, A.DOMQuad, A.DOMQuadInit, A.DOMMatrixReadOnly, A.DOMMatrix, A.DOMMatrix2DInit, A.DOMMatrixInit, A.RelatedApplication, A.Gyroscope, A.GyroscopeSensorOptions, A.GyroscopeReadingValues, A.Performance, A.HTMLAllCollection, A.HTMLFormControlsCollection, A.RadioNodeList, A.HTMLOptionsCollection, A.DOMStringList, A.HTMLElement, A.HTMLUnknownElement, A.HTMLOrSVGElement, A.DOMStringMap, A.HTMLHtmlElement, A.HTMLHeadElement, A.HTMLTitleElement, A.HTMLBaseElement, A.HTMLLinkElement, A.HTMLMetaElement, A.HTMLStyleElement, A.HTMLBodyElement, A.HTMLHeadingElement, A.HTMLParagraphElement, A.HTMLHRElement, A.HTMLPreElement, A.HTMLQuoteElement, A.HTMLOListElement, A.HTMLUListElement, A.HTMLMenuElement, A.HTMLLIElement, A.HTMLDListElement, A.HTMLDivElement, A.HTMLAnchorElement, A.HTMLDataElement, A.HTMLTimeElement, A.HTMLSpanElement, A.HTMLBRElement, A.HTMLHyperlinkElementUtils, A.HTMLModElement, A.HTMLPictureElement, A.HTMLSourceElement, A.HTMLImageElement, A.HTMLIFrameElement, A.HTMLEmbedElement, A.HTMLObjectElement, A.HTMLVideoElement, A.HTMLAudioElement, A.HTMLTrackElement, A.HTMLMediaElement, A.MediaError, A.AudioTrackList, A.AudioTrack, A.VideoTrackList, A.VideoTrack, A.TextTrackList, A.TextTrack, A.TextTrackCueList, A.TextTrackCue, A.TimeRanges, A.TrackEvent, A.TrackEventInit, A.HTMLMapElement, A.HTMLAreaElement, A.HTMLTableElement, A.HTMLTableCaptionElement, A.HTMLTableColElement, A.HTMLTableSectionElement, A.HTMLTableRowElement, A.HTMLTableCellElement, A.HTMLFormElement, A.HTMLLabelElement, A.HTMLInputElement, A.HTMLButtonElement, A.HTMLSelectElement, A.HTMLDataListElement, A.HTMLOptGroupElement, A.HTMLOptionElement, A.HTMLTextAreaElement, A.HTMLOutputElement, A.HTMLProgressElement, A.HTMLMeterElement, A.HTMLFieldSetElement, A.HTMLLegendElement, A.ValidityState, A.SubmitEvent, A.SubmitEventInit, A.FormDataEvent, A.FormDataEventInit, A.HTMLDetailsElement, A.HTMLDialogElement, A.HTMLScriptElement, A.HTMLTemplateElement, A.HTMLSlotElement, A.AssignedNodesOptions, A.HTMLCanvasElement, A.CanvasRenderingContext2DSettings, A.CanvasRenderingContext2D, A.CanvasState, A.CanvasTransform, A.CanvasCompositing, A.CanvasImageSmoothing, A.CanvasFillStrokeStyles, A.CanvasShadowStyles, A.CanvasFilters, A.CanvasRect, A.CanvasDrawPath, A.CanvasUserInterface, A.CanvasText, A.CanvasDrawImage, A.CanvasImageData, A.CanvasPathDrawingStyles, A.CanvasTextDrawingStyles, A.CanvasPath, A.CanvasGradient, A.CanvasPattern, A.TextMetrics, A.ImageDataSettings, A.ImageData, A.Path2D, A.ImageBitmapRenderingContext, A.ImageBitmapRenderingContextSettings, A.ImageEncodeOptions, A.OffscreenCanvas, A.OffscreenCanvasRenderingContext2D, A.CustomElementRegistry, A.ElementDefinitionOptions, A.ElementInternals, A.ValidityStateFlags, A.FocusOptions, A.ElementContentEditable, A.DataTransfer, A.DataTransferItemList, A.DataTransferItem, A.DragEvent, A.DragEventInit, A.Window, A.WindowPostMessageOptions, A.BarProp, A.History, A.Location, A.PopStateEvent, A.PopStateEventInit, A.HashChangeEvent, A.HashChangeEventInit, A.PageTransitionEvent, A.PageTransitionEventInit, A.BeforeUnloadEvent, A.ErrorEvent, A.ErrorEventInit, A.PromiseRejectionEvent, A.PromiseRejectionEventInit, A.GlobalEventHandlers, A.WindowEventHandlers, A.DocumentAndElementEventHandlers, A.WindowOrWorkerGlobalScope, A.DOMParser, A.Navigator, A.NavigatorID, A.NavigatorLanguage, A.NavigatorOnLine, A.NavigatorContentUtils, A.NavigatorCookies, A.NavigatorPlugins, A.PluginArray, A.MimeTypeArray, A.Plugin, A.MimeType, A.ImageBitmap, A.ImageBitmapOptions, A.AnimationFrameProvider, A.MessageEvent, A.MessageEventInit, A.EventSource, A.EventSourceInit, A.MessageChannel, A.MessagePort, A.StructuredSerializeOptions, A.BroadcastChannel, A.WorkerGlobalScope, A.DedicatedWorkerGlobalScope, A.SharedWorkerGlobalScope, A.AbstractWorker, A.Worker, A.WorkerOptions, A.SharedWorker, A.NavigatorConcurrentHardware, A.WorkerNavigator, A.WorkerLocation, A.WorkletGlobalScope, A.Worklet, A.WorkletOptions, A.Storage, A.WindowSessionStorage, A.WindowLocalStorage, A.StorageEvent, A.StorageEventInit, A.HTMLMarqueeElement, A.HTMLFrameSetElement, A.HTMLFrameElement, A.HTMLDirectoryElement, A.HTMLFontElement, A.HTMLParamElement, A.External, A.IdleOptions, A.IdleDetector, A.ImageCapture, A.PhotoCapabilities, A.PhotoSettings, A.MediaSettingsRange, A.ConstrainPoint2DParameters, A.Point2D, A.ImageResource, A.IDBRequest, A.IDBOpenDBRequest, A.IDBVersionChangeEvent, A.IDBVersionChangeEventInit, A.IDBFactory, A.IDBDatabaseInfo, A.IDBDatabase, A.IDBTransactionOptions, A.IDBObjectStoreParameters, A.IDBObjectStore, A.IDBIndexParameters, A.IDBIndex, A.IDBKeyRange, A.IDBCursor, A.IDBCursorWithValue, A.IDBTransaction, A.Ink, A.InkPresenterParam, A.InkPresenter, A.InkTrailStyle, A.InputDeviceCapabilities, A.InputDeviceCapabilitiesInit, A.IntersectionObserver, A.IntersectionObserverEntry, A.IntersectionObserverEntryInit, A.IntersectionObserverInit, A.InterventionReportBody, A.IsInputPendingOptions, A.Scheduling, A.Profiler, A.ProfilerTrace, A.ProfilerSample, A.ProfilerStack, A.ProfilerFrame, A.ProfilerInitOptions, A.JsonLd, A.JsonLdProcessor, A.RdfTriple, A.RdfLiteral, A.JsonLdOptions, A.LoadDocumentOptions, A.RemoteDocument, A.JsonLdError, A.JsonLdFramingError, A.Keyboard, A.KHRParallelShaderCompile, A.LargestContentfulPaint, A.LayoutShift, A.LayoutShiftAttribution, A.QueryOptions, A.FontData, A.PerformanceLongTaskTiming, A.TaskAttributionTiming, A.Magnetometer, A.MagnetometerSensorOptions, A.UncalibratedMagnetometer, A.MagnetometerReadingValues, A.UncalibratedMagnetometerReadingValues, A.BeforeInstallPromptEvent, A.PromptResponseObject, A.LaunchParams, A.LaunchQueue, A.MathMLElement, A.MediaConfiguration, A.MediaDecodingConfiguration, A.MediaEncodingConfiguration, A.VideoConfiguration, A.AudioConfiguration, A.MediaCapabilitiesKeySystemConfiguration, A.KeySystemTrackConfiguration, A.MediaCapabilitiesInfo, A.MediaCapabilitiesDecodingInfo, A.MediaCapabilitiesEncodingInfo, A.MediaCapabilities, A.VideoPlaybackQuality, A.MediaSource, A.MediaSourceHandle, A.SourceBuffer, A.SourceBufferList, A.MockCapturePromptResultConfiguration, A.MockCaptureDeviceConfiguration, A.MockCameraConfiguration, A.MockMicrophoneConfiguration, A.CanvasCaptureMediaStreamTrack, A.CaptureActionEvent, A.CaptureActionEventInit, A.CropTarget, A.BrowserCaptureMediaStreamTrack, A.MediaStream, A.MediaStreamTrack, A.MediaTrackSupportedConstraints, A.MediaTrackCapabilities, A.MediaTrackConstraints, A.MediaTrackConstraintSet, A.MediaTrackSettings, A.MediaStreamTrackEvent, A.MediaStreamTrackEventInit, A.OverconstrainedError, A.MediaDevices, A.MediaDeviceInfo, A.InputDeviceInfo, A.MediaStreamConstraints, A.DoubleRange, A.ConstrainDoubleRange, A.ULongRange, A.ConstrainULongRange, A.ConstrainBooleanParameters, A.ConstrainDOMStringParameters, A.DevicePermissionDescriptor, A.CameraDevicePermissionDescriptor, A.MediaStreamTrackProcessor, A.MediaStreamTrackProcessorInit, A.VideoTrackGenerator, A.ViewportMediaStreamConstraints, A.MediaSession, A.MediaMetadata, A.MediaMetadataInit, A.MediaImage, A.MediaPositionState, A.MediaSessionActionDetails, A.MediaRecorder, A.MediaRecorderOptions, A.BlobEvent, A.BlobEventInit, A.Navigation, A.NavigationUpdateCurrentEntryOptions, A.NavigationOptions, A.NavigationNavigateOptions, A.NavigationReloadOptions, A.NavigationResult, A.NavigationCurrentEntryChangeEvent, A.NavigationCurrentEntryChangeEventInit, A.NavigationTransition, A.NavigateEvent, A.NavigateEventInit, A.NavigationInterceptOptions, A.NavigationDestination, A.NavigationHistoryEntry, A.PerformanceNavigationTiming, A.PerformanceTiming, A.PerformanceNavigation, A.NavigatorNetworkInformation, A.NetworkInformation, A.Notification, A.NotificationOptions, A.NotificationAction, A.GetNotificationOptions, A.NotificationEvent, A.NotificationEventInit, A.OESDrawBuffersIndexed, A.OESElementIndexUint, A.OESFboRenderMipmap, A.OESStandardDerivatives, A.OESTextureFloat, A.OESTextureFloatLinear, A.OESTextureHalfFloat, A.OESTextureHalfFloatLinear, A.WebGLVertexArrayObjectOES, A.OESVertexArrayObject, A.DeviceOrientationEvent, A.DeviceOrientationEventInit, A.DeviceMotionEventAcceleration, A.DeviceMotionEventRotationRate, A.DeviceMotionEvent, A.DeviceMotionEventAccelerationInit, A.DeviceMotionEventRotationRateInit, A.DeviceMotionEventInit, A.OrientationSensor, A.OrientationSensorOptions, A.AbsoluteOrientationSensor, A.RelativeOrientationSensor, A.AbsoluteOrientationReadingValues, A.RelativeOrientationReadingValues, A.OVRMultiview2, A.PerformancePaintTiming, A.PaymentManager, A.PaymentInstruments, A.PaymentInstrument, A.ImageObject, A.CanMakePaymentEvent, A.CanMakePaymentEventInit, A.PaymentRequestDetailsUpdate, A.PaymentRequestEvent, A.PaymentRequestEventInit, A.PaymentHandlerResponse, A.PaymentRequest, A.PaymentMethodData, A.PaymentCurrencyAmount, A.PaymentDetailsBase, A.PaymentDetailsInit, A.PaymentDetailsUpdate, A.PaymentDetailsModifier, A.PaymentItem, A.PaymentCompleteDetails, A.PaymentResponse, A.PaymentValidationErrors, A.PaymentMethodChangeEvent, A.PaymentMethodChangeEventInit, A.PaymentRequestUpdateEvent, A.PaymentRequestUpdateEventInit, A.MemoryMeasurement, A.MemoryBreakdownEntry, A.MemoryAttribution, A.MemoryAttributionContainer, A.PerformanceEntry, A.PerformanceObserver, A.PerformanceObserverCallbackOptions, A.PerformanceObserverInit, A.PerformanceObserverEntryList, A.PeriodicSyncManager, A.BackgroundSyncOptions, A.PeriodicSyncEventInit, A.PeriodicSyncEvent, A.Permissions, A.PermissionDescriptor, A.PermissionStatus, A.PermissionSetParameters, A.PermissionsPolicy, A.PermissionsPolicyViolationReportBody, A.PictureInPictureWindow, A.PictureInPictureEvent, A.PictureInPictureEventInit, A.PointerEventInit, A.PointerEvent, A.HTMLPortalElement, A.PortalActivateOptions, A.PortalHost, A.PortalActivateEvent, A.PortalActivateEventInit, A.Presentation, A.PresentationRequest, A.PresentationAvailability, A.PresentationConnectionAvailableEvent, A.PresentationConnectionAvailableEventInit, A.PresentationConnection, A.PresentationConnectionCloseEvent, A.PresentationConnectionCloseEventInit, A.PresentationReceiver, A.PresentationConnectionList, A.ProximitySensor, A.ProximityReadingValues, A.PushPermissionDescriptor, A.PushManager, A.PushSubscriptionOptions, A.PushSubscriptionOptionsInit, A.PushSubscription, A.PushSubscriptionJSON, A.PushMessageData, A.PushEvent, A.PushEventInit, A.PushSubscriptionChangeEvent, A.PushSubscriptionChangeEventInit, A.RemotePlayback, A.ReportBody, A.Report, A.ReportingObserver, A.ReportingObserverOptions, A.GenerateTestReportParameters, A.IdleRequestOptions, A.IdleDeadline, A.ResizeObserverOptions, A.ResizeObserver, A.ResizeObserverEntry, A.ResizeObserverSize, A.PerformanceResourceTiming, A.Sanitizer, A.SetHTMLOptions, A.SanitizerConfig, A.NetworkInformationSaveData, A.SchedulerPostTaskOptions, A.Scheduler, A.TaskPriorityChangeEvent, A.TaskPriorityChangeEventInit, A.TaskControllerInit, A.TaskController, A.TaskSignal, A.DisplayMediaStreamOptions, A.ScreenOrientation, A.WakeLock, A.WakeLockSentinel, A.ScrollTimelineOptions, A.ScrollTimeline, A.ViewTimelineOptions, A.ViewTimeline, A.FragmentDirective, A.SecurePaymentConfirmationRequest, A.AuthenticationExtensionsPaymentInputs, A.CollectedClientPaymentData, A.CollectedClientAdditionalPaymentData, A.PaymentCredentialInstrument, A.Selection, A.Serial, A.SerialPortRequestOptions, A.SerialPortFilter, A.SerialPort, A.SerialPortInfo, A.SerialOptions, A.SerialOutputSignals, A.SerialInputSignals, A.PerformanceServerTiming, A.ServiceWorker, A.ServiceWorkerRegistration, A.ServiceWorkerContainer, A.RegistrationOptions, A.NavigationPreloadManager, A.NavigationPreloadState, A.ServiceWorkerGlobalScope, A.Client0, A.WindowClient, A.Clients, A.ClientQueryOptions, A.ExtendableEvent, A.ExtendableEventInit, A.FetchEvent, A.FetchEventInit, A.ExtendableMessageEvent, A.ExtendableMessageEventInit, A.Cache, A.CacheQueryOptions, A.CacheStorage, A.MultiCacheQueryOptions, A.FaceDetector, A.FaceDetectorOptions, A.DetectedFace, A.Landmark, A.BarcodeDetector, A.BarcodeDetectorOptions, A.DetectedBarcode, A.SpeechRecognition, A.SpeechRecognitionErrorEvent, A.SpeechRecognitionErrorEventInit, A.SpeechRecognitionAlternative, A.SpeechRecognitionResult, A.SpeechRecognitionResultList, A.SpeechRecognitionEvent, A.SpeechRecognitionEventInit, A.SpeechGrammar, A.SpeechGrammarList, A.SpeechSynthesis, A.SpeechSynthesisUtterance, A.SpeechSynthesisEvent, A.SpeechSynthesisEventInit, A.SpeechSynthesisErrorEvent, A.SpeechSynthesisErrorEventInit, A.SpeechSynthesisVoice, A.NavigatorStorage, A.StorageManager, A.StorageEstimate, A.ReadableStreamGetReaderOptions, A.ReadableStreamIteratorOptions, A.ReadableWritablePair, A.StreamPipeOptions, A.UnderlyingSource, A.ReadableStreamGenericReader, A.ReadableStreamDefaultReader0, A.ReadableStreamReadResult, A.ReadableStreamBYOBReader, A.ReadableStreamDefaultController, A.ReadableByteStreamController, A.ReadableStreamBYOBRequest, A.WritableStream, A.UnderlyingSink, A.WritableStreamDefaultWriter, A.WritableStreamDefaultController, A.TransformStream, A.Transformer, A.TransformStreamDefaultController, A.QueuingStrategy, A.QueuingStrategyInit, A.ByteLengthQueuingStrategy, A.CountQueuingStrategy, A.GenericTransformStream, A.SVGElement, A.SVGBoundingBoxOptions, A.SVGGraphicsElement, A.SVGGeometryElement, A.SVGNumber, A.SVGLength, A.SVGAngle, A.SVGNumberList, A.SVGLengthList, A.SVGStringList, A.SVGAnimatedBoolean, A.SVGAnimatedEnumeration, A.SVGAnimatedInteger, A.SVGAnimatedNumber, A.SVGAnimatedLength, A.SVGAnimatedAngle, A.SVGAnimatedString, A.SVGAnimatedRect, A.SVGAnimatedNumberList, A.SVGAnimatedLengthList, A.SVGUnitTypes, A.SVGTests, A.SVGFitToViewBox, A.SVGURIReference, A.SVGSVGElement, A.SVGGElement, A.SVGDefsElement, A.SVGDescElement, A.SVGMetadataElement, A.SVGTitleElement, A.SVGSymbolElement, A.SVGUseElement, A.SVGUseElementShadowRoot, A.SVGElementInstance, A.ShadowAnimation, A.SVGSwitchElement, A.GetSVGDocument, A.SVGStyleElement, A.SVGTransform, A.SVGTransformList, A.SVGAnimatedTransformList, A.SVGPreserveAspectRatio, A.SVGAnimatedPreserveAspectRatio, A.SVGPathElement, A.SVGRectElement, A.SVGCircleElement, A.SVGEllipseElement, A.SVGLineElement, A.SVGAnimatedPoints, A.SVGPointList, A.SVGPolylineElement, A.SVGPolygonElement, A.SVGTextContentElement, A.SVGTextPositioningElement, A.SVGTextElement, A.SVGTSpanElement, A.SVGTextPathElement, A.SVGImageElement, A.SVGForeignObjectElement, A.SVGMarkerElement, A.SVGGradientElement, A.SVGLinearGradientElement, A.SVGRadialGradientElement, A.SVGStopElement, A.SVGPatternElement, A.SVGScriptElement, A.SVGAElement, A.SVGViewElement, A.TimeEvent, A.SVGAnimationElement, A.SVGAnimateElement, A.SVGSetElement, A.SVGAnimateMotionElement, A.SVGMPathElement, A.SVGAnimateTransformElement, A.SVGDiscardElement, A.TestUtils, A.TextDetector, A.DetectedText, A.TouchInit, A.Touch, A.TouchList, A.TouchEventInit, A.TouchEvent, A.TrustedHTML, A.TrustedScript, A.TrustedScriptURL, A.TrustedTypePolicyFactory, A.TrustedTypePolicy, A.TrustedTypePolicyOptions, A.NavigatorUABrandVersion, A.UADataValues, A.UALowEntropyJSON, A.NavigatorUAData, A.NavigatorUA, A.UIEvent, A.UIEventInit, A.FocusEvent, A.FocusEventInit, A.MouseEvent, A.MouseEventInit, A.EventModifierInit, A.WheelEvent, A.WheelEventInit, A.InputEvent, A.InputEventInit, A.KeyboardEvent, A.KeyboardEventInit, A.CompositionEvent, A.CompositionEventInit, A.MutationEvent, A.Url, A.URLPattern, A.URLPatternInit, A.URLPatternResult, A.URLPatternComponentResult, A.PerformanceMarkOptions, A.PerformanceMeasureOptions, A.PerformanceMark, A.PerformanceMeasure, A.VideoFrameMetadata, A.VirtualKeyboard, A.ARIAMixin, A.WebAssemblyInstantiatedSource, A.WebAssembly, A.ModuleExportDescriptor, A.ModuleImportDescriptor, A.Module, A.Instance, A.MemoryDescriptor, A.Memory, A.TableDescriptor, A.Table, A.GlobalDescriptor, A.Global, A.AnimationTimeline, A.DocumentTimelineOptions, A.DocumentTimeline, A.Animation, A.AnimationEffect, A.EffectTiming, A.OptionalEffectTiming, A.ComputedEffectTiming, A.KeyframeEffect, A.BaseComputedKeyframe, A.BasePropertyIndexedKeyframe, A.BaseKeyframe, A.KeyframeEffectOptions, A.Animatable, A.KeyframeAnimationOptions, A.GetAnimationsOptions, A.GroupEffect, A.AnimationNodeList, A.SequenceEffect, A.AnimationPlaybackEvent, A.AnimationPlaybackEventInit, A.BluetoothDataFilterInit, A.BluetoothManufacturerDataFilterInit, A.BluetoothServiceDataFilterInit, A.BluetoothLEScanFilterInit, A.RequestDeviceOptions, A.Bluetooth, A.BluetoothPermissionDescriptor, A.AllowedBluetoothDevice, A.BluetoothPermissionStorage, A.BluetoothPermissionResult, A.ValueEvent, A.ValueEventInit, A.BluetoothDevice, A.WatchAdvertisementsOptions, A.BluetoothAdvertisingEvent, A.BluetoothAdvertisingEventInit, A.BluetoothRemoteGATTServer, A.BluetoothRemoteGATTService, A.BluetoothRemoteGATTCharacteristic, A.BluetoothCharacteristicProperties, A.BluetoothRemoteGATTDescriptor, A.CharacteristicEventHandlers, A.BluetoothDeviceEventHandlers, A.ServiceEventHandlers, A.BluetoothUUID, A.NavigatorLocks, A.LockManager, A.LockOptions, A.LockManagerSnapshot, A.LockInfo, A.Lock, A.NDEFMessage, A.NDEFMessageInit, A.NDEFRecord, A.NDEFRecordInit, A.NDEFReader, A.NDEFReadingEvent, A.NDEFReadingEventInit, A.NDEFWriteOptions, A.NDEFMakeReadOnlyOptions, A.NDEFScanOptions, A.OTPCredential, A.OTPCredentialRequestOptions, A.ShareData, A.BaseAudioContext, A.AudioContext, A.AudioContextOptions, A.AudioTimestamp, A.AudioRenderCapacity, A.AudioRenderCapacityOptions, A.AudioRenderCapacityEvent, A.AudioRenderCapacityEventInit, A.OfflineAudioContext, A.OfflineAudioContextOptions, A.OfflineAudioCompletionEvent, A.OfflineAudioCompletionEventInit, A.AudioBuffer, A.AudioBufferOptions, A.AudioNode, A.AudioNodeOptions, A.AudioParam, A.AudioScheduledSourceNode, A.AnalyserNode, A.AnalyserOptions, A.AudioBufferSourceNode, A.AudioBufferSourceOptions, A.AudioDestinationNode, A.AudioListener, A.AudioProcessingEvent, A.AudioProcessingEventInit, A.BiquadFilterNode, A.BiquadFilterOptions, A.ChannelMergerNode, A.ChannelMergerOptions, A.ChannelSplitterNode, A.ChannelSplitterOptions, A.ConstantSourceNode, A.ConstantSourceOptions, A.ConvolverNode, A.ConvolverOptions, A.DelayNode, A.DelayOptions, A.DynamicsCompressorNode, A.DynamicsCompressorOptions, A.GainNode, A.GainOptions, A.IIRFilterNode, A.IIRFilterOptions, A.MediaElementAudioSourceNode, A.MediaElementAudioSourceOptions, A.MediaStreamAudioDestinationNode, A.MediaStreamAudioSourceNode, A.MediaStreamAudioSourceOptions, A.MediaStreamTrackAudioSourceNode, A.MediaStreamTrackAudioSourceOptions, A.OscillatorNode, A.OscillatorOptions, A.PannerNode, A.PannerOptions, A.PeriodicWave, A.PeriodicWaveConstraints, A.PeriodicWaveOptions, A.ScriptProcessorNode, A.StereoPannerNode, A.StereoPannerOptions, A.WaveShaperNode, A.WaveShaperOptions, A.AudioWorklet, A.AudioWorkletGlobalScope, A.AudioWorkletNode, A.AudioWorkletNodeOptions, A.AudioWorkletProcessor, A.AudioParamDescriptor, A.PublicKeyCredential, A.RegistrationResponseJSON, A.AuthenticatorAttestationResponseJSON, A.AuthenticationResponseJSON, A.AuthenticatorAssertionResponseJSON, A.AuthenticationExtensionsClientOutputsJSON, A.PublicKeyCredentialCreationOptionsJSON, A.PublicKeyCredentialUserEntityJSON, A.PublicKeyCredentialDescriptorJSON, A.AuthenticationExtensionsClientInputsJSON, A.PublicKeyCredentialRequestOptionsJSON, A.AuthenticatorResponse, A.AuthenticatorAttestationResponse, A.AuthenticatorAssertionResponse, A.PublicKeyCredentialParameters, A.PublicKeyCredentialCreationOptions, A.PublicKeyCredentialEntity, A.PublicKeyCredentialRpEntity, A.PublicKeyCredentialUserEntity, A.AuthenticatorSelectionCriteria, A.PublicKeyCredentialRequestOptions, A.AuthenticationExtensionsClientInputs, A.AuthenticationExtensionsClientOutputs, A.CollectedClientData, A.TokenBinding, A.PublicKeyCredentialDescriptor, A.CredentialPropertiesOutput, A.AuthenticationExtensionsPRFValues, A.AuthenticationExtensionsPRFInputs, A.AuthenticationExtensionsPRFOutputs, A.AuthenticationExtensionsLargeBlobInputs, A.AuthenticationExtensionsLargeBlobOutputs, A.AudioDecoder, A.AudioDecoderInit, A.VideoDecoder, A.VideoDecoderInit, A.AudioEncoder, A.AudioEncoderInit, A.EncodedAudioChunkMetadata, A.VideoEncoder, A.VideoEncoderInit, A.EncodedVideoChunkMetadata, A.SvcOutputMetadata, A.AudioDecoderSupport, A.VideoDecoderSupport, A.AudioEncoderSupport, A.VideoEncoderSupport, A.AudioDecoderConfig, A.VideoDecoderConfig, A.AudioEncoderConfig, A.VideoEncoderConfig, A.VideoEncoderEncodeOptions, A.EncodedAudioChunk, A.EncodedAudioChunkInit, A.EncodedVideoChunk, A.EncodedVideoChunkInit, A.AudioData, A.AudioDataInit, A.AudioDataCopyToOptions, A.VideoFrame, A.VideoFrameInit, A.VideoFrameBufferInit, A.VideoFrameCopyToOptions, A.PlaneLayout, A.VideoColorSpace, A.VideoColorSpaceInit, A.ImageDecoder, A.ImageDecoderInit, A.ImageDecodeOptions, A.ImageDecodeResult, A.ImageTrackList, A.ImageTrack, A.Ed448Params, A.Crypto, A.Algorithm, A.KeyAlgorithm, A.CryptoKey, A.SubtleCrypto, A.RsaOtherPrimesInfo, A.JsonWebKey, A.CryptoKeyPair, A.RsaKeyGenParams, A.RsaHashedKeyGenParams, A.RsaKeyAlgorithm, A.RsaHashedKeyAlgorithm, A.RsaHashedImportParams, A.RsaPssParams, A.RsaOaepParams, A.EcdsaParams, A.EcKeyGenParams, A.EcKeyAlgorithm, A.EcKeyImportParams, A.EcdhKeyDeriveParams, A.AesCtrParams, A.AesKeyAlgorithm, A.AesKeyGenParams, A.AesDerivedKeyParams, A.AesCbcParams, A.AesGcmParams, A.HmacImportParams, A.HmacKeyAlgorithm, A.HmacKeyGenParams, A.HkdfParams, A.Pbkdf2Params, A.NavigatorAutomationInformation, A.WebGLContextAttributes, A.WebGLObject, A.WebGLBuffer, A.WebGLFramebuffer, A.WebGLProgram, A.WebGLRenderbuffer, A.WebGLShader, A.WebGLTexture, A.WebGLUniformLocation, A.WebGLActiveInfo, A.WebGLShaderPrecisionFormat, A.WebGLRenderingContextBase, A.WebGLRenderingContextOverloads, A.WebGLRenderingContext, A.WebGLContextEvent, A.WebGLContextEventInit, A.WebGLQuery, A.WebGLSampler, A.WebGLSync, A.WebGLTransformFeedback, A.WebGLVertexArrayObject, A.WebGL2RenderingContextBase, A.WebGL2RenderingContextOverloads, A.WebGL2RenderingContext, A.WEBGLBlendEquationAdvancedCoherent, A.WEBGLColorBufferFloat, A.WEBGLCompressedTextureAstc, A.WEBGLCompressedTextureEtc, A.WEBGLCompressedTextureEtc1, A.WEBGLCompressedTexturePvrtc, A.WEBGLCompressedTextureS3tc, A.WEBGLCompressedTextureS3tcSrgb, A.WEBGLDebugRendererInfo, A.WEBGLDebugShaders, A.WEBGLDepthTexture, A.WEBGLDrawBuffers, A.WEBGLDrawInstancedBaseVertexBaseInstance, A.WEBGLLoseContext, A.WEBGLMultiDraw, A.WEBGLMultiDrawInstancedBaseVertexBaseInstance, A.GPUObjectBase, A.GPUObjectDescriptorBase, A.GPUSupportedLimits, A.GPUAdapterInfo, A.NavigatorGPU, A.Gpu, A.GPURequestAdapterOptions, A.GPUAdapter, A.GPUDeviceDescriptor, A.GPUDevice, A.GPUBuffer, A.GPUBufferDescriptor, A.GPUBufferUsage, A.GPUMapMode, A.GPUTexture, A.GPUTextureDescriptor, A.GPUTextureUsage, A.GPUTextureView, A.GPUTextureViewDescriptor, A.GPUExternalTexture, A.GPUExternalTextureDescriptor, A.GPUSampler, A.GPUSamplerDescriptor, A.GPUBindGroupLayout, A.GPUBindGroupLayoutDescriptor, A.GPUBindGroupLayoutEntry, A.GPUShaderStage, A.GPUBufferBindingLayout, A.GPUSamplerBindingLayout, A.GPUTextureBindingLayout, A.GPUStorageTextureBindingLayout, A.GPUExternalTextureBindingLayout, A.GPUBindGroup, A.GPUBindGroupDescriptor, A.GPUBindGroupEntry, A.GPUBufferBinding, A.GPUPipelineLayout, A.GPUPipelineLayoutDescriptor, A.GPUShaderModule, A.GPUShaderModuleDescriptor, A.GPUShaderModuleCompilationHint, A.GPUCompilationMessage, A.GPUCompilationInfo, A.GPUPipelineDescriptorBase, A.GPUPipelineBase, A.GPUProgrammableStage, A.GPUComputePipeline, A.GPUComputePipelineDescriptor, A.GPURenderPipeline, A.GPURenderPipelineDescriptor, A.GPUPrimitiveState, A.GPUMultisampleState, A.GPUFragmentState, A.GPUColorTargetState, A.GPUBlendState, A.GPUColorWrite, A.GPUBlendComponent, A.GPUDepthStencilState, A.GPUStencilFaceState, A.GPUVertexState, A.GPUVertexBufferLayout, A.GPUVertexAttribute, A.GPUCommandBuffer, A.GPUCommandBufferDescriptor, A.GPUCommandsMixin, A.GPUCommandEncoder, A.GPUCommandEncoderDescriptor, A.GPUImageDataLayout, A.GPUImageCopyBuffer, A.GPUImageCopyTexture, A.GPUImageCopyTextureTagged, A.GPUImageCopyExternalImage, A.GPUBindingCommandsMixin, A.GPUDebugCommandsMixin, A.GPUComputePassEncoder, A.GPUComputePassTimestampWrite, A.GPUComputePassDescriptor, A.GPURenderPassEncoder, A.GPURenderPassTimestampWrite, A.GPURenderPassDescriptor, A.GPURenderPassColorAttachment, A.GPURenderPassDepthStencilAttachment, A.GPURenderPassLayout, A.GPURenderCommandsMixin, A.GPURenderBundle, A.GPURenderBundleDescriptor, A.GPURenderBundleEncoder, A.GPURenderBundleEncoderDescriptor, A.GPUQueueDescriptor, A.GPUQueue, A.GPUQuerySet, A.GPUQuerySetDescriptor, A.GPUCanvasContext, A.GPUCanvasConfiguration, A.GPUDeviceLostInfo, A.GPUError, A.GPUOutOfMemoryError, A.GPUValidationError, A.GPUUncapturedErrorEvent, A.GPUUncapturedErrorEventInit, A.GPUColorDict, A.GPUOrigin2DDict, A.GPUOrigin3DDict, A.GPUExtent3DDict, A.Hid, A.HIDDeviceRequestOptions, A.HIDDeviceFilter, A.HIDDevice, A.HIDConnectionEvent, A.HIDConnectionEventInit, A.HIDInputReportEvent, A.HIDInputReportEventInit, A.HIDCollectionInfo, A.HIDReportInfo, A.HIDReportItem, A.DOMException, A.MidiPermissionDescriptor, A.MIDIOptions, A.MIDIAccess, A.MIDIPort, A.MIDIInput, A.MIDIOutput, A.MIDIMessageEvent, A.MIDIMessageEventInit, A.MIDIConnectionEvent, A.MIDIConnectionEventInit, A.NavigatorML, A.MLContextOptions, A.Ml, A.MLContext, A.MLOperandDescriptor, A.MLOperand, A.MLOperator, A.MLBufferResourceView, A.MLGraphBuilder, A.MLBatchNormalizationOptions, A.MLClampOptions, A.MLConv2dOptions, A.MLConvTranspose2dOptions, A.MLEluOptions, A.MLGemmOptions, A.MLGruOptions, A.MLGruCellOptions, A.MLHardSigmoidOptions, A.MLInstanceNormalizationOptions, A.MLLeakyReluOptions, A.MLLinearOptions, A.MLPadOptions, A.MLPool2dOptions, A.MLReduceOptions, A.MLResample2dOptions, A.MLSliceOptions, A.MLSoftplusOptions, A.MLSplitOptions, A.MLSqueezeOptions, A.MLTransposeOptions, A.MLGraph, A.MLCommandEncoder, A.RTCConfiguration, A.RTCIceServer, A.RTCOfferAnswerOptions, A.RTCOfferOptions, A.RTCAnswerOptions, A.RTCPeerConnection, A.RTCSessionDescription, A.RTCSessionDescriptionInit, A.RTCLocalSessionDescriptionInit, A.RTCIceCandidate, A.RTCIceCandidateInit, A.RTCPeerConnectionIceEvent, A.RTCPeerConnectionIceEventInit, A.RTCPeerConnectionIceErrorEvent, A.RTCPeerConnectionIceErrorEventInit, A.RTCCertificateExpiration, A.RTCCertificate, A.RTCRtpTransceiverInit, A.RTCRtpSender, A.RTCRtpParameters, A.RTCRtpSendParameters, A.RTCRtpReceiveParameters, A.RTCRtpCodingParameters, A.RTCRtpEncodingParameters, A.RTCRtcpParameters, A.RTCRtpHeaderExtensionParameters, A.RTCRtpCodecParameters, A.RTCRtpCapabilities, A.RTCRtpCodecCapability, A.RTCRtpHeaderExtensionCapability, A.RTCRtpReceiver, A.RTCRtpContributingSource, A.RTCRtpSynchronizationSource, A.RTCRtpTransceiver, A.RTCDtlsTransport, A.RTCDtlsFingerprint, A.RTCIceTransport, A.RTCIceParameters, A.RTCIceCandidatePair, A.RTCTrackEvent, A.RTCTrackEventInit, A.RTCSctpTransport, A.RTCDataChannel, A.RTCDataChannelInit, A.RTCDataChannelEvent, A.RTCDataChannelEventInit, A.RTCDTMFSender, A.RTCDTMFToneChangeEvent, A.RTCDTMFToneChangeEventInit, A.RTCStats, A.RTCError, A.RTCErrorInit, A.RTCErrorEvent, A.RTCErrorEventInit, A.RTCInsertableStreams, A.SFrameTransformOptions, A.SFrameTransform, A.SFrameTransformErrorEvent, A.SFrameTransformErrorEventInit, A.RTCEncodedVideoFrameMetadata, A.RTCEncodedVideoFrame, A.RTCEncodedAudioFrameMetadata, A.RTCEncodedAudioFrame, A.RTCTransformEvent, A.RTCRtpScriptTransformer, A.RTCRtpScriptTransform, A.RTCIceGatherOptions, A.RTCIdentityProviderGlobalScope, A.RTCIdentityProviderRegistrar, A.RTCIdentityProvider, A.RTCIdentityAssertionResult, A.RTCIdentityProviderDetails, A.RTCIdentityValidationResult, A.RTCIdentityProviderOptions, A.RTCIdentityAssertion, A.RTCRtpStreamStats, A.RTCCodecStats, A.RTCReceivedRtpStreamStats, A.RTCInboundRtpStreamStats, A.RTCRemoteInboundRtpStreamStats, A.RTCSentRtpStreamStats, A.RTCOutboundRtpStreamStats, A.RTCRemoteOutboundRtpStreamStats, A.RTCMediaSourceStats, A.RTCAudioSourceStats, A.RTCVideoSourceStats, A.RTCPeerConnectionStats, A.RTCDataChannelStats, A.RTCTransportStats, A.RTCIceCandidateStats, A.RTCIceCandidatePairStats, A.RTCCertificateStats, A.WebSocket, A.CloseEvent, A.CloseEventInit, A.WebTransportDatagramDuplexStream, A.WebTransport, A.WebTransportHash, A.WebTransportOptions, A.WebTransportCloseInfo, A.WebTransportStats, A.WebTransportDatagramStats, A.WebTransportSendStream, A.WebTransportSendStreamStats, A.WebTransportReceiveStream, A.WebTransportReceiveStreamStats, A.WebTransportBidirectionalStream, A.WebTransportError, A.WebTransportErrorInit, A.USBDeviceFilter, A.USBDeviceRequestOptions, A.Usb, A.USBConnectionEventInit, A.USBConnectionEvent, A.USBInTransferResult, A.USBOutTransferResult, A.USBIsochronousInTransferPacket, A.USBIsochronousInTransferResult, A.USBIsochronousOutTransferPacket, A.USBIsochronousOutTransferResult, A.USBDevice, A.USBControlTransferParameters, A.USBConfiguration, A.USBInterface, A.USBAlternateInterface, A.USBEndpoint, A.USBPermissionDescriptor, A.AllowedUSBDevice, A.USBPermissionStorage, A.USBPermissionResult, A.VTTCue, A.VTTRegion, A.XRSystem, A.XRSessionInit, A.XRSession, A.XRRenderStateInit, A.XRRenderState, A.XRFrame, A.XRSpace, A.XRReferenceSpace, A.XRBoundedReferenceSpace, A.XRView, A.XRViewport, A.XRRigidTransform, A.XRPose, A.XRViewerPose, A.XRInputSource, A.XRLayer, A.XRWebGLLayerInit, A.XRWebGLLayer, A.XRSessionEvent, A.XRSessionEventInit, A.XRInputSourceEvent, A.XRInputSourceEventInit, A.XRInputSourcesChangeEvent, A.XRInputSourcesChangeEventInit, A.XRReferenceSpaceEvent, A.XRReferenceSpaceEventInit, A.XRSessionSupportedPermissionDescriptor, A.XRPermissionDescriptor, A.XRPermissionStatus, A.XRDepthStateInit, A.XRDepthInformation, A.XRCPUDepthInformation, A.XRWebGLDepthInformation, A.XRDOMOverlayInit, A.XRDOMOverlayState, A.XRJointSpace, A.XRJointPose, A.XRHitTestOptionsInit, A.XRTransientInputHitTestOptionsInit, A.XRHitTestSource, A.XRTransientInputHitTestSource, A.XRHitTestResult, A.XRTransientInputHitTestResult, A.XRRayDirectionInit, A.XRRay, A.XRLightProbe, A.XRLightEstimate, A.XRLightProbeInit, A.XRCompositionLayer, A.XRProjectionLayer, A.XRQuadLayer, A.XRCylinderLayer, A.XREquirectLayer, A.XRCubeLayer, A.XRSubImage, A.XRWebGLSubImage, A.XRProjectionLayerInit, A.XRLayerInit, A.XRQuadLayerInit, A.XRCylinderLayerInit, A.XREquirectLayerInit, A.XRCubeLayerInit, A.XRWebGLBinding, A.XRMediaLayerInit, A.XRMediaQuadLayerInit, A.XRMediaCylinderLayerInit, A.XRMediaEquirectLayerInit, A.XRMediaBinding, A.XRLayerEvent, A.XRLayerEventInit, A.WindowControlsOverlay, A.WindowControlsOverlayGeometryChangeEvent, A.WindowControlsOverlayGeometryChangeEventInit, A.ScreenDetails, A.ScreenDetailed, A.XMLHttpRequestEventTarget, A.XMLHttpRequestUpload, A.XMLHttpRequest, A.ProgressEvent, A.ProgressEventInit, A.JsArray0, A.Symbol2, A.JsIterator, A.AsyncIterator0, A.IteratorResult0, A.JSObject, A.Number, A.Reflect]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Stream, [A.CastStream, A._StreamImpl, A.StreamView, A._EmptyStream, A._MultiStream, A.DeferStream, A._BehaviorSubjectStream]);
    _inheritMany(A.Iterable, [A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.ExpandIterable, A.SkipIterable, A.WhereTypeIterable, A._ConstantMapKeyIterable, A.IterableBase, A._StringAllMatchesIterable]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin, A.CastSet]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(A.Closure, [A.Closure2Args, A.Closure0Args, A.Instantiation, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._asyncStarHelper_closure0, A._SyncBroadcastStreamController__sendData_closure, A._SyncBroadcastStreamController__sendError_closure, A._SyncBroadcastStreamController__sendDone_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.Stream_length_closure, A.Stream_first_closure0, A._RootZone_bindUnaryCallbackGuarded_closure, A._LinkedCustomHashMap_closure, A.MapMixin_entries_closure, A._Uri__splitQueryStringAll_parsePair, A._createTables_setChars, A._createTables_setRange, A.JsObject__convertDataTree__convert, A._convertToJS_closure, A._convertToJS_closure0, A._wrapToDart_closure, A._wrapToDart_closure0, A._wrapToDart_closure1, A._convertDataTree__convert, A.promiseToFuture_closure, A.promiseToFuture_closure0, A.CanonicalizedMap_keys_closure, A.HeadersProps_get_entries_closure, A.QueueTweetModelEdge_toJson_closure, A.Signature_signatureDate_closure, A.generateAuthHeader_closure, A.BaseRequest_closure0, A.ByteStream_toBytes_closure, A.CaseInsensitiveMap$from_closure, A.MediaType_toString__closure, A.expectQuotedString_closure, A.Context_joinAll_closure, A.Context_split_closure, A._validateArgList_closure, A.PostgrestBuilder_whenComplete_closure, A.PostgrestBuilder_whenComplete__closure0, A.PostgrestBuilder_whenComplete_closure0, A.PostgrestBuilder_whenComplete__closure, A.PostgrestFilterBuilder__cleanFilterArray_closure, A.PostgrestFilterBuilder__cleanFilterArray_closure0, A.PostgrestFilterBuilder__cleanFilterArray_closure1, A.PostgrestQueryBuilder_select_closure, A.RealtimeClient_connect_closure, A.RealtimeClient_push_callback_closure, A.RealtimeClient_onConnMessage_closure, A.RealtimeClient_onConnMessage__closure, A.RealtimeClient_onConnMessage__closure0, A.RealtimeClient__onConnOpen_closure, A.RetryTimer_createRetryFunction_closure, A._forwardMulti_closure, A._forwardMulti_closure_listenToUpstream, A._forward_closure_listenToUpstream, A.Highlighter$__closure, A.Highlighter$___closure, A.Highlighter$__closure0, A.Highlighter__collateLines_closure, A.Highlighter__collateLines_closure1, A.Highlighter__collateLines__closure, A.Highlighter_highlight_closure, A.SupabaseClient__listenForAuthEvents_closure, A.main_closure, A.main__closure, A.SupabaseFunctions_closure]);
    _inheritMany(A.Closure2Args, [A._CastListBase_sort_closure, A.Primitives_functionNoSuchMethod_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A._Future__chainForeignFuture_closure0, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_mapToString_closure, A._JsonStringifier_writeMap_closure, A.NoSuchMethodError_toString_closure, A.Uri_splitQueryString_closure, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_error, A.Uri_parseIPv6Address_parseHex, A._Uri__makeQuery_writeParameter, A._Uri__makeQuery_closure, A._createTables_build, A.CanonicalizedMap_addAll_closure, A.CanonicalizedMap_forEach_closure, A.EdgeHttpClient_send_closure, A.futureToPromise_closure, A.HttpHeaders_HttpHeaders$fromFetchResponseHeaders_closure, A.HttpHeaders_forEach_closure, A.HttpHeaders_toMap_closure, A.Signature_encodeParams_closure, A.Signature_encodeParams_closure0, A.BaseRequest_closure, A.MediaType_toString_closure, A.RealtimeClient_closure, A.RealtimeClient_closure0, A.RealtimeClient__appendParams_closure, A.Highlighter__collateLines_closure0, A.SupabaseClient__listenForAuthEvents_closure0]);
    _inherit(A.CastList, A._CastListBase);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A.AssertionError, A._Error, A.JsonUnsupportedObjectError, A.NullThrownError, A.ArgumentError, A.NoSuchMethodError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError, A.CyclicInitializationError]);
    _inherit(A.ListBase, A._ListBase_Object_ListMixin);
    _inheritMany(A.ListBase, [A.UnmodifiableListBase, A.TypedDataBuffer]);
    _inherit(A.CodeUnits, A.UnmodifiableListBase);
    _inheritMany(A.Closure0Args, [A.nullFuture_closure, A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._TimerImpl$periodic_closure, A._asyncStarHelper_closure, A._AsyncStarStreamController__resumeBody, A._AsyncStarStreamController__resumeBody_closure, A._AsyncStarStreamController_closure0, A._AsyncStarStreamController_closure1, A._AsyncStarStreamController_closure, A._AsyncStarStreamController__closure, A.Future_Future_closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__asyncCompleteWithValue_closure, A._Future__chainFuture_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A.Stream_length_closure0, A.Stream_first_closure, A._StreamController__subscribe_closure, A._StreamController__recordCancel_complete, A._AddStreamState_cancel_closure, A._BufferingStreamSubscription__sendError_sendError, A._BufferingStreamSubscription__sendDone_sendDone, A._PendingEvents_schedule_closure, A._MultiStream_listen_closure, A._cancelAndValue_closure, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure, A.Utf8Decoder__decoder_closure, A.Utf8Decoder__decoderNonfatal_closure, A.HttpClientRequest$__closure, A.MediaType_MediaType$parse_closure, A.RealtimeClient_closure1, A.RealtimeClient_connect_closure0, A.RealtimeClient_push_callback, A.RealtimeClient__throttle_closure, A.RealtimeClient__throttle__closure, A.RetryTimer_scheduleTimeout_closure, A.BehaviorSubject__deferStream_closure, A.StartWithStreamTransformer_bind_closure, A.StartWithErrorStreamTransformer_bind_closure, A._forwardMulti__closure, A._forward_closure, A._forward_closure0, A._forward__listenToUpstream_closure, A._forward__listenToUpstream_closure0, A._forward_closure1, A.Highlighter_closure, A.Highlighter__writeFileStart_closure, A.Highlighter__writeMultilineHighlights_closure, A.Highlighter__writeMultilineHighlights_closure0, A.Highlighter__writeMultilineHighlights_closure1, A.Highlighter__writeMultilineHighlights_closure2, A.Highlighter__writeMultilineHighlights__closure, A.Highlighter__writeMultilineHighlights__closure0, A.Highlighter__writeHighlightedText_closure, A.Highlighter__writeIndicator_closure, A.Highlighter__writeIndicator_closure0, A.Highlighter__writeIndicator_closure1, A.Highlighter__writeSidebar_closure, A._Highlight_closure, A.SupabaseFunctions__closure]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeyIterable, A._HashMapKeyIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A.ReversedListIterable, A._JsonMapKeyIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inheritMany(A.Iterator, [A.MappedIterator, A.WhereIterator, A.SkipIterator]);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inherit(A.ConstantStringMap, A.ConstantMap);
    _inherit(A.Instantiation1, A.Instantiation);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inherit(A.MapBase, A.MapMixin);
    _inheritMany(A.MapBase, [A.JsLinkedHashMap, A._HashMap, A._JsonMap]);
    _inheritMany(A.IterableBase, [A._AllMatchesIterable, A._SyncStarIterable]);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inherit(A._ControllerStream, A._StreamImpl);
    _inherit(A._BroadcastStream, A._ControllerStream);
    _inherit(A._ControllerSubscription, A._BufferingStreamSubscription);
    _inherit(A._BroadcastSubscription, A._ControllerSubscription);
    _inheritMany(A._BroadcastStreamController, [A._SyncBroadcastStreamController, A._AsyncBroadcastStreamController]);
    _inherit(A._AsyncCompleter, A._Completer);
    _inheritMany(A._StreamController, [A._AsyncStreamController, A._SyncStreamController]);
    _inherit(A._StreamControllerAddStreamState, A._AddStreamState);
    _inheritMany(A._DelayedEvent, [A._DelayedData, A._DelayedError]);
    _inherit(A._MultiStreamController, A._AsyncStreamController);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._IdentityHashMap, A._HashMap);
    _inheritMany(A.JsLinkedHashMap, [A._LinkedIdentityHashMap, A._LinkedCustomHashMap]);
    _inherit(A._SetBase, A.__SetBase_Object_SetMixin);
    _inheritMany(A._SetBase, [A._LinkedHashSet, A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin]);
    _inherit(A._UnmodifiableSet, A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin);
    _inheritMany(A.Codec, [A.Encoding, A.Base64Codec, A.JsonCodec]);
    _inheritMany(A.Encoding, [A.AsciiCodec, A.Latin1Codec, A.Utf8Codec]);
    _inheritMany(A.StreamTransformerBase, [A.Converter, A.StartWithStreamTransformer, A.StartWithErrorStreamTransformer]);
    _inheritMany(A.Converter, [A._UnicodeSubsetEncoder, A._UnicodeSubsetDecoder, A.Base64Encoder, A.JsonEncoder, A.JsonDecoder, A.Utf8Encoder, A.Utf8Decoder, A.Hash, A.Hmac]);
    _inheritMany(A._UnicodeSubsetEncoder, [A.AsciiEncoder, A.Latin1Encoder]);
    _inheritMany(A._UnicodeSubsetDecoder, [A.AsciiDecoder, A.Latin1Decoder]);
    _inherit(A.ByteConversionSink, A.ChunkedConversionSink);
    _inheritMany(A.ByteConversionSink, [A.ByteConversionSinkBase, A._HmacSink]);
    _inheritMany(A.ByteConversionSinkBase, [A._ByteAdapterSink, A._ByteCallbackSink]);
    _inherit(A.JsonCyclicError, A.JsonUnsupportedObjectError);
    _inherit(A._JsonStringStringifier, A._JsonStringifier);
    _inherit(A.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin, A._Utf8Encoder);
    _inherit(A._Utf8EncoderSink, A.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._DataUri, A._Uri);
    _inheritMany(A.JsObject, [A.JsFunction, A._JsArray_JsObject_ListMixin]);
    _inherit(A.JsArray, A._JsArray_JsObject_ListMixin);
    _inherit(A.DigestSink, A.Sink);
    _inherit(A._Sha1, A.Hash);
    _inherit(A._Sha1Sink, A.HashSink);
    _inheritMany(A.StreamView, [A.ByteStream, A.Subject]);
    _inheritMany(A.BaseRequest, [A.Request0, A.StreamedRequest]);
    _inheritMany(A.BaseResponse, [A.Response0, A.StreamedResponse]);
    _inherit(A.CaseInsensitiveMap, A.CanonicalizedMap);
    _inheritMany(A.JsIterable, [A.XRAnchorSet, A.FontFaceVariations, A.FontFacePalette, A.FontFacePalettes, A.Highlight, A.StylePropertyMapReadOnly, A.CSSNumericArray, A.CustomStateSet, A.NodeList, A.DOMTokenList, A.MediaKeyStatusMap, A.Headers1, A.RdfDataset, A.RdfGraph, A.ReadableStream0, A.URLSearchParams, A.GPUSupportedFeatures, A.XRInputSourceArray, A.XRHand, A.FormData]);
    _inheritMany(A.JsMap, [A.CSSFontFeatureValuesMap, A.HighlightRegistry, A.NamedFlowMap, A.EventCounts, A.InteractionCounts, A.KeyboardLayoutMap, A.BluetoothManufacturerDataMap, A.BluetoothServiceDataMap, A.AudioParamMap, A.MIDIInputMap, A.MIDIOutputMap, A.RTCStatsReport]);
    _inherit(A.InternalStyle, A.Style);
    _inheritMany(A.InternalStyle, [A.PosixStyle, A.UrlStyle, A.WindowsStyle]);
    _inheritMany(A.PostgrestBuilder, [A.PostgrestTransformBuilder, A.PostgrestQueryBuilder]);
    _inherit(A.PostgrestFilterBuilder, A.PostgrestTransformBuilder);
    _inheritMany(A._Enum, [A.SocketStates, A.ChannelEvents]);
    _inherit(A.BehaviorSubject, A.Subject);
    _inheritMany(A.ForwardingSink, [A._StartWithStreamSink, A._StartWithErrorStreamSink]);
    _inherit(A.FileLocation, A.SourceLocationMixin);
    _inheritMany(A.SourceSpanMixin, [A._FileSpan, A.SourceSpanBase]);
    _inherit(A.SourceSpanFormatException, A.SourceSpanException);
    _inherit(A.SourceSpanWithContext, A.SourceSpanBase);
    _inherit(A.SupabaseStorageClient, A.StorageBucketApi);
    _inherit(A.StringScannerException, A.SourceSpanFormatException);
    _inherit(A.SupabaseQueryBuilder, A.PostgrestQueryBuilder);
    _inherit(A._IntBuffer, A.TypedDataBuffer);
    _inherit(A.Uint8Buffer, A._IntBuffer);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A.__CastListBase__CastIterableBase_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._AsyncStreamController, A._AsyncStreamControllerDispatch);
    _mixin(A._SyncStreamController, A._SyncStreamControllerDispatch);
    _mixin(A._ListBase_Object_ListMixin, A.ListMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A.__SetBase_Object_SetMixin, A.SetMixin);
    _mixin(A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin, A._UnmodifiableSetMixin);
    _mixin(A.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin, A.StringConversionSinkMixin);
    _mixinHard(A._JsArray_JsObject_ListMixin, A.ListMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    types: ["~()", "Null()", "~(@)", "~(Object,StackTrace)", "~(Object?)", "String(String)", "@(@)", "Future<Response0>(Uri{body:Object?,encoding:Encoding?,headers:Map<String,String>?})", "~(String,String)", "~(String,@)", "Null(@)", "bool(_Highlight)", "~(~())", "int(Object?)", "bool(@)", "Set<0^>()<Object?>", "~(Object?,Object?)", "@()", "~(Uint8List,String,int)", "Object?(Object?)", "Future<Response0>(Uri{headers:Map<String,String>?})", "bool()", "~(String,Set<String>)", "String(Match)", "bool(String)", "String(@)", "~([~])", "int()", "int(@,@)", "bool(Object?,Object?)", "~(int,int,int)", "_Future<@>?()", "@(Object?)", "JsFunction(@)", "JsArray<@>(@)", "JsObject(@)", "~(Object[StackTrace?])", "Null(~())", "Null(Object,StackTrace)", "~(String,List<String>)", "List<String>(@)", "_Future<@>(@)", "@(@,String)", "@(String)", "@(QueueMedia)", "~(@,@)", "bool(String,String)", "int(String)", "~(List<int>)", "MediaType()", "Future<Null>()", "Null(@,StackTrace)", "String(String?)", "Future<0&>(Object)", "0&(@)", "~(Symbol0,@)", "~(@,@(String))", "~(String,@(@))", "~(String)", "WebSocketChannel(String,Map<String,String>)", "~(RealtimeChannel)", "~(Timer)", "int(int)", "Map<String,String>(Map<String,String>,String)", "String?()", "int(_Line)", "~(String,int)", "Object(_Line)", "Object(_Highlight)", "int(_Highlight,_Highlight)", "List<_Line>(MapEntry<Object,List<_Highlight>>)", "~(String,int?)", "SourceSpanWithContext()", "~(AuthState)", "Null(@,@)", "Future<Response>(Request)", "QueueTweetModelEdge(@)", "Promise<1&>(JavaScriptObject)", "Future<JavaScriptObject>()", "int(int,int)", "~(String,String?)", "~(int,@)", "Uint8List(@,@)", "List<String>()", "List<String>(String,List<String>)", "Object?(@)", "0^(@)<Object?>", "QueueMedia(@)", "0^(0^,0^)<num>", "bool(RealtimeChannel)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti")
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JavaScriptFunction":"LegacyJavaScriptObject","Env":"LegacyJavaScriptObject","DirEntry":"LegacyJavaScriptObject","ReadFileOptions":"LegacyJavaScriptObject","Headers0":"LegacyJavaScriptObject","Symbol1":"LegacyJavaScriptObject","Iterator0":"LegacyJavaScriptObject","AsyncIterator":"LegacyJavaScriptObject","IteratorResult":"LegacyJavaScriptObject","Promise":"LegacyJavaScriptObject","ReadableStream":"LegacyJavaScriptObject","ReadableStreamDefaultReader":"LegacyJavaScriptObject","JavaScriptObject0":"LegacyJavaScriptObject","Accelerometer":"LegacyJavaScriptObject","AccelerometerSensorOptions":"LegacyJavaScriptObject","LinearAccelerationSensor":"LegacyJavaScriptObject","GravitySensor":"LegacyJavaScriptObject","AccelerometerReadingValues":"LegacyJavaScriptObject","LinearAccelerationReadingValues":"LegacyJavaScriptObject","GravityReadingValues":"LegacyJavaScriptObject","AmbientLightSensor":"LegacyJavaScriptObject","AmbientLightReadingValues":"LegacyJavaScriptObject","XRAnchor":"LegacyJavaScriptObject","XRAnchorSet":"LegacyJavaScriptObject","ANGLEInstancedArrays":"LegacyJavaScriptObject","HTMLAttributionSrcElementUtils":"LegacyJavaScriptObject","AudioOutputOptions":"LegacyJavaScriptObject","BackgroundFetchManager":"LegacyJavaScriptObject","BackgroundFetchUIOptions":"LegacyJavaScriptObject","BackgroundFetchOptions":"LegacyJavaScriptObject","BackgroundFetchRegistration":"LegacyJavaScriptObject","BackgroundFetchRecord":"LegacyJavaScriptObject","BackgroundFetchEvent":"LegacyJavaScriptObject","BackgroundFetchEventInit":"LegacyJavaScriptObject","BackgroundFetchUpdateUIEvent":"LegacyJavaScriptObject","SyncManager":"LegacyJavaScriptObject","SyncEvent":"LegacyJavaScriptObject","SyncEventInit":"LegacyJavaScriptObject","NavigatorBadge":"LegacyJavaScriptObject","BatteryManager":"LegacyJavaScriptObject","CaptureHandleConfig":"LegacyJavaScriptObject","CaptureHandle":"LegacyJavaScriptObject","ClipboardEventInit":"LegacyJavaScriptObject","ClipboardEvent":"LegacyJavaScriptObject","ClipboardItem":"LegacyJavaScriptObject","ClipboardItemOptions":"LegacyJavaScriptObject","Clipboard":"LegacyJavaScriptObject","ClipboardPermissionDescriptor":"LegacyJavaScriptObject","CloseWatcher":"LegacyJavaScriptObject","CloseWatcherOptions":"LegacyJavaScriptObject","CompressionStream":"LegacyJavaScriptObject","DecompressionStream":"LegacyJavaScriptObject","PressureObserver":"LegacyJavaScriptObject","PressureRecord":"LegacyJavaScriptObject","PressureObserverOptions":"LegacyJavaScriptObject","Console":"LegacyJavaScriptObject","ContactAddress":"LegacyJavaScriptObject","ContactInfo":"LegacyJavaScriptObject","ContactsSelectOptions":"LegacyJavaScriptObject","ContactsManager":"LegacyJavaScriptObject","ContentDescription":"LegacyJavaScriptObject","ContentIndex":"LegacyJavaScriptObject","ContentIndexEventInit":"LegacyJavaScriptObject","ContentIndexEvent":"LegacyJavaScriptObject","CookieStore":"LegacyJavaScriptObject","CookieStoreGetOptions":"LegacyJavaScriptObject","CookieInit":"LegacyJavaScriptObject","CookieStoreDeleteOptions":"LegacyJavaScriptObject","CookieListItem":"LegacyJavaScriptObject","CookieStoreManager":"LegacyJavaScriptObject","CookieChangeEvent":"LegacyJavaScriptObject","CookieChangeEventInit":"LegacyJavaScriptObject","ExtendableCookieChangeEvent":"LegacyJavaScriptObject","ExtendableCookieChangeEventInit":"LegacyJavaScriptObject","CrashReportBody":"LegacyJavaScriptObject","Credential":"LegacyJavaScriptObject","CredentialUserData":"LegacyJavaScriptObject","CredentialsContainer":"LegacyJavaScriptObject","CredentialData":"LegacyJavaScriptObject","CredentialRequestOptions":"LegacyJavaScriptObject","CredentialCreationOptions":"LegacyJavaScriptObject","PasswordCredential":"LegacyJavaScriptObject","PasswordCredentialData":"LegacyJavaScriptObject","FederatedCredential":"LegacyJavaScriptObject","FederatedCredentialRequestOptions":"LegacyJavaScriptObject","FederatedCredentialInit":"LegacyJavaScriptObject","CSPViolationReportBody":"LegacyJavaScriptObject","SecurityPolicyViolationEvent":"LegacyJavaScriptObject","SecurityPolicyViolationEventInit":"LegacyJavaScriptObject","ScriptingPolicyReportBody":"LegacyJavaScriptObject","AnimationWorkletGlobalScope":"LegacyJavaScriptObject","WorkletAnimationEffect":"LegacyJavaScriptObject","WorkletAnimation":"LegacyJavaScriptObject","WorkletGroupEffect":"LegacyJavaScriptObject","AnimationEvent":"LegacyJavaScriptObject","AnimationEventInit":"LegacyJavaScriptObject","CSSKeyframeRule":"LegacyJavaScriptObject","CSSKeyframesRule":"LegacyJavaScriptObject","CSSAnimation":"LegacyJavaScriptObject","CSSLayerBlockRule":"LegacyJavaScriptObject","CSSLayerStatementRule":"LegacyJavaScriptObject","CSSConditionRule":"LegacyJavaScriptObject","CSSMediaRule":"LegacyJavaScriptObject","CSSSupportsRule":"LegacyJavaScriptObject","ContentVisibilityAutoStateChangedEvent":"LegacyJavaScriptObject","ContentVisibilityAutoStateChangedEventInit":"LegacyJavaScriptObject","CSSContainerRule":"LegacyJavaScriptObject","CSSCounterStyleRule":"LegacyJavaScriptObject","CSSViewportRule":"LegacyJavaScriptObject","FontFaceDescriptors":"LegacyJavaScriptObject","FontFace":"LegacyJavaScriptObject","FontFaceFeatures":"LegacyJavaScriptObject","FontFaceVariationAxis":"LegacyJavaScriptObject","FontFaceVariations":"LegacyJavaScriptObject","FontFacePalette":"LegacyJavaScriptObject","FontFacePalettes":"LegacyJavaScriptObject","FontFaceSetLoadEventInit":"LegacyJavaScriptObject","FontFaceSetLoadEvent":"LegacyJavaScriptObject","FontFaceSet":"LegacyJavaScriptObject","FontFaceSource":"LegacyJavaScriptObject","CSSFontFaceRule":"LegacyJavaScriptObject","CSSFontFeatureValuesRule":"LegacyJavaScriptObject","CSSFontFeatureValuesMap":"LegacyJavaScriptObject","CSSFontPaletteValuesRule":"LegacyJavaScriptObject","Highlight":"LegacyJavaScriptObject","HighlightRegistry":"LegacyJavaScriptObject","LayoutWorkletGlobalScope":"LegacyJavaScriptObject","LayoutOptions":"LegacyJavaScriptObject","LayoutChild":"LegacyJavaScriptObject","LayoutFragment":"LegacyJavaScriptObject","IntrinsicSizes":"LegacyJavaScriptObject","LayoutConstraints":"LegacyJavaScriptObject","LayoutConstraintsOptions":"LegacyJavaScriptObject","ChildBreakToken":"LegacyJavaScriptObject","BreakToken":"LegacyJavaScriptObject","BreakTokenOptions":"LegacyJavaScriptObject","LayoutEdges":"LegacyJavaScriptObject","FragmentResultOptions":"LegacyJavaScriptObject","FragmentResult":"LegacyJavaScriptObject","IntrinsicSizesResultOptions":"LegacyJavaScriptObject","SVGClipPathElement":"LegacyJavaScriptObject","SVGMaskElement":"LegacyJavaScriptObject","FocusableAreasOption":"LegacyJavaScriptObject","SpatialNavigationSearchOptions":"LegacyJavaScriptObject","NavigationEvent":"LegacyJavaScriptObject","NavigationEventInit":"LegacyJavaScriptObject","CSSNestingRule":"LegacyJavaScriptObject","PaintWorkletGlobalScope":"LegacyJavaScriptObject","PaintRenderingContext2DSettings":"LegacyJavaScriptObject","PaintRenderingContext2D":"LegacyJavaScriptObject","PaintSize":"LegacyJavaScriptObject","CSSParserOptions":"LegacyJavaScriptObject","CSSParserRule":"LegacyJavaScriptObject","CSSParserAtRule":"LegacyJavaScriptObject","CSSParserQualifiedRule":"LegacyJavaScriptObject","CSSParserDeclaration":"LegacyJavaScriptObject","CSSParserValue":"LegacyJavaScriptObject","CSSParserBlock":"LegacyJavaScriptObject","CSSParserFunction":"LegacyJavaScriptObject","PropertyDefinition":"LegacyJavaScriptObject","CSSPropertyRule":"LegacyJavaScriptObject","CSSPseudoElement":"LegacyJavaScriptObject","NamedFlowMap":"LegacyJavaScriptObject","NamedFlow":"LegacyJavaScriptObject","Region":"LegacyJavaScriptObject","TransitionEvent":"LegacyJavaScriptObject","TransitionEventInit":"LegacyJavaScriptObject","CSSTransition":"LegacyJavaScriptObject","CSSStyleValue":"LegacyJavaScriptObject","StylePropertyMapReadOnly":"LegacyJavaScriptObject","StylePropertyMap":"LegacyJavaScriptObject","CSSUnparsedValue":"LegacyJavaScriptObject","CSSVariableReferenceValue":"LegacyJavaScriptObject","CSSKeywordValue":"LegacyJavaScriptObject","CSSNumericType":"LegacyJavaScriptObject","CSSNumericValue":"LegacyJavaScriptObject","CSSUnitValue":"LegacyJavaScriptObject","CSSMathValue":"LegacyJavaScriptObject","CSSMathSum":"LegacyJavaScriptObject","CSSMathProduct":"LegacyJavaScriptObject","CSSMathNegate":"LegacyJavaScriptObject","CSSMathInvert":"LegacyJavaScriptObject","CSSMathMin":"LegacyJavaScriptObject","CSSMathMax":"LegacyJavaScriptObject","CSSMathClamp":"LegacyJavaScriptObject","CSSNumericArray":"LegacyJavaScriptObject","CSSTransformValue":"LegacyJavaScriptObject","CSSTransformComponent":"LegacyJavaScriptObject","CSSTranslate":"LegacyJavaScriptObject","CSSRotate":"LegacyJavaScriptObject","CSSScale":"LegacyJavaScriptObject","CSSSkew":"LegacyJavaScriptObject","CSSSkewX":"LegacyJavaScriptObject","CSSSkewY":"LegacyJavaScriptObject","CSSPerspective":"LegacyJavaScriptObject","CSSMatrixComponent":"LegacyJavaScriptObject","CSSMatrixComponentOptions":"LegacyJavaScriptObject","CSSImageValue":"LegacyJavaScriptObject","CSSColorValue":"LegacyJavaScriptObject","Cssrgb":"LegacyJavaScriptObject","Csshsl":"LegacyJavaScriptObject","Csshwb":"LegacyJavaScriptObject","CSSLab":"LegacyJavaScriptObject","Csslch":"LegacyJavaScriptObject","CSSOKLab":"LegacyJavaScriptObject","Cssoklch":"LegacyJavaScriptObject","CSSColor":"LegacyJavaScriptObject","MediaList":"LegacyJavaScriptObject","StyleSheet":"LegacyJavaScriptObject","CSSStyleSheet":"LegacyJavaScriptObject","CSSStyleSheetInit":"LegacyJavaScriptObject","StyleSheetList":"LegacyJavaScriptObject","LinkStyle":"LegacyJavaScriptObject","CSSRuleList":"LegacyJavaScriptObject","CSSRule":"LegacyJavaScriptObject","CSSStyleRule":"LegacyJavaScriptObject","CSSImportRule":"LegacyJavaScriptObject","CSSGroupingRule":"LegacyJavaScriptObject","CSSPageRule":"LegacyJavaScriptObject","CSSMarginRule":"LegacyJavaScriptObject","CSSNamespaceRule":"LegacyJavaScriptObject","CSSStyleDeclaration":"LegacyJavaScriptObject","ElementCSSInlineStyle":"LegacyJavaScriptObject","Css":"LegacyJavaScriptObject","ScrollOptions":"LegacyJavaScriptObject","ScrollToOptions":"LegacyJavaScriptObject","MediaQueryList":"LegacyJavaScriptObject","MediaQueryListEvent":"LegacyJavaScriptObject","MediaQueryListEventInit":"LegacyJavaScriptObject","Screen":"LegacyJavaScriptObject","CaretPosition":"LegacyJavaScriptObject","ScrollIntoViewOptions":"LegacyJavaScriptObject","CheckVisibilityOptions":"LegacyJavaScriptObject","BoxQuadOptions":"LegacyJavaScriptObject","ConvertCoordinateOptions":"LegacyJavaScriptObject","GeometryUtils":"LegacyJavaScriptObject","VisualViewport":"LegacyJavaScriptObject","CustomStateSet":"LegacyJavaScriptObject","DataCue":"LegacyJavaScriptObject","DeprecationReportBody":"LegacyJavaScriptObject","NavigatorDeviceMemory":"LegacyJavaScriptObject","DevicePosture":"LegacyJavaScriptObject","DigitalGoodsService":"LegacyJavaScriptObject","ItemDetails":"LegacyJavaScriptObject","PurchaseDetails":"LegacyJavaScriptObject","Event":"LegacyJavaScriptObject","EventInit":"LegacyJavaScriptObject","CustomEvent":"LegacyJavaScriptObject","CustomEventInit":"LegacyJavaScriptObject","EventTarget":"LegacyJavaScriptObject","EventListenerOptions":"LegacyJavaScriptObject","AddEventListenerOptions":"LegacyJavaScriptObject","AbortController0":"LegacyJavaScriptObject","AbortSignal0":"LegacyJavaScriptObject","NonElementParentNode":"LegacyJavaScriptObject","DocumentOrShadowRoot":"LegacyJavaScriptObject","ParentNode":"LegacyJavaScriptObject","NonDocumentTypeChildNode":"LegacyJavaScriptObject","ChildNode":"LegacyJavaScriptObject","Slottable":"LegacyJavaScriptObject","NodeList":"LegacyJavaScriptObject","HTMLCollection":"LegacyJavaScriptObject","MutationObserver":"LegacyJavaScriptObject","MutationObserverInit":"LegacyJavaScriptObject","MutationRecord":"LegacyJavaScriptObject","Node":"LegacyJavaScriptObject","GetRootNodeOptions":"LegacyJavaScriptObject","Document":"LegacyJavaScriptObject","XMLDocument":"LegacyJavaScriptObject","ElementCreationOptions":"LegacyJavaScriptObject","DOMImplementation":"LegacyJavaScriptObject","DocumentType":"LegacyJavaScriptObject","DocumentFragment":"LegacyJavaScriptObject","ShadowRoot":"LegacyJavaScriptObject","Element":"LegacyJavaScriptObject","ShadowRootInit":"LegacyJavaScriptObject","NamedNodeMap":"LegacyJavaScriptObject","Attr":"LegacyJavaScriptObject","CharacterData":"LegacyJavaScriptObject","Text":"LegacyJavaScriptObject","CDATASection":"LegacyJavaScriptObject","ProcessingInstruction":"LegacyJavaScriptObject","Comment":"LegacyJavaScriptObject","AbstractRange":"LegacyJavaScriptObject","StaticRangeInit":"LegacyJavaScriptObject","StaticRange":"LegacyJavaScriptObject","Range":"LegacyJavaScriptObject","NodeIterator":"LegacyJavaScriptObject","TreeWalker":"LegacyJavaScriptObject","NodeFilter":"LegacyJavaScriptObject","DOMTokenList":"LegacyJavaScriptObject","XPathResult":"LegacyJavaScriptObject","XPathExpression":"LegacyJavaScriptObject","XPathNSResolver":"LegacyJavaScriptObject","XPathEvaluatorBase":"LegacyJavaScriptObject","XPathEvaluator":"LegacyJavaScriptObject","XSLTProcessor":"LegacyJavaScriptObject","XMLSerializer":"LegacyJavaScriptObject","InnerHTML":"LegacyJavaScriptObject","EditContextInit":"LegacyJavaScriptObject","EditContext":"LegacyJavaScriptObject","TextUpdateEventInit":"LegacyJavaScriptObject","TextUpdateEvent":"LegacyJavaScriptObject","TextFormatInit":"LegacyJavaScriptObject","TextFormat":"LegacyJavaScriptObject","TextFormatUpdateEventInit":"LegacyJavaScriptObject","TextFormatUpdateEvent":"LegacyJavaScriptObject","CharacterBoundsUpdateEventInit":"LegacyJavaScriptObject","CharacterBoundsUpdateEvent":"LegacyJavaScriptObject","PerformanceElementTiming":"LegacyJavaScriptObject","TextDecoderCommon":"LegacyJavaScriptObject","TextDecoderOptions":"LegacyJavaScriptObject","TextDecodeOptions":"LegacyJavaScriptObject","TextDecoder":"LegacyJavaScriptObject","TextEncoderCommon":"LegacyJavaScriptObject","TextEncoderEncodeIntoResult":"LegacyJavaScriptObject","TextEncoder":"LegacyJavaScriptObject","TextDecoderStream":"LegacyJavaScriptObject","TextEncoderStream":"LegacyJavaScriptObject","MediaKeySystemConfiguration":"LegacyJavaScriptObject","MediaKeySystemMediaCapability":"LegacyJavaScriptObject","MediaKeySystemAccess":"LegacyJavaScriptObject","MediaKeys":"LegacyJavaScriptObject","MediaKeySession":"LegacyJavaScriptObject","MediaKeyStatusMap":"LegacyJavaScriptObject","MediaKeyMessageEvent":"LegacyJavaScriptObject","MediaKeyMessageEventInit":"LegacyJavaScriptObject","MediaEncryptedEvent":"LegacyJavaScriptObject","MediaEncryptedEventInit":"LegacyJavaScriptObject","FileSystemEntry":"LegacyJavaScriptObject","FileSystemDirectoryEntry":"LegacyJavaScriptObject","FileSystemFlags":"LegacyJavaScriptObject","FileSystemDirectoryReader":"LegacyJavaScriptObject","FileSystemFileEntry":"LegacyJavaScriptObject","FileSystem":"LegacyJavaScriptObject","EpubReadingSystem":"LegacyJavaScriptObject","PerformanceEventTiming":"LegacyJavaScriptObject","EventCounts":"LegacyJavaScriptObject","InteractionCounts":"LegacyJavaScriptObject","EXTBlendMinmax":"LegacyJavaScriptObject","EXTClipCullDistance":"LegacyJavaScriptObject","EXTColorBufferFloat":"LegacyJavaScriptObject","EXTColorBufferHalfFloat":"LegacyJavaScriptObject","WebGLTimerQueryEXT":"LegacyJavaScriptObject","EXTDisjointTimerQuery":"LegacyJavaScriptObject","EXTDisjointTimerQueryWebgl2":"LegacyJavaScriptObject","EXTFloatBlend":"LegacyJavaScriptObject","EXTFragDepth":"LegacyJavaScriptObject","EXTShaderTextureLod":"LegacyJavaScriptObject","EXTSRGB":"LegacyJavaScriptObject","EXTTextureCompressionBptc":"LegacyJavaScriptObject","EXTTextureCompressionRgtc":"LegacyJavaScriptObject","EXTTextureFilterAnisotropic":"LegacyJavaScriptObject","EXTTextureNorm16":"LegacyJavaScriptObject","ColorSelectionResult":"LegacyJavaScriptObject","ColorSelectionOptions":"LegacyJavaScriptObject","EyeDropper":"LegacyJavaScriptObject","IdentityCredential":"LegacyJavaScriptObject","IdentityCredentialRequestOptions":"LegacyJavaScriptObject","IdentityProvider":"LegacyJavaScriptObject","IdentityCredentialLogoutRPsRequest":"LegacyJavaScriptObject","Headers1":"LegacyJavaScriptObject","Body":"LegacyJavaScriptObject","Request1":"LegacyJavaScriptObject","RequestInit":"LegacyJavaScriptObject","Response1":"LegacyJavaScriptObject","ResponseInit":"LegacyJavaScriptObject","FileSystemPermissionDescriptor":"LegacyJavaScriptObject","FileSystemHandlePermissionDescriptor":"LegacyJavaScriptObject","FilePickerAcceptType":"LegacyJavaScriptObject","FilePickerOptions":"LegacyJavaScriptObject","OpenFilePickerOptions":"LegacyJavaScriptObject","SaveFilePickerOptions":"LegacyJavaScriptObject","DirectoryPickerOptions":"LegacyJavaScriptObject","Blob":"LegacyJavaScriptObject","BlobPropertyBag":"LegacyJavaScriptObject","File":"LegacyJavaScriptObject","FilePropertyBag":"LegacyJavaScriptObject","FileList":"LegacyJavaScriptObject","FileReader":"LegacyJavaScriptObject","FileReaderSync":"LegacyJavaScriptObject","SVGFilterElement":"LegacyJavaScriptObject","SVGFilterPrimitiveStandardAttributes":"LegacyJavaScriptObject","SVGFEBlendElement":"LegacyJavaScriptObject","SVGFEColorMatrixElement":"LegacyJavaScriptObject","SVGFEComponentTransferElement":"LegacyJavaScriptObject","SVGComponentTransferFunctionElement":"LegacyJavaScriptObject","SVGFEFuncRElement":"LegacyJavaScriptObject","SVGFEFuncGElement":"LegacyJavaScriptObject","SVGFEFuncBElement":"LegacyJavaScriptObject","SVGFEFuncAElement":"LegacyJavaScriptObject","SVGFECompositeElement":"LegacyJavaScriptObject","SVGFEConvolveMatrixElement":"LegacyJavaScriptObject","SVGFEDiffuseLightingElement":"LegacyJavaScriptObject","SVGFEDistantLightElement":"LegacyJavaScriptObject","SVGFEPointLightElement":"LegacyJavaScriptObject","SVGFESpotLightElement":"LegacyJavaScriptObject","SVGFEDisplacementMapElement":"LegacyJavaScriptObject","SVGFEDropShadowElement":"LegacyJavaScriptObject","SVGFEFloodElement":"LegacyJavaScriptObject","SVGFEGaussianBlurElement":"LegacyJavaScriptObject","SVGFEImageElement":"LegacyJavaScriptObject","SVGFEMergeElement":"LegacyJavaScriptObject","SVGFEMergeNodeElement":"LegacyJavaScriptObject","SVGFEMorphologyElement":"LegacyJavaScriptObject","SVGFEOffsetElement":"LegacyJavaScriptObject","SVGFESpecularLightingElement":"LegacyJavaScriptObject","SVGFETileElement":"LegacyJavaScriptObject","SVGFETurbulenceElement":"LegacyJavaScriptObject","FontMetrics":"LegacyJavaScriptObject","Baseline":"LegacyJavaScriptObject","Font":"LegacyJavaScriptObject","FileSystemHandle":"LegacyJavaScriptObject","FileSystemCreateWritableOptions":"LegacyJavaScriptObject","FileSystemFileHandle":"LegacyJavaScriptObject","FileSystemGetFileOptions":"LegacyJavaScriptObject","FileSystemGetDirectoryOptions":"LegacyJavaScriptObject","FileSystemRemoveOptions":"LegacyJavaScriptObject","FileSystemDirectoryHandle":"LegacyJavaScriptObject","WriteParams":"LegacyJavaScriptObject","FileSystemWritableFileStream":"LegacyJavaScriptObject","FullscreenOptions":"LegacyJavaScriptObject","Gamepad":"LegacyJavaScriptObject","GamepadButton":"LegacyJavaScriptObject","GamepadEvent":"LegacyJavaScriptObject","GamepadEventInit":"LegacyJavaScriptObject","GamepadHapticActuator":"LegacyJavaScriptObject","GamepadPose":"LegacyJavaScriptObject","GamepadTouch":"LegacyJavaScriptObject","Sensor":"LegacyJavaScriptObject","SensorOptions":"LegacyJavaScriptObject","SensorErrorEvent":"LegacyJavaScriptObject","SensorErrorEventInit":"LegacyJavaScriptObject","MockSensorConfiguration":"LegacyJavaScriptObject","MockSensor":"LegacyJavaScriptObject","MockSensorReadingValues":"LegacyJavaScriptObject","Geolocation":"LegacyJavaScriptObject","PositionOptions":"LegacyJavaScriptObject","GeolocationPosition":"LegacyJavaScriptObject","GeolocationCoordinates":"LegacyJavaScriptObject","GeolocationPositionError":"LegacyJavaScriptObject","GeolocationSensor":"LegacyJavaScriptObject","GeolocationSensorOptions":"LegacyJavaScriptObject","ReadOptions":"LegacyJavaScriptObject","GeolocationSensorReading":"LegacyJavaScriptObject","GeolocationReadingValues":"LegacyJavaScriptObject","DOMPointReadOnly":"LegacyJavaScriptObject","DOMPoint":"LegacyJavaScriptObject","DOMPointInit":"LegacyJavaScriptObject","DOMRectReadOnly":"LegacyJavaScriptObject","DOMRect":"LegacyJavaScriptObject","DOMRectInit":"LegacyJavaScriptObject","DOMRectList":"LegacyJavaScriptObject","DOMQuad":"LegacyJavaScriptObject","DOMQuadInit":"LegacyJavaScriptObject","DOMMatrixReadOnly":"LegacyJavaScriptObject","DOMMatrix":"LegacyJavaScriptObject","DOMMatrix2DInit":"LegacyJavaScriptObject","DOMMatrixInit":"LegacyJavaScriptObject","RelatedApplication":"LegacyJavaScriptObject","Gyroscope":"LegacyJavaScriptObject","GyroscopeSensorOptions":"LegacyJavaScriptObject","GyroscopeReadingValues":"LegacyJavaScriptObject","Performance":"LegacyJavaScriptObject","HTMLAllCollection":"LegacyJavaScriptObject","HTMLFormControlsCollection":"LegacyJavaScriptObject","RadioNodeList":"LegacyJavaScriptObject","HTMLOptionsCollection":"LegacyJavaScriptObject","DOMStringList":"LegacyJavaScriptObject","HTMLElement":"LegacyJavaScriptObject","HTMLUnknownElement":"LegacyJavaScriptObject","HTMLOrSVGElement":"LegacyJavaScriptObject","DOMStringMap":"LegacyJavaScriptObject","HTMLHtmlElement":"LegacyJavaScriptObject","HTMLHeadElement":"LegacyJavaScriptObject","HTMLTitleElement":"LegacyJavaScriptObject","HTMLBaseElement":"LegacyJavaScriptObject","HTMLLinkElement":"LegacyJavaScriptObject","HTMLMetaElement":"LegacyJavaScriptObject","HTMLStyleElement":"LegacyJavaScriptObject","HTMLBodyElement":"LegacyJavaScriptObject","HTMLHeadingElement":"LegacyJavaScriptObject","HTMLParagraphElement":"LegacyJavaScriptObject","HTMLHRElement":"LegacyJavaScriptObject","HTMLPreElement":"LegacyJavaScriptObject","HTMLQuoteElement":"LegacyJavaScriptObject","HTMLOListElement":"LegacyJavaScriptObject","HTMLUListElement":"LegacyJavaScriptObject","HTMLMenuElement":"LegacyJavaScriptObject","HTMLLIElement":"LegacyJavaScriptObject","HTMLDListElement":"LegacyJavaScriptObject","HTMLDivElement":"LegacyJavaScriptObject","HTMLAnchorElement":"LegacyJavaScriptObject","HTMLDataElement":"LegacyJavaScriptObject","HTMLTimeElement":"LegacyJavaScriptObject","HTMLSpanElement":"LegacyJavaScriptObject","HTMLBRElement":"LegacyJavaScriptObject","HTMLHyperlinkElementUtils":"LegacyJavaScriptObject","HTMLModElement":"LegacyJavaScriptObject","HTMLPictureElement":"LegacyJavaScriptObject","HTMLSourceElement":"LegacyJavaScriptObject","HTMLImageElement":"LegacyJavaScriptObject","HTMLIFrameElement":"LegacyJavaScriptObject","HTMLEmbedElement":"LegacyJavaScriptObject","HTMLObjectElement":"LegacyJavaScriptObject","HTMLVideoElement":"LegacyJavaScriptObject","HTMLAudioElement":"LegacyJavaScriptObject","HTMLTrackElement":"LegacyJavaScriptObject","HTMLMediaElement":"LegacyJavaScriptObject","MediaError":"LegacyJavaScriptObject","AudioTrackList":"LegacyJavaScriptObject","AudioTrack":"LegacyJavaScriptObject","VideoTrackList":"LegacyJavaScriptObject","VideoTrack":"LegacyJavaScriptObject","TextTrackList":"LegacyJavaScriptObject","TextTrack":"LegacyJavaScriptObject","TextTrackCueList":"LegacyJavaScriptObject","TextTrackCue":"LegacyJavaScriptObject","TimeRanges":"LegacyJavaScriptObject","TrackEvent":"LegacyJavaScriptObject","TrackEventInit":"LegacyJavaScriptObject","HTMLMapElement":"LegacyJavaScriptObject","HTMLAreaElement":"LegacyJavaScriptObject","HTMLTableElement":"LegacyJavaScriptObject","HTMLTableCaptionElement":"LegacyJavaScriptObject","HTMLTableColElement":"LegacyJavaScriptObject","HTMLTableSectionElement":"LegacyJavaScriptObject","HTMLTableRowElement":"LegacyJavaScriptObject","HTMLTableCellElement":"LegacyJavaScriptObject","HTMLFormElement":"LegacyJavaScriptObject","HTMLLabelElement":"LegacyJavaScriptObject","HTMLInputElement":"LegacyJavaScriptObject","HTMLButtonElement":"LegacyJavaScriptObject","HTMLSelectElement":"LegacyJavaScriptObject","HTMLDataListElement":"LegacyJavaScriptObject","HTMLOptGroupElement":"LegacyJavaScriptObject","HTMLOptionElement":"LegacyJavaScriptObject","HTMLTextAreaElement":"LegacyJavaScriptObject","HTMLOutputElement":"LegacyJavaScriptObject","HTMLProgressElement":"LegacyJavaScriptObject","HTMLMeterElement":"LegacyJavaScriptObject","HTMLFieldSetElement":"LegacyJavaScriptObject","HTMLLegendElement":"LegacyJavaScriptObject","ValidityState":"LegacyJavaScriptObject","SubmitEvent":"LegacyJavaScriptObject","SubmitEventInit":"LegacyJavaScriptObject","FormDataEvent":"LegacyJavaScriptObject","FormDataEventInit":"LegacyJavaScriptObject","HTMLDetailsElement":"LegacyJavaScriptObject","HTMLDialogElement":"LegacyJavaScriptObject","HTMLScriptElement":"LegacyJavaScriptObject","HTMLTemplateElement":"LegacyJavaScriptObject","HTMLSlotElement":"LegacyJavaScriptObject","AssignedNodesOptions":"LegacyJavaScriptObject","HTMLCanvasElement":"LegacyJavaScriptObject","CanvasRenderingContext2DSettings":"LegacyJavaScriptObject","CanvasRenderingContext2D":"LegacyJavaScriptObject","CanvasState":"LegacyJavaScriptObject","CanvasTransform":"LegacyJavaScriptObject","CanvasCompositing":"LegacyJavaScriptObject","CanvasImageSmoothing":"LegacyJavaScriptObject","CanvasFillStrokeStyles":"LegacyJavaScriptObject","CanvasShadowStyles":"LegacyJavaScriptObject","CanvasFilters":"LegacyJavaScriptObject","CanvasRect":"LegacyJavaScriptObject","CanvasDrawPath":"LegacyJavaScriptObject","CanvasUserInterface":"LegacyJavaScriptObject","CanvasText":"LegacyJavaScriptObject","CanvasDrawImage":"LegacyJavaScriptObject","CanvasImageData":"LegacyJavaScriptObject","CanvasPathDrawingStyles":"LegacyJavaScriptObject","CanvasTextDrawingStyles":"LegacyJavaScriptObject","CanvasPath":"LegacyJavaScriptObject","CanvasGradient":"LegacyJavaScriptObject","CanvasPattern":"LegacyJavaScriptObject","TextMetrics":"LegacyJavaScriptObject","ImageDataSettings":"LegacyJavaScriptObject","ImageData":"LegacyJavaScriptObject","Path2D":"LegacyJavaScriptObject","ImageBitmapRenderingContext":"LegacyJavaScriptObject","ImageBitmapRenderingContextSettings":"LegacyJavaScriptObject","ImageEncodeOptions":"LegacyJavaScriptObject","OffscreenCanvas":"LegacyJavaScriptObject","OffscreenCanvasRenderingContext2D":"LegacyJavaScriptObject","CustomElementRegistry":"LegacyJavaScriptObject","ElementDefinitionOptions":"LegacyJavaScriptObject","ElementInternals":"LegacyJavaScriptObject","ValidityStateFlags":"LegacyJavaScriptObject","FocusOptions":"LegacyJavaScriptObject","ElementContentEditable":"LegacyJavaScriptObject","DataTransfer":"LegacyJavaScriptObject","DataTransferItemList":"LegacyJavaScriptObject","DataTransferItem":"LegacyJavaScriptObject","DragEvent":"LegacyJavaScriptObject","DragEventInit":"LegacyJavaScriptObject","Window":"LegacyJavaScriptObject","WindowPostMessageOptions":"LegacyJavaScriptObject","BarProp":"LegacyJavaScriptObject","History":"LegacyJavaScriptObject","Location":"LegacyJavaScriptObject","PopStateEvent":"LegacyJavaScriptObject","PopStateEventInit":"LegacyJavaScriptObject","HashChangeEvent":"LegacyJavaScriptObject","HashChangeEventInit":"LegacyJavaScriptObject","PageTransitionEvent":"LegacyJavaScriptObject","PageTransitionEventInit":"LegacyJavaScriptObject","BeforeUnloadEvent":"LegacyJavaScriptObject","ErrorEvent":"LegacyJavaScriptObject","ErrorEventInit":"LegacyJavaScriptObject","PromiseRejectionEvent":"LegacyJavaScriptObject","PromiseRejectionEventInit":"LegacyJavaScriptObject","GlobalEventHandlers":"LegacyJavaScriptObject","WindowEventHandlers":"LegacyJavaScriptObject","DocumentAndElementEventHandlers":"LegacyJavaScriptObject","WindowOrWorkerGlobalScope":"LegacyJavaScriptObject","DOMParser":"LegacyJavaScriptObject","Navigator":"LegacyJavaScriptObject","NavigatorID":"LegacyJavaScriptObject","NavigatorLanguage":"LegacyJavaScriptObject","NavigatorOnLine":"LegacyJavaScriptObject","NavigatorContentUtils":"LegacyJavaScriptObject","NavigatorCookies":"LegacyJavaScriptObject","NavigatorPlugins":"LegacyJavaScriptObject","PluginArray":"LegacyJavaScriptObject","MimeTypeArray":"LegacyJavaScriptObject","Plugin":"LegacyJavaScriptObject","MimeType":"LegacyJavaScriptObject","ImageBitmap":"LegacyJavaScriptObject","ImageBitmapOptions":"LegacyJavaScriptObject","AnimationFrameProvider":"LegacyJavaScriptObject","MessageEvent":"LegacyJavaScriptObject","MessageEventInit":"LegacyJavaScriptObject","EventSource":"LegacyJavaScriptObject","EventSourceInit":"LegacyJavaScriptObject","MessageChannel":"LegacyJavaScriptObject","MessagePort":"LegacyJavaScriptObject","StructuredSerializeOptions":"LegacyJavaScriptObject","BroadcastChannel":"LegacyJavaScriptObject","WorkerGlobalScope":"LegacyJavaScriptObject","DedicatedWorkerGlobalScope":"LegacyJavaScriptObject","SharedWorkerGlobalScope":"LegacyJavaScriptObject","AbstractWorker":"LegacyJavaScriptObject","Worker":"LegacyJavaScriptObject","WorkerOptions":"LegacyJavaScriptObject","SharedWorker":"LegacyJavaScriptObject","NavigatorConcurrentHardware":"LegacyJavaScriptObject","WorkerNavigator":"LegacyJavaScriptObject","WorkerLocation":"LegacyJavaScriptObject","WorkletGlobalScope":"LegacyJavaScriptObject","Worklet":"LegacyJavaScriptObject","WorkletOptions":"LegacyJavaScriptObject","Storage":"LegacyJavaScriptObject","WindowSessionStorage":"LegacyJavaScriptObject","WindowLocalStorage":"LegacyJavaScriptObject","StorageEvent":"LegacyJavaScriptObject","StorageEventInit":"LegacyJavaScriptObject","HTMLMarqueeElement":"LegacyJavaScriptObject","HTMLFrameSetElement":"LegacyJavaScriptObject","HTMLFrameElement":"LegacyJavaScriptObject","HTMLDirectoryElement":"LegacyJavaScriptObject","HTMLFontElement":"LegacyJavaScriptObject","HTMLParamElement":"LegacyJavaScriptObject","External":"LegacyJavaScriptObject","IdleOptions":"LegacyJavaScriptObject","IdleDetector":"LegacyJavaScriptObject","ImageCapture":"LegacyJavaScriptObject","PhotoCapabilities":"LegacyJavaScriptObject","PhotoSettings":"LegacyJavaScriptObject","MediaSettingsRange":"LegacyJavaScriptObject","ConstrainPoint2DParameters":"LegacyJavaScriptObject","Point2D":"LegacyJavaScriptObject","ImageResource":"LegacyJavaScriptObject","IDBRequest":"LegacyJavaScriptObject","IDBOpenDBRequest":"LegacyJavaScriptObject","IDBVersionChangeEvent":"LegacyJavaScriptObject","IDBVersionChangeEventInit":"LegacyJavaScriptObject","IDBFactory":"LegacyJavaScriptObject","IDBDatabaseInfo":"LegacyJavaScriptObject","IDBDatabase":"LegacyJavaScriptObject","IDBTransactionOptions":"LegacyJavaScriptObject","IDBObjectStoreParameters":"LegacyJavaScriptObject","IDBObjectStore":"LegacyJavaScriptObject","IDBIndexParameters":"LegacyJavaScriptObject","IDBIndex":"LegacyJavaScriptObject","IDBKeyRange":"LegacyJavaScriptObject","IDBCursor":"LegacyJavaScriptObject","IDBCursorWithValue":"LegacyJavaScriptObject","IDBTransaction":"LegacyJavaScriptObject","Ink":"LegacyJavaScriptObject","InkPresenterParam":"LegacyJavaScriptObject","InkPresenter":"LegacyJavaScriptObject","InkTrailStyle":"LegacyJavaScriptObject","InputDeviceCapabilities":"LegacyJavaScriptObject","InputDeviceCapabilitiesInit":"LegacyJavaScriptObject","IntersectionObserver":"LegacyJavaScriptObject","IntersectionObserverEntry":"LegacyJavaScriptObject","IntersectionObserverEntryInit":"LegacyJavaScriptObject","IntersectionObserverInit":"LegacyJavaScriptObject","InterventionReportBody":"LegacyJavaScriptObject","IsInputPendingOptions":"LegacyJavaScriptObject","Scheduling":"LegacyJavaScriptObject","Profiler":"LegacyJavaScriptObject","ProfilerTrace":"LegacyJavaScriptObject","ProfilerSample":"LegacyJavaScriptObject","ProfilerStack":"LegacyJavaScriptObject","ProfilerFrame":"LegacyJavaScriptObject","ProfilerInitOptions":"LegacyJavaScriptObject","JsonLd":"LegacyJavaScriptObject","JsonLdProcessor":"LegacyJavaScriptObject","RdfDataset":"LegacyJavaScriptObject","RdfGraph":"LegacyJavaScriptObject","RdfTriple":"LegacyJavaScriptObject","RdfLiteral":"LegacyJavaScriptObject","JsonLdOptions":"LegacyJavaScriptObject","LoadDocumentOptions":"LegacyJavaScriptObject","RemoteDocument":"LegacyJavaScriptObject","JsonLdError":"LegacyJavaScriptObject","JsonLdFramingError":"LegacyJavaScriptObject","Keyboard":"LegacyJavaScriptObject","KeyboardLayoutMap":"LegacyJavaScriptObject","KHRParallelShaderCompile":"LegacyJavaScriptObject","LargestContentfulPaint":"LegacyJavaScriptObject","LayoutShift":"LegacyJavaScriptObject","LayoutShiftAttribution":"LegacyJavaScriptObject","QueryOptions":"LegacyJavaScriptObject","FontData":"LegacyJavaScriptObject","PerformanceLongTaskTiming":"LegacyJavaScriptObject","TaskAttributionTiming":"LegacyJavaScriptObject","Magnetometer":"LegacyJavaScriptObject","MagnetometerSensorOptions":"LegacyJavaScriptObject","UncalibratedMagnetometer":"LegacyJavaScriptObject","MagnetometerReadingValues":"LegacyJavaScriptObject","UncalibratedMagnetometerReadingValues":"LegacyJavaScriptObject","BeforeInstallPromptEvent":"LegacyJavaScriptObject","PromptResponseObject":"LegacyJavaScriptObject","LaunchParams":"LegacyJavaScriptObject","LaunchQueue":"LegacyJavaScriptObject","MathMLElement":"LegacyJavaScriptObject","MediaConfiguration":"LegacyJavaScriptObject","MediaDecodingConfiguration":"LegacyJavaScriptObject","MediaEncodingConfiguration":"LegacyJavaScriptObject","VideoConfiguration":"LegacyJavaScriptObject","AudioConfiguration":"LegacyJavaScriptObject","MediaCapabilitiesKeySystemConfiguration":"LegacyJavaScriptObject","KeySystemTrackConfiguration":"LegacyJavaScriptObject","MediaCapabilitiesInfo":"LegacyJavaScriptObject","MediaCapabilitiesDecodingInfo":"LegacyJavaScriptObject","MediaCapabilitiesEncodingInfo":"LegacyJavaScriptObject","MediaCapabilities":"LegacyJavaScriptObject","VideoPlaybackQuality":"LegacyJavaScriptObject","MediaSource":"LegacyJavaScriptObject","MediaSourceHandle":"LegacyJavaScriptObject","SourceBuffer":"LegacyJavaScriptObject","SourceBufferList":"LegacyJavaScriptObject","MockCapturePromptResultConfiguration":"LegacyJavaScriptObject","MockCaptureDeviceConfiguration":"LegacyJavaScriptObject","MockCameraConfiguration":"LegacyJavaScriptObject","MockMicrophoneConfiguration":"LegacyJavaScriptObject","CanvasCaptureMediaStreamTrack":"LegacyJavaScriptObject","CaptureActionEvent":"LegacyJavaScriptObject","CaptureActionEventInit":"LegacyJavaScriptObject","CropTarget":"LegacyJavaScriptObject","BrowserCaptureMediaStreamTrack":"LegacyJavaScriptObject","MediaStream":"LegacyJavaScriptObject","MediaStreamTrack":"LegacyJavaScriptObject","MediaTrackSupportedConstraints":"LegacyJavaScriptObject","MediaTrackCapabilities":"LegacyJavaScriptObject","MediaTrackConstraints":"LegacyJavaScriptObject","MediaTrackConstraintSet":"LegacyJavaScriptObject","MediaTrackSettings":"LegacyJavaScriptObject","MediaStreamTrackEvent":"LegacyJavaScriptObject","MediaStreamTrackEventInit":"LegacyJavaScriptObject","OverconstrainedError":"LegacyJavaScriptObject","MediaDevices":"LegacyJavaScriptObject","MediaDeviceInfo":"LegacyJavaScriptObject","InputDeviceInfo":"LegacyJavaScriptObject","MediaStreamConstraints":"LegacyJavaScriptObject","DoubleRange":"LegacyJavaScriptObject","ConstrainDoubleRange":"LegacyJavaScriptObject","ULongRange":"LegacyJavaScriptObject","ConstrainULongRange":"LegacyJavaScriptObject","ConstrainBooleanParameters":"LegacyJavaScriptObject","ConstrainDOMStringParameters":"LegacyJavaScriptObject","DevicePermissionDescriptor":"LegacyJavaScriptObject","CameraDevicePermissionDescriptor":"LegacyJavaScriptObject","MediaStreamTrackProcessor":"LegacyJavaScriptObject","MediaStreamTrackProcessorInit":"LegacyJavaScriptObject","VideoTrackGenerator":"LegacyJavaScriptObject","ViewportMediaStreamConstraints":"LegacyJavaScriptObject","MediaSession":"LegacyJavaScriptObject","MediaMetadata":"LegacyJavaScriptObject","MediaMetadataInit":"LegacyJavaScriptObject","MediaImage":"LegacyJavaScriptObject","MediaPositionState":"LegacyJavaScriptObject","MediaSessionActionDetails":"LegacyJavaScriptObject","MediaRecorder":"LegacyJavaScriptObject","MediaRecorderOptions":"LegacyJavaScriptObject","BlobEvent":"LegacyJavaScriptObject","BlobEventInit":"LegacyJavaScriptObject","Navigation":"LegacyJavaScriptObject","NavigationUpdateCurrentEntryOptions":"LegacyJavaScriptObject","NavigationOptions":"LegacyJavaScriptObject","NavigationNavigateOptions":"LegacyJavaScriptObject","NavigationReloadOptions":"LegacyJavaScriptObject","NavigationResult":"LegacyJavaScriptObject","NavigationCurrentEntryChangeEvent":"LegacyJavaScriptObject","NavigationCurrentEntryChangeEventInit":"LegacyJavaScriptObject","NavigationTransition":"LegacyJavaScriptObject","NavigateEvent":"LegacyJavaScriptObject","NavigateEventInit":"LegacyJavaScriptObject","NavigationInterceptOptions":"LegacyJavaScriptObject","NavigationDestination":"LegacyJavaScriptObject","NavigationHistoryEntry":"LegacyJavaScriptObject","PerformanceNavigationTiming":"LegacyJavaScriptObject","PerformanceTiming":"LegacyJavaScriptObject","PerformanceNavigation":"LegacyJavaScriptObject","NavigatorNetworkInformation":"LegacyJavaScriptObject","NetworkInformation":"LegacyJavaScriptObject","Notification":"LegacyJavaScriptObject","NotificationOptions":"LegacyJavaScriptObject","NotificationAction":"LegacyJavaScriptObject","GetNotificationOptions":"LegacyJavaScriptObject","NotificationEvent":"LegacyJavaScriptObject","NotificationEventInit":"LegacyJavaScriptObject","OESDrawBuffersIndexed":"LegacyJavaScriptObject","OESElementIndexUint":"LegacyJavaScriptObject","OESFboRenderMipmap":"LegacyJavaScriptObject","OESStandardDerivatives":"LegacyJavaScriptObject","OESTextureFloat":"LegacyJavaScriptObject","OESTextureFloatLinear":"LegacyJavaScriptObject","OESTextureHalfFloat":"LegacyJavaScriptObject","OESTextureHalfFloatLinear":"LegacyJavaScriptObject","WebGLVertexArrayObjectOES":"LegacyJavaScriptObject","OESVertexArrayObject":"LegacyJavaScriptObject","DeviceOrientationEvent":"LegacyJavaScriptObject","DeviceOrientationEventInit":"LegacyJavaScriptObject","DeviceMotionEventAcceleration":"LegacyJavaScriptObject","DeviceMotionEventRotationRate":"LegacyJavaScriptObject","DeviceMotionEvent":"LegacyJavaScriptObject","DeviceMotionEventAccelerationInit":"LegacyJavaScriptObject","DeviceMotionEventRotationRateInit":"LegacyJavaScriptObject","DeviceMotionEventInit":"LegacyJavaScriptObject","OrientationSensor":"LegacyJavaScriptObject","OrientationSensorOptions":"LegacyJavaScriptObject","AbsoluteOrientationSensor":"LegacyJavaScriptObject","RelativeOrientationSensor":"LegacyJavaScriptObject","AbsoluteOrientationReadingValues":"LegacyJavaScriptObject","RelativeOrientationReadingValues":"LegacyJavaScriptObject","OVRMultiview2":"LegacyJavaScriptObject","PerformancePaintTiming":"LegacyJavaScriptObject","PaymentManager":"LegacyJavaScriptObject","PaymentInstruments":"LegacyJavaScriptObject","PaymentInstrument":"LegacyJavaScriptObject","ImageObject":"LegacyJavaScriptObject","CanMakePaymentEvent":"LegacyJavaScriptObject","CanMakePaymentEventInit":"LegacyJavaScriptObject","PaymentRequestDetailsUpdate":"LegacyJavaScriptObject","PaymentRequestEvent":"LegacyJavaScriptObject","PaymentRequestEventInit":"LegacyJavaScriptObject","PaymentHandlerResponse":"LegacyJavaScriptObject","PaymentRequest":"LegacyJavaScriptObject","PaymentMethodData":"LegacyJavaScriptObject","PaymentCurrencyAmount":"LegacyJavaScriptObject","PaymentDetailsBase":"LegacyJavaScriptObject","PaymentDetailsInit":"LegacyJavaScriptObject","PaymentDetailsUpdate":"LegacyJavaScriptObject","PaymentDetailsModifier":"LegacyJavaScriptObject","PaymentItem":"LegacyJavaScriptObject","PaymentCompleteDetails":"LegacyJavaScriptObject","PaymentResponse":"LegacyJavaScriptObject","PaymentValidationErrors":"LegacyJavaScriptObject","PaymentMethodChangeEvent":"LegacyJavaScriptObject","PaymentMethodChangeEventInit":"LegacyJavaScriptObject","PaymentRequestUpdateEvent":"LegacyJavaScriptObject","PaymentRequestUpdateEventInit":"LegacyJavaScriptObject","MemoryMeasurement":"LegacyJavaScriptObject","MemoryBreakdownEntry":"LegacyJavaScriptObject","MemoryAttribution":"LegacyJavaScriptObject","MemoryAttributionContainer":"LegacyJavaScriptObject","PerformanceEntry":"LegacyJavaScriptObject","PerformanceObserver":"LegacyJavaScriptObject","PerformanceObserverCallbackOptions":"LegacyJavaScriptObject","PerformanceObserverInit":"LegacyJavaScriptObject","PerformanceObserverEntryList":"LegacyJavaScriptObject","PeriodicSyncManager":"LegacyJavaScriptObject","BackgroundSyncOptions":"LegacyJavaScriptObject","PeriodicSyncEventInit":"LegacyJavaScriptObject","PeriodicSyncEvent":"LegacyJavaScriptObject","Permissions":"LegacyJavaScriptObject","PermissionDescriptor":"LegacyJavaScriptObject","PermissionStatus":"LegacyJavaScriptObject","PermissionSetParameters":"LegacyJavaScriptObject","PermissionsPolicy":"LegacyJavaScriptObject","PermissionsPolicyViolationReportBody":"LegacyJavaScriptObject","PictureInPictureWindow":"LegacyJavaScriptObject","PictureInPictureEvent":"LegacyJavaScriptObject","PictureInPictureEventInit":"LegacyJavaScriptObject","PointerEventInit":"LegacyJavaScriptObject","PointerEvent":"LegacyJavaScriptObject","HTMLPortalElement":"LegacyJavaScriptObject","PortalActivateOptions":"LegacyJavaScriptObject","PortalHost":"LegacyJavaScriptObject","PortalActivateEvent":"LegacyJavaScriptObject","PortalActivateEventInit":"LegacyJavaScriptObject","Presentation":"LegacyJavaScriptObject","PresentationRequest":"LegacyJavaScriptObject","PresentationAvailability":"LegacyJavaScriptObject","PresentationConnectionAvailableEvent":"LegacyJavaScriptObject","PresentationConnectionAvailableEventInit":"LegacyJavaScriptObject","PresentationConnection":"LegacyJavaScriptObject","PresentationConnectionCloseEvent":"LegacyJavaScriptObject","PresentationConnectionCloseEventInit":"LegacyJavaScriptObject","PresentationReceiver":"LegacyJavaScriptObject","PresentationConnectionList":"LegacyJavaScriptObject","ProximitySensor":"LegacyJavaScriptObject","ProximityReadingValues":"LegacyJavaScriptObject","PushPermissionDescriptor":"LegacyJavaScriptObject","PushManager":"LegacyJavaScriptObject","PushSubscriptionOptions":"LegacyJavaScriptObject","PushSubscriptionOptionsInit":"LegacyJavaScriptObject","PushSubscription":"LegacyJavaScriptObject","PushSubscriptionJSON":"LegacyJavaScriptObject","PushMessageData":"LegacyJavaScriptObject","PushEvent":"LegacyJavaScriptObject","PushEventInit":"LegacyJavaScriptObject","PushSubscriptionChangeEvent":"LegacyJavaScriptObject","PushSubscriptionChangeEventInit":"LegacyJavaScriptObject","RemotePlayback":"LegacyJavaScriptObject","ReportBody":"LegacyJavaScriptObject","Report":"LegacyJavaScriptObject","ReportingObserver":"LegacyJavaScriptObject","ReportingObserverOptions":"LegacyJavaScriptObject","GenerateTestReportParameters":"LegacyJavaScriptObject","IdleRequestOptions":"LegacyJavaScriptObject","IdleDeadline":"LegacyJavaScriptObject","ResizeObserverOptions":"LegacyJavaScriptObject","ResizeObserver":"LegacyJavaScriptObject","ResizeObserverEntry":"LegacyJavaScriptObject","ResizeObserverSize":"LegacyJavaScriptObject","PerformanceResourceTiming":"LegacyJavaScriptObject","Sanitizer":"LegacyJavaScriptObject","SetHTMLOptions":"LegacyJavaScriptObject","SanitizerConfig":"LegacyJavaScriptObject","NetworkInformationSaveData":"LegacyJavaScriptObject","SchedulerPostTaskOptions":"LegacyJavaScriptObject","Scheduler":"LegacyJavaScriptObject","TaskPriorityChangeEvent":"LegacyJavaScriptObject","TaskPriorityChangeEventInit":"LegacyJavaScriptObject","TaskControllerInit":"LegacyJavaScriptObject","TaskController":"LegacyJavaScriptObject","TaskSignal":"LegacyJavaScriptObject","DisplayMediaStreamOptions":"LegacyJavaScriptObject","ScreenOrientation":"LegacyJavaScriptObject","WakeLock":"LegacyJavaScriptObject","WakeLockSentinel":"LegacyJavaScriptObject","ScrollTimelineOptions":"LegacyJavaScriptObject","ScrollTimeline":"LegacyJavaScriptObject","ViewTimelineOptions":"LegacyJavaScriptObject","ViewTimeline":"LegacyJavaScriptObject","FragmentDirective":"LegacyJavaScriptObject","SecurePaymentConfirmationRequest":"LegacyJavaScriptObject","AuthenticationExtensionsPaymentInputs":"LegacyJavaScriptObject","CollectedClientPaymentData":"LegacyJavaScriptObject","CollectedClientAdditionalPaymentData":"LegacyJavaScriptObject","PaymentCredentialInstrument":"LegacyJavaScriptObject","Selection":"LegacyJavaScriptObject","Serial":"LegacyJavaScriptObject","SerialPortRequestOptions":"LegacyJavaScriptObject","SerialPortFilter":"LegacyJavaScriptObject","SerialPort":"LegacyJavaScriptObject","SerialPortInfo":"LegacyJavaScriptObject","SerialOptions":"LegacyJavaScriptObject","SerialOutputSignals":"LegacyJavaScriptObject","SerialInputSignals":"LegacyJavaScriptObject","PerformanceServerTiming":"LegacyJavaScriptObject","ServiceWorker":"LegacyJavaScriptObject","ServiceWorkerRegistration":"LegacyJavaScriptObject","ServiceWorkerContainer":"LegacyJavaScriptObject","RegistrationOptions":"LegacyJavaScriptObject","NavigationPreloadManager":"LegacyJavaScriptObject","NavigationPreloadState":"LegacyJavaScriptObject","ServiceWorkerGlobalScope":"LegacyJavaScriptObject","Client0":"LegacyJavaScriptObject","WindowClient":"LegacyJavaScriptObject","Clients":"LegacyJavaScriptObject","ClientQueryOptions":"LegacyJavaScriptObject","ExtendableEvent":"LegacyJavaScriptObject","ExtendableEventInit":"LegacyJavaScriptObject","FetchEvent":"LegacyJavaScriptObject","FetchEventInit":"LegacyJavaScriptObject","ExtendableMessageEvent":"LegacyJavaScriptObject","ExtendableMessageEventInit":"LegacyJavaScriptObject","Cache":"LegacyJavaScriptObject","CacheQueryOptions":"LegacyJavaScriptObject","CacheStorage":"LegacyJavaScriptObject","MultiCacheQueryOptions":"LegacyJavaScriptObject","FaceDetector":"LegacyJavaScriptObject","FaceDetectorOptions":"LegacyJavaScriptObject","DetectedFace":"LegacyJavaScriptObject","Landmark":"LegacyJavaScriptObject","BarcodeDetector":"LegacyJavaScriptObject","BarcodeDetectorOptions":"LegacyJavaScriptObject","DetectedBarcode":"LegacyJavaScriptObject","SpeechRecognition":"LegacyJavaScriptObject","SpeechRecognitionErrorEvent":"LegacyJavaScriptObject","SpeechRecognitionErrorEventInit":"LegacyJavaScriptObject","SpeechRecognitionAlternative":"LegacyJavaScriptObject","SpeechRecognitionResult":"LegacyJavaScriptObject","SpeechRecognitionResultList":"LegacyJavaScriptObject","SpeechRecognitionEvent":"LegacyJavaScriptObject","SpeechRecognitionEventInit":"LegacyJavaScriptObject","SpeechGrammar":"LegacyJavaScriptObject","SpeechGrammarList":"LegacyJavaScriptObject","SpeechSynthesis":"LegacyJavaScriptObject","SpeechSynthesisUtterance":"LegacyJavaScriptObject","SpeechSynthesisEvent":"LegacyJavaScriptObject","SpeechSynthesisEventInit":"LegacyJavaScriptObject","SpeechSynthesisErrorEvent":"LegacyJavaScriptObject","SpeechSynthesisErrorEventInit":"LegacyJavaScriptObject","SpeechSynthesisVoice":"LegacyJavaScriptObject","NavigatorStorage":"LegacyJavaScriptObject","StorageManager":"LegacyJavaScriptObject","StorageEstimate":"LegacyJavaScriptObject","ReadableStream0":"LegacyJavaScriptObject","ReadableStreamGetReaderOptions":"LegacyJavaScriptObject","ReadableStreamIteratorOptions":"LegacyJavaScriptObject","ReadableWritablePair":"LegacyJavaScriptObject","StreamPipeOptions":"LegacyJavaScriptObject","UnderlyingSource":"LegacyJavaScriptObject","ReadableStreamGenericReader":"LegacyJavaScriptObject","ReadableStreamDefaultReader0":"LegacyJavaScriptObject","ReadableStreamReadResult":"LegacyJavaScriptObject","ReadableStreamBYOBReader":"LegacyJavaScriptObject","ReadableStreamDefaultController":"LegacyJavaScriptObject","ReadableByteStreamController":"LegacyJavaScriptObject","ReadableStreamBYOBRequest":"LegacyJavaScriptObject","WritableStream":"LegacyJavaScriptObject","UnderlyingSink":"LegacyJavaScriptObject","WritableStreamDefaultWriter":"LegacyJavaScriptObject","WritableStreamDefaultController":"LegacyJavaScriptObject","TransformStream":"LegacyJavaScriptObject","Transformer":"LegacyJavaScriptObject","TransformStreamDefaultController":"LegacyJavaScriptObject","QueuingStrategy":"LegacyJavaScriptObject","QueuingStrategyInit":"LegacyJavaScriptObject","ByteLengthQueuingStrategy":"LegacyJavaScriptObject","CountQueuingStrategy":"LegacyJavaScriptObject","GenericTransformStream":"LegacyJavaScriptObject","SVGElement":"LegacyJavaScriptObject","SVGBoundingBoxOptions":"LegacyJavaScriptObject","SVGGraphicsElement":"LegacyJavaScriptObject","SVGGeometryElement":"LegacyJavaScriptObject","SVGNumber":"LegacyJavaScriptObject","SVGLength":"LegacyJavaScriptObject","SVGAngle":"LegacyJavaScriptObject","SVGNumberList":"LegacyJavaScriptObject","SVGLengthList":"LegacyJavaScriptObject","SVGStringList":"LegacyJavaScriptObject","SVGAnimatedBoolean":"LegacyJavaScriptObject","SVGAnimatedEnumeration":"LegacyJavaScriptObject","SVGAnimatedInteger":"LegacyJavaScriptObject","SVGAnimatedNumber":"LegacyJavaScriptObject","SVGAnimatedLength":"LegacyJavaScriptObject","SVGAnimatedAngle":"LegacyJavaScriptObject","SVGAnimatedString":"LegacyJavaScriptObject","SVGAnimatedRect":"LegacyJavaScriptObject","SVGAnimatedNumberList":"LegacyJavaScriptObject","SVGAnimatedLengthList":"LegacyJavaScriptObject","SVGUnitTypes":"LegacyJavaScriptObject","SVGTests":"LegacyJavaScriptObject","SVGFitToViewBox":"LegacyJavaScriptObject","SVGURIReference":"LegacyJavaScriptObject","SVGSVGElement":"LegacyJavaScriptObject","SVGGElement":"LegacyJavaScriptObject","SVGDefsElement":"LegacyJavaScriptObject","SVGDescElement":"LegacyJavaScriptObject","SVGMetadataElement":"LegacyJavaScriptObject","SVGTitleElement":"LegacyJavaScriptObject","SVGSymbolElement":"LegacyJavaScriptObject","SVGUseElement":"LegacyJavaScriptObject","SVGUseElementShadowRoot":"LegacyJavaScriptObject","SVGElementInstance":"LegacyJavaScriptObject","ShadowAnimation":"LegacyJavaScriptObject","SVGSwitchElement":"LegacyJavaScriptObject","GetSVGDocument":"LegacyJavaScriptObject","SVGStyleElement":"LegacyJavaScriptObject","SVGTransform":"LegacyJavaScriptObject","SVGTransformList":"LegacyJavaScriptObject","SVGAnimatedTransformList":"LegacyJavaScriptObject","SVGPreserveAspectRatio":"LegacyJavaScriptObject","SVGAnimatedPreserveAspectRatio":"LegacyJavaScriptObject","SVGPathElement":"LegacyJavaScriptObject","SVGRectElement":"LegacyJavaScriptObject","SVGCircleElement":"LegacyJavaScriptObject","SVGEllipseElement":"LegacyJavaScriptObject","SVGLineElement":"LegacyJavaScriptObject","SVGAnimatedPoints":"LegacyJavaScriptObject","SVGPointList":"LegacyJavaScriptObject","SVGPolylineElement":"LegacyJavaScriptObject","SVGPolygonElement":"LegacyJavaScriptObject","SVGTextContentElement":"LegacyJavaScriptObject","SVGTextPositioningElement":"LegacyJavaScriptObject","SVGTextElement":"LegacyJavaScriptObject","SVGTSpanElement":"LegacyJavaScriptObject","SVGTextPathElement":"LegacyJavaScriptObject","SVGImageElement":"LegacyJavaScriptObject","SVGForeignObjectElement":"LegacyJavaScriptObject","SVGMarkerElement":"LegacyJavaScriptObject","SVGGradientElement":"LegacyJavaScriptObject","SVGLinearGradientElement":"LegacyJavaScriptObject","SVGRadialGradientElement":"LegacyJavaScriptObject","SVGStopElement":"LegacyJavaScriptObject","SVGPatternElement":"LegacyJavaScriptObject","SVGScriptElement":"LegacyJavaScriptObject","SVGAElement":"LegacyJavaScriptObject","SVGViewElement":"LegacyJavaScriptObject","TimeEvent":"LegacyJavaScriptObject","SVGAnimationElement":"LegacyJavaScriptObject","SVGAnimateElement":"LegacyJavaScriptObject","SVGSetElement":"LegacyJavaScriptObject","SVGAnimateMotionElement":"LegacyJavaScriptObject","SVGMPathElement":"LegacyJavaScriptObject","SVGAnimateTransformElement":"LegacyJavaScriptObject","SVGDiscardElement":"LegacyJavaScriptObject","TestUtils":"LegacyJavaScriptObject","TextDetector":"LegacyJavaScriptObject","DetectedText":"LegacyJavaScriptObject","TouchInit":"LegacyJavaScriptObject","Touch":"LegacyJavaScriptObject","TouchList":"LegacyJavaScriptObject","TouchEventInit":"LegacyJavaScriptObject","TouchEvent":"LegacyJavaScriptObject","TrustedHTML":"LegacyJavaScriptObject","TrustedScript":"LegacyJavaScriptObject","TrustedScriptURL":"LegacyJavaScriptObject","TrustedTypePolicyFactory":"LegacyJavaScriptObject","TrustedTypePolicy":"LegacyJavaScriptObject","TrustedTypePolicyOptions":"LegacyJavaScriptObject","NavigatorUABrandVersion":"LegacyJavaScriptObject","UADataValues":"LegacyJavaScriptObject","UALowEntropyJSON":"LegacyJavaScriptObject","NavigatorUAData":"LegacyJavaScriptObject","NavigatorUA":"LegacyJavaScriptObject","UIEvent":"LegacyJavaScriptObject","UIEventInit":"LegacyJavaScriptObject","FocusEvent":"LegacyJavaScriptObject","FocusEventInit":"LegacyJavaScriptObject","MouseEvent":"LegacyJavaScriptObject","MouseEventInit":"LegacyJavaScriptObject","EventModifierInit":"LegacyJavaScriptObject","WheelEvent":"LegacyJavaScriptObject","WheelEventInit":"LegacyJavaScriptObject","InputEvent":"LegacyJavaScriptObject","InputEventInit":"LegacyJavaScriptObject","KeyboardEvent":"LegacyJavaScriptObject","KeyboardEventInit":"LegacyJavaScriptObject","CompositionEvent":"LegacyJavaScriptObject","CompositionEventInit":"LegacyJavaScriptObject","MutationEvent":"LegacyJavaScriptObject","Url":"LegacyJavaScriptObject","URLSearchParams":"LegacyJavaScriptObject","URLPattern":"LegacyJavaScriptObject","URLPatternInit":"LegacyJavaScriptObject","URLPatternResult":"LegacyJavaScriptObject","URLPatternComponentResult":"LegacyJavaScriptObject","PerformanceMarkOptions":"LegacyJavaScriptObject","PerformanceMeasureOptions":"LegacyJavaScriptObject","PerformanceMark":"LegacyJavaScriptObject","PerformanceMeasure":"LegacyJavaScriptObject","VideoFrameMetadata":"LegacyJavaScriptObject","VirtualKeyboard":"LegacyJavaScriptObject","ARIAMixin":"LegacyJavaScriptObject","WebAssemblyInstantiatedSource":"LegacyJavaScriptObject","WebAssembly":"LegacyJavaScriptObject","ModuleExportDescriptor":"LegacyJavaScriptObject","ModuleImportDescriptor":"LegacyJavaScriptObject","Module":"LegacyJavaScriptObject","Instance":"LegacyJavaScriptObject","MemoryDescriptor":"LegacyJavaScriptObject","Memory":"LegacyJavaScriptObject","TableDescriptor":"LegacyJavaScriptObject","Table":"LegacyJavaScriptObject","GlobalDescriptor":"LegacyJavaScriptObject","Global":"LegacyJavaScriptObject","AnimationTimeline":"LegacyJavaScriptObject","DocumentTimelineOptions":"LegacyJavaScriptObject","DocumentTimeline":"LegacyJavaScriptObject","Animation":"LegacyJavaScriptObject","AnimationEffect":"LegacyJavaScriptObject","EffectTiming":"LegacyJavaScriptObject","OptionalEffectTiming":"LegacyJavaScriptObject","ComputedEffectTiming":"LegacyJavaScriptObject","KeyframeEffect":"LegacyJavaScriptObject","BaseComputedKeyframe":"LegacyJavaScriptObject","BasePropertyIndexedKeyframe":"LegacyJavaScriptObject","BaseKeyframe":"LegacyJavaScriptObject","KeyframeEffectOptions":"LegacyJavaScriptObject","Animatable":"LegacyJavaScriptObject","KeyframeAnimationOptions":"LegacyJavaScriptObject","GetAnimationsOptions":"LegacyJavaScriptObject","GroupEffect":"LegacyJavaScriptObject","AnimationNodeList":"LegacyJavaScriptObject","SequenceEffect":"LegacyJavaScriptObject","AnimationPlaybackEvent":"LegacyJavaScriptObject","AnimationPlaybackEventInit":"LegacyJavaScriptObject","BluetoothDataFilterInit":"LegacyJavaScriptObject","BluetoothManufacturerDataFilterInit":"LegacyJavaScriptObject","BluetoothServiceDataFilterInit":"LegacyJavaScriptObject","BluetoothLEScanFilterInit":"LegacyJavaScriptObject","RequestDeviceOptions":"LegacyJavaScriptObject","Bluetooth":"LegacyJavaScriptObject","BluetoothPermissionDescriptor":"LegacyJavaScriptObject","AllowedBluetoothDevice":"LegacyJavaScriptObject","BluetoothPermissionStorage":"LegacyJavaScriptObject","BluetoothPermissionResult":"LegacyJavaScriptObject","ValueEvent":"LegacyJavaScriptObject","ValueEventInit":"LegacyJavaScriptObject","BluetoothDevice":"LegacyJavaScriptObject","WatchAdvertisementsOptions":"LegacyJavaScriptObject","BluetoothManufacturerDataMap":"LegacyJavaScriptObject","BluetoothServiceDataMap":"LegacyJavaScriptObject","BluetoothAdvertisingEvent":"LegacyJavaScriptObject","BluetoothAdvertisingEventInit":"LegacyJavaScriptObject","BluetoothRemoteGATTServer":"LegacyJavaScriptObject","BluetoothRemoteGATTService":"LegacyJavaScriptObject","BluetoothRemoteGATTCharacteristic":"LegacyJavaScriptObject","BluetoothCharacteristicProperties":"LegacyJavaScriptObject","BluetoothRemoteGATTDescriptor":"LegacyJavaScriptObject","CharacteristicEventHandlers":"LegacyJavaScriptObject","BluetoothDeviceEventHandlers":"LegacyJavaScriptObject","ServiceEventHandlers":"LegacyJavaScriptObject","BluetoothUUID":"LegacyJavaScriptObject","NavigatorLocks":"LegacyJavaScriptObject","LockManager":"LegacyJavaScriptObject","LockOptions":"LegacyJavaScriptObject","LockManagerSnapshot":"LegacyJavaScriptObject","LockInfo":"LegacyJavaScriptObject","Lock":"LegacyJavaScriptObject","NDEFMessage":"LegacyJavaScriptObject","NDEFMessageInit":"LegacyJavaScriptObject","NDEFRecord":"LegacyJavaScriptObject","NDEFRecordInit":"LegacyJavaScriptObject","NDEFReader":"LegacyJavaScriptObject","NDEFReadingEvent":"LegacyJavaScriptObject","NDEFReadingEventInit":"LegacyJavaScriptObject","NDEFWriteOptions":"LegacyJavaScriptObject","NDEFMakeReadOnlyOptions":"LegacyJavaScriptObject","NDEFScanOptions":"LegacyJavaScriptObject","OTPCredential":"LegacyJavaScriptObject","OTPCredentialRequestOptions":"LegacyJavaScriptObject","ShareData":"LegacyJavaScriptObject","BaseAudioContext":"LegacyJavaScriptObject","AudioContext":"LegacyJavaScriptObject","AudioContextOptions":"LegacyJavaScriptObject","AudioTimestamp":"LegacyJavaScriptObject","AudioRenderCapacity":"LegacyJavaScriptObject","AudioRenderCapacityOptions":"LegacyJavaScriptObject","AudioRenderCapacityEvent":"LegacyJavaScriptObject","AudioRenderCapacityEventInit":"LegacyJavaScriptObject","OfflineAudioContext":"LegacyJavaScriptObject","OfflineAudioContextOptions":"LegacyJavaScriptObject","OfflineAudioCompletionEvent":"LegacyJavaScriptObject","OfflineAudioCompletionEventInit":"LegacyJavaScriptObject","AudioBuffer":"LegacyJavaScriptObject","AudioBufferOptions":"LegacyJavaScriptObject","AudioNode":"LegacyJavaScriptObject","AudioNodeOptions":"LegacyJavaScriptObject","AudioParam":"LegacyJavaScriptObject","AudioScheduledSourceNode":"LegacyJavaScriptObject","AnalyserNode":"LegacyJavaScriptObject","AnalyserOptions":"LegacyJavaScriptObject","AudioBufferSourceNode":"LegacyJavaScriptObject","AudioBufferSourceOptions":"LegacyJavaScriptObject","AudioDestinationNode":"LegacyJavaScriptObject","AudioListener":"LegacyJavaScriptObject","AudioProcessingEvent":"LegacyJavaScriptObject","AudioProcessingEventInit":"LegacyJavaScriptObject","BiquadFilterNode":"LegacyJavaScriptObject","BiquadFilterOptions":"LegacyJavaScriptObject","ChannelMergerNode":"LegacyJavaScriptObject","ChannelMergerOptions":"LegacyJavaScriptObject","ChannelSplitterNode":"LegacyJavaScriptObject","ChannelSplitterOptions":"LegacyJavaScriptObject","ConstantSourceNode":"LegacyJavaScriptObject","ConstantSourceOptions":"LegacyJavaScriptObject","ConvolverNode":"LegacyJavaScriptObject","ConvolverOptions":"LegacyJavaScriptObject","DelayNode":"LegacyJavaScriptObject","DelayOptions":"LegacyJavaScriptObject","DynamicsCompressorNode":"LegacyJavaScriptObject","DynamicsCompressorOptions":"LegacyJavaScriptObject","GainNode":"LegacyJavaScriptObject","GainOptions":"LegacyJavaScriptObject","IIRFilterNode":"LegacyJavaScriptObject","IIRFilterOptions":"LegacyJavaScriptObject","MediaElementAudioSourceNode":"LegacyJavaScriptObject","MediaElementAudioSourceOptions":"LegacyJavaScriptObject","MediaStreamAudioDestinationNode":"LegacyJavaScriptObject","MediaStreamAudioSourceNode":"LegacyJavaScriptObject","MediaStreamAudioSourceOptions":"LegacyJavaScriptObject","MediaStreamTrackAudioSourceNode":"LegacyJavaScriptObject","MediaStreamTrackAudioSourceOptions":"LegacyJavaScriptObject","OscillatorNode":"LegacyJavaScriptObject","OscillatorOptions":"LegacyJavaScriptObject","PannerNode":"LegacyJavaScriptObject","PannerOptions":"LegacyJavaScriptObject","PeriodicWave":"LegacyJavaScriptObject","PeriodicWaveConstraints":"LegacyJavaScriptObject","PeriodicWaveOptions":"LegacyJavaScriptObject","ScriptProcessorNode":"LegacyJavaScriptObject","StereoPannerNode":"LegacyJavaScriptObject","StereoPannerOptions":"LegacyJavaScriptObject","WaveShaperNode":"LegacyJavaScriptObject","WaveShaperOptions":"LegacyJavaScriptObject","AudioWorklet":"LegacyJavaScriptObject","AudioWorkletGlobalScope":"LegacyJavaScriptObject","AudioParamMap":"LegacyJavaScriptObject","AudioWorkletNode":"LegacyJavaScriptObject","AudioWorkletNodeOptions":"LegacyJavaScriptObject","AudioWorkletProcessor":"LegacyJavaScriptObject","AudioParamDescriptor":"LegacyJavaScriptObject","PublicKeyCredential":"LegacyJavaScriptObject","RegistrationResponseJSON":"LegacyJavaScriptObject","AuthenticatorAttestationResponseJSON":"LegacyJavaScriptObject","AuthenticationResponseJSON":"LegacyJavaScriptObject","AuthenticatorAssertionResponseJSON":"LegacyJavaScriptObject","AuthenticationExtensionsClientOutputsJSON":"LegacyJavaScriptObject","PublicKeyCredentialCreationOptionsJSON":"LegacyJavaScriptObject","PublicKeyCredentialUserEntityJSON":"LegacyJavaScriptObject","PublicKeyCredentialDescriptorJSON":"LegacyJavaScriptObject","AuthenticationExtensionsClientInputsJSON":"LegacyJavaScriptObject","PublicKeyCredentialRequestOptionsJSON":"LegacyJavaScriptObject","AuthenticatorResponse":"LegacyJavaScriptObject","AuthenticatorAttestationResponse":"LegacyJavaScriptObject","AuthenticatorAssertionResponse":"LegacyJavaScriptObject","PublicKeyCredentialParameters":"LegacyJavaScriptObject","PublicKeyCredentialCreationOptions":"LegacyJavaScriptObject","PublicKeyCredentialEntity":"LegacyJavaScriptObject","PublicKeyCredentialRpEntity":"LegacyJavaScriptObject","PublicKeyCredentialUserEntity":"LegacyJavaScriptObject","AuthenticatorSelectionCriteria":"LegacyJavaScriptObject","PublicKeyCredentialRequestOptions":"LegacyJavaScriptObject","AuthenticationExtensionsClientInputs":"LegacyJavaScriptObject","AuthenticationExtensionsClientOutputs":"LegacyJavaScriptObject","CollectedClientData":"LegacyJavaScriptObject","TokenBinding":"LegacyJavaScriptObject","PublicKeyCredentialDescriptor":"LegacyJavaScriptObject","CredentialPropertiesOutput":"LegacyJavaScriptObject","AuthenticationExtensionsPRFValues":"LegacyJavaScriptObject","AuthenticationExtensionsPRFInputs":"LegacyJavaScriptObject","AuthenticationExtensionsPRFOutputs":"LegacyJavaScriptObject","AuthenticationExtensionsLargeBlobInputs":"LegacyJavaScriptObject","AuthenticationExtensionsLargeBlobOutputs":"LegacyJavaScriptObject","AudioDecoder":"LegacyJavaScriptObject","AudioDecoderInit":"LegacyJavaScriptObject","VideoDecoder":"LegacyJavaScriptObject","VideoDecoderInit":"LegacyJavaScriptObject","AudioEncoder":"LegacyJavaScriptObject","AudioEncoderInit":"LegacyJavaScriptObject","EncodedAudioChunkMetadata":"LegacyJavaScriptObject","VideoEncoder":"LegacyJavaScriptObject","VideoEncoderInit":"LegacyJavaScriptObject","EncodedVideoChunkMetadata":"LegacyJavaScriptObject","SvcOutputMetadata":"LegacyJavaScriptObject","AudioDecoderSupport":"LegacyJavaScriptObject","VideoDecoderSupport":"LegacyJavaScriptObject","AudioEncoderSupport":"LegacyJavaScriptObject","VideoEncoderSupport":"LegacyJavaScriptObject","AudioDecoderConfig":"LegacyJavaScriptObject","VideoDecoderConfig":"LegacyJavaScriptObject","AudioEncoderConfig":"LegacyJavaScriptObject","VideoEncoderConfig":"LegacyJavaScriptObject","VideoEncoderEncodeOptions":"LegacyJavaScriptObject","EncodedAudioChunk":"LegacyJavaScriptObject","EncodedAudioChunkInit":"LegacyJavaScriptObject","EncodedVideoChunk":"LegacyJavaScriptObject","EncodedVideoChunkInit":"LegacyJavaScriptObject","AudioData":"LegacyJavaScriptObject","AudioDataInit":"LegacyJavaScriptObject","AudioDataCopyToOptions":"LegacyJavaScriptObject","VideoFrame":"LegacyJavaScriptObject","VideoFrameInit":"LegacyJavaScriptObject","VideoFrameBufferInit":"LegacyJavaScriptObject","VideoFrameCopyToOptions":"LegacyJavaScriptObject","PlaneLayout":"LegacyJavaScriptObject","VideoColorSpace":"LegacyJavaScriptObject","VideoColorSpaceInit":"LegacyJavaScriptObject","ImageDecoder":"LegacyJavaScriptObject","ImageDecoderInit":"LegacyJavaScriptObject","ImageDecodeOptions":"LegacyJavaScriptObject","ImageDecodeResult":"LegacyJavaScriptObject","ImageTrackList":"LegacyJavaScriptObject","ImageTrack":"LegacyJavaScriptObject","Ed448Params":"LegacyJavaScriptObject","Crypto":"LegacyJavaScriptObject","Algorithm":"LegacyJavaScriptObject","KeyAlgorithm":"LegacyJavaScriptObject","CryptoKey":"LegacyJavaScriptObject","SubtleCrypto":"LegacyJavaScriptObject","RsaOtherPrimesInfo":"LegacyJavaScriptObject","JsonWebKey":"LegacyJavaScriptObject","CryptoKeyPair":"LegacyJavaScriptObject","RsaKeyGenParams":"LegacyJavaScriptObject","RsaHashedKeyGenParams":"LegacyJavaScriptObject","RsaKeyAlgorithm":"LegacyJavaScriptObject","RsaHashedKeyAlgorithm":"LegacyJavaScriptObject","RsaHashedImportParams":"LegacyJavaScriptObject","RsaPssParams":"LegacyJavaScriptObject","RsaOaepParams":"LegacyJavaScriptObject","EcdsaParams":"LegacyJavaScriptObject","EcKeyGenParams":"LegacyJavaScriptObject","EcKeyAlgorithm":"LegacyJavaScriptObject","EcKeyImportParams":"LegacyJavaScriptObject","EcdhKeyDeriveParams":"LegacyJavaScriptObject","AesCtrParams":"LegacyJavaScriptObject","AesKeyAlgorithm":"LegacyJavaScriptObject","AesKeyGenParams":"LegacyJavaScriptObject","AesDerivedKeyParams":"LegacyJavaScriptObject","AesCbcParams":"LegacyJavaScriptObject","AesGcmParams":"LegacyJavaScriptObject","HmacImportParams":"LegacyJavaScriptObject","HmacKeyAlgorithm":"LegacyJavaScriptObject","HmacKeyGenParams":"LegacyJavaScriptObject","HkdfParams":"LegacyJavaScriptObject","Pbkdf2Params":"LegacyJavaScriptObject","NavigatorAutomationInformation":"LegacyJavaScriptObject","WebGLContextAttributes":"LegacyJavaScriptObject","WebGLObject":"LegacyJavaScriptObject","WebGLBuffer":"LegacyJavaScriptObject","WebGLFramebuffer":"LegacyJavaScriptObject","WebGLProgram":"LegacyJavaScriptObject","WebGLRenderbuffer":"LegacyJavaScriptObject","WebGLShader":"LegacyJavaScriptObject","WebGLTexture":"LegacyJavaScriptObject","WebGLUniformLocation":"LegacyJavaScriptObject","WebGLActiveInfo":"LegacyJavaScriptObject","WebGLShaderPrecisionFormat":"LegacyJavaScriptObject","WebGLRenderingContextBase":"LegacyJavaScriptObject","WebGLRenderingContextOverloads":"LegacyJavaScriptObject","WebGLRenderingContext":"LegacyJavaScriptObject","WebGLContextEvent":"LegacyJavaScriptObject","WebGLContextEventInit":"LegacyJavaScriptObject","WebGLQuery":"LegacyJavaScriptObject","WebGLSampler":"LegacyJavaScriptObject","WebGLSync":"LegacyJavaScriptObject","WebGLTransformFeedback":"LegacyJavaScriptObject","WebGLVertexArrayObject":"LegacyJavaScriptObject","WebGL2RenderingContextBase":"LegacyJavaScriptObject","WebGL2RenderingContextOverloads":"LegacyJavaScriptObject","WebGL2RenderingContext":"LegacyJavaScriptObject","WEBGLBlendEquationAdvancedCoherent":"LegacyJavaScriptObject","WEBGLColorBufferFloat":"LegacyJavaScriptObject","WEBGLCompressedTextureAstc":"LegacyJavaScriptObject","WEBGLCompressedTextureEtc":"LegacyJavaScriptObject","WEBGLCompressedTextureEtc1":"LegacyJavaScriptObject","WEBGLCompressedTexturePvrtc":"LegacyJavaScriptObject","WEBGLCompressedTextureS3tc":"LegacyJavaScriptObject","WEBGLCompressedTextureS3tcSrgb":"LegacyJavaScriptObject","WEBGLDebugRendererInfo":"LegacyJavaScriptObject","WEBGLDebugShaders":"LegacyJavaScriptObject","WEBGLDepthTexture":"LegacyJavaScriptObject","WEBGLDrawBuffers":"LegacyJavaScriptObject","WEBGLDrawInstancedBaseVertexBaseInstance":"LegacyJavaScriptObject","WEBGLLoseContext":"LegacyJavaScriptObject","WEBGLMultiDraw":"LegacyJavaScriptObject","WEBGLMultiDrawInstancedBaseVertexBaseInstance":"LegacyJavaScriptObject","GPUObjectBase":"LegacyJavaScriptObject","GPUObjectDescriptorBase":"LegacyJavaScriptObject","GPUSupportedLimits":"LegacyJavaScriptObject","GPUSupportedFeatures":"LegacyJavaScriptObject","GPUAdapterInfo":"LegacyJavaScriptObject","NavigatorGPU":"LegacyJavaScriptObject","Gpu":"LegacyJavaScriptObject","GPURequestAdapterOptions":"LegacyJavaScriptObject","GPUAdapter":"LegacyJavaScriptObject","GPUDeviceDescriptor":"LegacyJavaScriptObject","GPUDevice":"LegacyJavaScriptObject","GPUBuffer":"LegacyJavaScriptObject","GPUBufferDescriptor":"LegacyJavaScriptObject","GPUBufferUsage":"LegacyJavaScriptObject","GPUMapMode":"LegacyJavaScriptObject","GPUTexture":"LegacyJavaScriptObject","GPUTextureDescriptor":"LegacyJavaScriptObject","GPUTextureUsage":"LegacyJavaScriptObject","GPUTextureView":"LegacyJavaScriptObject","GPUTextureViewDescriptor":"LegacyJavaScriptObject","GPUExternalTexture":"LegacyJavaScriptObject","GPUExternalTextureDescriptor":"LegacyJavaScriptObject","GPUSampler":"LegacyJavaScriptObject","GPUSamplerDescriptor":"LegacyJavaScriptObject","GPUBindGroupLayout":"LegacyJavaScriptObject","GPUBindGroupLayoutDescriptor":"LegacyJavaScriptObject","GPUBindGroupLayoutEntry":"LegacyJavaScriptObject","GPUShaderStage":"LegacyJavaScriptObject","GPUBufferBindingLayout":"LegacyJavaScriptObject","GPUSamplerBindingLayout":"LegacyJavaScriptObject","GPUTextureBindingLayout":"LegacyJavaScriptObject","GPUStorageTextureBindingLayout":"LegacyJavaScriptObject","GPUExternalTextureBindingLayout":"LegacyJavaScriptObject","GPUBindGroup":"LegacyJavaScriptObject","GPUBindGroupDescriptor":"LegacyJavaScriptObject","GPUBindGroupEntry":"LegacyJavaScriptObject","GPUBufferBinding":"LegacyJavaScriptObject","GPUPipelineLayout":"LegacyJavaScriptObject","GPUPipelineLayoutDescriptor":"LegacyJavaScriptObject","GPUShaderModule":"LegacyJavaScriptObject","GPUShaderModuleDescriptor":"LegacyJavaScriptObject","GPUShaderModuleCompilationHint":"LegacyJavaScriptObject","GPUCompilationMessage":"LegacyJavaScriptObject","GPUCompilationInfo":"LegacyJavaScriptObject","GPUPipelineDescriptorBase":"LegacyJavaScriptObject","GPUPipelineBase":"LegacyJavaScriptObject","GPUProgrammableStage":"LegacyJavaScriptObject","GPUComputePipeline":"LegacyJavaScriptObject","GPUComputePipelineDescriptor":"LegacyJavaScriptObject","GPURenderPipeline":"LegacyJavaScriptObject","GPURenderPipelineDescriptor":"LegacyJavaScriptObject","GPUPrimitiveState":"LegacyJavaScriptObject","GPUMultisampleState":"LegacyJavaScriptObject","GPUFragmentState":"LegacyJavaScriptObject","GPUColorTargetState":"LegacyJavaScriptObject","GPUBlendState":"LegacyJavaScriptObject","GPUColorWrite":"LegacyJavaScriptObject","GPUBlendComponent":"LegacyJavaScriptObject","GPUDepthStencilState":"LegacyJavaScriptObject","GPUStencilFaceState":"LegacyJavaScriptObject","GPUVertexState":"LegacyJavaScriptObject","GPUVertexBufferLayout":"LegacyJavaScriptObject","GPUVertexAttribute":"LegacyJavaScriptObject","GPUCommandBuffer":"LegacyJavaScriptObject","GPUCommandBufferDescriptor":"LegacyJavaScriptObject","GPUCommandsMixin":"LegacyJavaScriptObject","GPUCommandEncoder":"LegacyJavaScriptObject","GPUCommandEncoderDescriptor":"LegacyJavaScriptObject","GPUImageDataLayout":"LegacyJavaScriptObject","GPUImageCopyBuffer":"LegacyJavaScriptObject","GPUImageCopyTexture":"LegacyJavaScriptObject","GPUImageCopyTextureTagged":"LegacyJavaScriptObject","GPUImageCopyExternalImage":"LegacyJavaScriptObject","GPUBindingCommandsMixin":"LegacyJavaScriptObject","GPUDebugCommandsMixin":"LegacyJavaScriptObject","GPUComputePassEncoder":"LegacyJavaScriptObject","GPUComputePassTimestampWrite":"LegacyJavaScriptObject","GPUComputePassDescriptor":"LegacyJavaScriptObject","GPURenderPassEncoder":"LegacyJavaScriptObject","GPURenderPassTimestampWrite":"LegacyJavaScriptObject","GPURenderPassDescriptor":"LegacyJavaScriptObject","GPURenderPassColorAttachment":"LegacyJavaScriptObject","GPURenderPassDepthStencilAttachment":"LegacyJavaScriptObject","GPURenderPassLayout":"LegacyJavaScriptObject","GPURenderCommandsMixin":"LegacyJavaScriptObject","GPURenderBundle":"LegacyJavaScriptObject","GPURenderBundleDescriptor":"LegacyJavaScriptObject","GPURenderBundleEncoder":"LegacyJavaScriptObject","GPURenderBundleEncoderDescriptor":"LegacyJavaScriptObject","GPUQueueDescriptor":"LegacyJavaScriptObject","GPUQueue":"LegacyJavaScriptObject","GPUQuerySet":"LegacyJavaScriptObject","GPUQuerySetDescriptor":"LegacyJavaScriptObject","GPUCanvasContext":"LegacyJavaScriptObject","GPUCanvasConfiguration":"LegacyJavaScriptObject","GPUDeviceLostInfo":"LegacyJavaScriptObject","GPUError":"LegacyJavaScriptObject","GPUOutOfMemoryError":"LegacyJavaScriptObject","GPUValidationError":"LegacyJavaScriptObject","GPUUncapturedErrorEvent":"LegacyJavaScriptObject","GPUUncapturedErrorEventInit":"LegacyJavaScriptObject","GPUColorDict":"LegacyJavaScriptObject","GPUOrigin2DDict":"LegacyJavaScriptObject","GPUOrigin3DDict":"LegacyJavaScriptObject","GPUExtent3DDict":"LegacyJavaScriptObject","Hid":"LegacyJavaScriptObject","HIDDeviceRequestOptions":"LegacyJavaScriptObject","HIDDeviceFilter":"LegacyJavaScriptObject","HIDDevice":"LegacyJavaScriptObject","HIDConnectionEvent":"LegacyJavaScriptObject","HIDConnectionEventInit":"LegacyJavaScriptObject","HIDInputReportEvent":"LegacyJavaScriptObject","HIDInputReportEventInit":"LegacyJavaScriptObject","HIDCollectionInfo":"LegacyJavaScriptObject","HIDReportInfo":"LegacyJavaScriptObject","HIDReportItem":"LegacyJavaScriptObject","DOMException":"LegacyJavaScriptObject","MidiPermissionDescriptor":"LegacyJavaScriptObject","MIDIOptions":"LegacyJavaScriptObject","MIDIInputMap":"LegacyJavaScriptObject","MIDIOutputMap":"LegacyJavaScriptObject","MIDIAccess":"LegacyJavaScriptObject","MIDIPort":"LegacyJavaScriptObject","MIDIInput":"LegacyJavaScriptObject","MIDIOutput":"LegacyJavaScriptObject","MIDIMessageEvent":"LegacyJavaScriptObject","MIDIMessageEventInit":"LegacyJavaScriptObject","MIDIConnectionEvent":"LegacyJavaScriptObject","MIDIConnectionEventInit":"LegacyJavaScriptObject","NavigatorML":"LegacyJavaScriptObject","MLContextOptions":"LegacyJavaScriptObject","Ml":"LegacyJavaScriptObject","MLContext":"LegacyJavaScriptObject","MLOperandDescriptor":"LegacyJavaScriptObject","MLOperand":"LegacyJavaScriptObject","MLOperator":"LegacyJavaScriptObject","MLBufferResourceView":"LegacyJavaScriptObject","MLGraphBuilder":"LegacyJavaScriptObject","MLBatchNormalizationOptions":"LegacyJavaScriptObject","MLClampOptions":"LegacyJavaScriptObject","MLConv2dOptions":"LegacyJavaScriptObject","MLConvTranspose2dOptions":"LegacyJavaScriptObject","MLEluOptions":"LegacyJavaScriptObject","MLGemmOptions":"LegacyJavaScriptObject","MLGruOptions":"LegacyJavaScriptObject","MLGruCellOptions":"LegacyJavaScriptObject","MLHardSigmoidOptions":"LegacyJavaScriptObject","MLInstanceNormalizationOptions":"LegacyJavaScriptObject","MLLeakyReluOptions":"LegacyJavaScriptObject","MLLinearOptions":"LegacyJavaScriptObject","MLPadOptions":"LegacyJavaScriptObject","MLPool2dOptions":"LegacyJavaScriptObject","MLReduceOptions":"LegacyJavaScriptObject","MLResample2dOptions":"LegacyJavaScriptObject","MLSliceOptions":"LegacyJavaScriptObject","MLSoftplusOptions":"LegacyJavaScriptObject","MLSplitOptions":"LegacyJavaScriptObject","MLSqueezeOptions":"LegacyJavaScriptObject","MLTransposeOptions":"LegacyJavaScriptObject","MLGraph":"LegacyJavaScriptObject","MLCommandEncoder":"LegacyJavaScriptObject","RTCConfiguration":"LegacyJavaScriptObject","RTCIceServer":"LegacyJavaScriptObject","RTCOfferAnswerOptions":"LegacyJavaScriptObject","RTCOfferOptions":"LegacyJavaScriptObject","RTCAnswerOptions":"LegacyJavaScriptObject","RTCPeerConnection":"LegacyJavaScriptObject","RTCSessionDescription":"LegacyJavaScriptObject","RTCSessionDescriptionInit":"LegacyJavaScriptObject","RTCLocalSessionDescriptionInit":"LegacyJavaScriptObject","RTCIceCandidate":"LegacyJavaScriptObject","RTCIceCandidateInit":"LegacyJavaScriptObject","RTCPeerConnectionIceEvent":"LegacyJavaScriptObject","RTCPeerConnectionIceEventInit":"LegacyJavaScriptObject","RTCPeerConnectionIceErrorEvent":"LegacyJavaScriptObject","RTCPeerConnectionIceErrorEventInit":"LegacyJavaScriptObject","RTCCertificateExpiration":"LegacyJavaScriptObject","RTCCertificate":"LegacyJavaScriptObject","RTCRtpTransceiverInit":"LegacyJavaScriptObject","RTCRtpSender":"LegacyJavaScriptObject","RTCRtpParameters":"LegacyJavaScriptObject","RTCRtpSendParameters":"LegacyJavaScriptObject","RTCRtpReceiveParameters":"LegacyJavaScriptObject","RTCRtpCodingParameters":"LegacyJavaScriptObject","RTCRtpEncodingParameters":"LegacyJavaScriptObject","RTCRtcpParameters":"LegacyJavaScriptObject","RTCRtpHeaderExtensionParameters":"LegacyJavaScriptObject","RTCRtpCodecParameters":"LegacyJavaScriptObject","RTCRtpCapabilities":"LegacyJavaScriptObject","RTCRtpCodecCapability":"LegacyJavaScriptObject","RTCRtpHeaderExtensionCapability":"LegacyJavaScriptObject","RTCRtpReceiver":"LegacyJavaScriptObject","RTCRtpContributingSource":"LegacyJavaScriptObject","RTCRtpSynchronizationSource":"LegacyJavaScriptObject","RTCRtpTransceiver":"LegacyJavaScriptObject","RTCDtlsTransport":"LegacyJavaScriptObject","RTCDtlsFingerprint":"LegacyJavaScriptObject","RTCIceTransport":"LegacyJavaScriptObject","RTCIceParameters":"LegacyJavaScriptObject","RTCIceCandidatePair":"LegacyJavaScriptObject","RTCTrackEvent":"LegacyJavaScriptObject","RTCTrackEventInit":"LegacyJavaScriptObject","RTCSctpTransport":"LegacyJavaScriptObject","RTCDataChannel":"LegacyJavaScriptObject","RTCDataChannelInit":"LegacyJavaScriptObject","RTCDataChannelEvent":"LegacyJavaScriptObject","RTCDataChannelEventInit":"LegacyJavaScriptObject","RTCDTMFSender":"LegacyJavaScriptObject","RTCDTMFToneChangeEvent":"LegacyJavaScriptObject","RTCDTMFToneChangeEventInit":"LegacyJavaScriptObject","RTCStatsReport":"LegacyJavaScriptObject","RTCStats":"LegacyJavaScriptObject","RTCError":"LegacyJavaScriptObject","RTCErrorInit":"LegacyJavaScriptObject","RTCErrorEvent":"LegacyJavaScriptObject","RTCErrorEventInit":"LegacyJavaScriptObject","RTCInsertableStreams":"LegacyJavaScriptObject","SFrameTransformOptions":"LegacyJavaScriptObject","SFrameTransform":"LegacyJavaScriptObject","SFrameTransformErrorEvent":"LegacyJavaScriptObject","SFrameTransformErrorEventInit":"LegacyJavaScriptObject","RTCEncodedVideoFrameMetadata":"LegacyJavaScriptObject","RTCEncodedVideoFrame":"LegacyJavaScriptObject","RTCEncodedAudioFrameMetadata":"LegacyJavaScriptObject","RTCEncodedAudioFrame":"LegacyJavaScriptObject","RTCTransformEvent":"LegacyJavaScriptObject","RTCRtpScriptTransformer":"LegacyJavaScriptObject","RTCRtpScriptTransform":"LegacyJavaScriptObject","RTCIceGatherOptions":"LegacyJavaScriptObject","RTCIdentityProviderGlobalScope":"LegacyJavaScriptObject","RTCIdentityProviderRegistrar":"LegacyJavaScriptObject","RTCIdentityProvider":"LegacyJavaScriptObject","RTCIdentityAssertionResult":"LegacyJavaScriptObject","RTCIdentityProviderDetails":"LegacyJavaScriptObject","RTCIdentityValidationResult":"LegacyJavaScriptObject","RTCIdentityProviderOptions":"LegacyJavaScriptObject","RTCIdentityAssertion":"LegacyJavaScriptObject","RTCRtpStreamStats":"LegacyJavaScriptObject","RTCCodecStats":"LegacyJavaScriptObject","RTCReceivedRtpStreamStats":"LegacyJavaScriptObject","RTCInboundRtpStreamStats":"LegacyJavaScriptObject","RTCRemoteInboundRtpStreamStats":"LegacyJavaScriptObject","RTCSentRtpStreamStats":"LegacyJavaScriptObject","RTCOutboundRtpStreamStats":"LegacyJavaScriptObject","RTCRemoteOutboundRtpStreamStats":"LegacyJavaScriptObject","RTCMediaSourceStats":"LegacyJavaScriptObject","RTCAudioSourceStats":"LegacyJavaScriptObject","RTCVideoSourceStats":"LegacyJavaScriptObject","RTCPeerConnectionStats":"LegacyJavaScriptObject","RTCDataChannelStats":"LegacyJavaScriptObject","RTCTransportStats":"LegacyJavaScriptObject","RTCIceCandidateStats":"LegacyJavaScriptObject","RTCIceCandidatePairStats":"LegacyJavaScriptObject","RTCCertificateStats":"LegacyJavaScriptObject","WebSocket":"LegacyJavaScriptObject","CloseEvent":"LegacyJavaScriptObject","CloseEventInit":"LegacyJavaScriptObject","WebTransportDatagramDuplexStream":"LegacyJavaScriptObject","WebTransport":"LegacyJavaScriptObject","WebTransportHash":"LegacyJavaScriptObject","WebTransportOptions":"LegacyJavaScriptObject","WebTransportCloseInfo":"LegacyJavaScriptObject","WebTransportStats":"LegacyJavaScriptObject","WebTransportDatagramStats":"LegacyJavaScriptObject","WebTransportSendStream":"LegacyJavaScriptObject","WebTransportSendStreamStats":"LegacyJavaScriptObject","WebTransportReceiveStream":"LegacyJavaScriptObject","WebTransportReceiveStreamStats":"LegacyJavaScriptObject","WebTransportBidirectionalStream":"LegacyJavaScriptObject","WebTransportError":"LegacyJavaScriptObject","WebTransportErrorInit":"LegacyJavaScriptObject","USBDeviceFilter":"LegacyJavaScriptObject","USBDeviceRequestOptions":"LegacyJavaScriptObject","Usb":"LegacyJavaScriptObject","USBConnectionEventInit":"LegacyJavaScriptObject","USBConnectionEvent":"LegacyJavaScriptObject","USBInTransferResult":"LegacyJavaScriptObject","USBOutTransferResult":"LegacyJavaScriptObject","USBIsochronousInTransferPacket":"LegacyJavaScriptObject","USBIsochronousInTransferResult":"LegacyJavaScriptObject","USBIsochronousOutTransferPacket":"LegacyJavaScriptObject","USBIsochronousOutTransferResult":"LegacyJavaScriptObject","USBDevice":"LegacyJavaScriptObject","USBControlTransferParameters":"LegacyJavaScriptObject","USBConfiguration":"LegacyJavaScriptObject","USBInterface":"LegacyJavaScriptObject","USBAlternateInterface":"LegacyJavaScriptObject","USBEndpoint":"LegacyJavaScriptObject","USBPermissionDescriptor":"LegacyJavaScriptObject","AllowedUSBDevice":"LegacyJavaScriptObject","USBPermissionStorage":"LegacyJavaScriptObject","USBPermissionResult":"LegacyJavaScriptObject","VTTCue":"LegacyJavaScriptObject","VTTRegion":"LegacyJavaScriptObject","XRSystem":"LegacyJavaScriptObject","XRSessionInit":"LegacyJavaScriptObject","XRSession":"LegacyJavaScriptObject","XRRenderStateInit":"LegacyJavaScriptObject","XRRenderState":"LegacyJavaScriptObject","XRFrame":"LegacyJavaScriptObject","XRSpace":"LegacyJavaScriptObject","XRReferenceSpace":"LegacyJavaScriptObject","XRBoundedReferenceSpace":"LegacyJavaScriptObject","XRView":"LegacyJavaScriptObject","XRViewport":"LegacyJavaScriptObject","XRRigidTransform":"LegacyJavaScriptObject","XRPose":"LegacyJavaScriptObject","XRViewerPose":"LegacyJavaScriptObject","XRInputSource":"LegacyJavaScriptObject","XRInputSourceArray":"LegacyJavaScriptObject","XRLayer":"LegacyJavaScriptObject","XRWebGLLayerInit":"LegacyJavaScriptObject","XRWebGLLayer":"LegacyJavaScriptObject","XRSessionEvent":"LegacyJavaScriptObject","XRSessionEventInit":"LegacyJavaScriptObject","XRInputSourceEvent":"LegacyJavaScriptObject","XRInputSourceEventInit":"LegacyJavaScriptObject","XRInputSourcesChangeEvent":"LegacyJavaScriptObject","XRInputSourcesChangeEventInit":"LegacyJavaScriptObject","XRReferenceSpaceEvent":"LegacyJavaScriptObject","XRReferenceSpaceEventInit":"LegacyJavaScriptObject","XRSessionSupportedPermissionDescriptor":"LegacyJavaScriptObject","XRPermissionDescriptor":"LegacyJavaScriptObject","XRPermissionStatus":"LegacyJavaScriptObject","XRDepthStateInit":"LegacyJavaScriptObject","XRDepthInformation":"LegacyJavaScriptObject","XRCPUDepthInformation":"LegacyJavaScriptObject","XRWebGLDepthInformation":"LegacyJavaScriptObject","XRDOMOverlayInit":"LegacyJavaScriptObject","XRDOMOverlayState":"LegacyJavaScriptObject","XRHand":"LegacyJavaScriptObject","XRJointSpace":"LegacyJavaScriptObject","XRJointPose":"LegacyJavaScriptObject","XRHitTestOptionsInit":"LegacyJavaScriptObject","XRTransientInputHitTestOptionsInit":"LegacyJavaScriptObject","XRHitTestSource":"LegacyJavaScriptObject","XRTransientInputHitTestSource":"LegacyJavaScriptObject","XRHitTestResult":"LegacyJavaScriptObject","XRTransientInputHitTestResult":"LegacyJavaScriptObject","XRRayDirectionInit":"LegacyJavaScriptObject","XRRay":"LegacyJavaScriptObject","XRLightProbe":"LegacyJavaScriptObject","XRLightEstimate":"LegacyJavaScriptObject","XRLightProbeInit":"LegacyJavaScriptObject","XRCompositionLayer":"LegacyJavaScriptObject","XRProjectionLayer":"LegacyJavaScriptObject","XRQuadLayer":"LegacyJavaScriptObject","XRCylinderLayer":"LegacyJavaScriptObject","XREquirectLayer":"LegacyJavaScriptObject","XRCubeLayer":"LegacyJavaScriptObject","XRSubImage":"LegacyJavaScriptObject","XRWebGLSubImage":"LegacyJavaScriptObject","XRProjectionLayerInit":"LegacyJavaScriptObject","XRLayerInit":"LegacyJavaScriptObject","XRQuadLayerInit":"LegacyJavaScriptObject","XRCylinderLayerInit":"LegacyJavaScriptObject","XREquirectLayerInit":"LegacyJavaScriptObject","XRCubeLayerInit":"LegacyJavaScriptObject","XRWebGLBinding":"LegacyJavaScriptObject","XRMediaLayerInit":"LegacyJavaScriptObject","XRMediaQuadLayerInit":"LegacyJavaScriptObject","XRMediaCylinderLayerInit":"LegacyJavaScriptObject","XRMediaEquirectLayerInit":"LegacyJavaScriptObject","XRMediaBinding":"LegacyJavaScriptObject","XRLayerEvent":"LegacyJavaScriptObject","XRLayerEventInit":"LegacyJavaScriptObject","WindowControlsOverlay":"LegacyJavaScriptObject","WindowControlsOverlayGeometryChangeEvent":"LegacyJavaScriptObject","WindowControlsOverlayGeometryChangeEventInit":"LegacyJavaScriptObject","ScreenDetails":"LegacyJavaScriptObject","ScreenDetailed":"LegacyJavaScriptObject","XMLHttpRequestEventTarget":"LegacyJavaScriptObject","XMLHttpRequestUpload":"LegacyJavaScriptObject","XMLHttpRequest":"LegacyJavaScriptObject","FormData":"LegacyJavaScriptObject","ProgressEvent":"LegacyJavaScriptObject","ProgressEventInit":"LegacyJavaScriptObject","JsArray0":"LegacyJavaScriptObject","Symbol2":"LegacyJavaScriptObject","JsIterator":"LegacyJavaScriptObject","AsyncIterator0":"LegacyJavaScriptObject","IteratorResult0":"LegacyJavaScriptObject","JsIterable":"LegacyJavaScriptObject","JSObject":"LegacyJavaScriptObject","JsMap":"LegacyJavaScriptObject","Number":"LegacyJavaScriptObject","Reflect":"LegacyJavaScriptObject","NativeFloat32List":"NativeTypedArrayOfDouble","JSBool":{"bool":[]},"JSNull":{"Null":[]},"LegacyJavaScriptObject":{"JavaScriptObject":[],"Promise":["1&"]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"JSIndexable":["@"]},"CastStream":{"Stream":["2"],"Stream.T":"2"},"CastStreamSubscription":{"StreamSubscription":["2"]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListMixin.E":"2","Iterable.E":"2"},"CastSet":{"Set":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"LateError":{"Error":[]},"CodeUnits":{"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListIterable.E":"2","Iterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"ExpandIterator":{"Iterator":["2"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"Symbol":{"Symbol0":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"JSInvocationMirror":{"Invocation":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeTypedData":{"TypedData":[]},"NativeByteData":{"TypedData":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"TypedData":[],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double","FixedLengthListMixin.E":"double"},"NativeTypedArrayOfInt":{"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeInt16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"_Type":{"Type":[]},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_Future":{"Future":["1"]},"MultiStreamController":{"StreamController":["1"],"EventSink":["1"],"Sink":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_TimerImpl":{"Timer":[]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"AsyncError":{"Error":[]},"_BroadcastStream":{"_ControllerStream":["1"],"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_BroadcastSubscription":{"_ControllerSubscription":["1"],"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_BroadcastStreamController":{"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_SyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_AsyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"StreamView":{"Stream":["1"]},"StreamTransformerBase":{"StreamTransformer":["1","2"]},"_StreamController":{"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamSinkWrapper":{"EventSink":["1"],"Sink":["1"]},"_StreamControllerAddStreamState":{"_AddStreamState":["1"]},"_StreamImpl":{"Stream":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_EmptyStream":{"Stream":["1"],"Stream.T":"1"},"_MultiStream":{"Stream":["1"],"Stream.T":"1"},"_MultiStreamController":{"_AsyncStreamController":["1"],"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"MultiStreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_HashMap":{"MapMixin":["1","2"],"Map":["1","2"]},"_IdentityHashMap":{"_HashMap":["1","2"],"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_LinkedIdentityHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_LinkedHashSet":{"_SetBase":["1"],"SetMixin":["1"],"LinkedHashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"IterableBase":{"Iterable":["1"]},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_SetBase":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSet":{"_SetBase":["1"],"SetMixin":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"Encoding":{"Codec":["String","List<int>"]},"_JsonMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"_JsonMapKeyIterable":{"ListIterable":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"ListIterable.E":"String","Iterable.E":"String"},"AsciiCodec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"_UnicodeSubsetEncoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"AsciiEncoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"_UnicodeSubsetDecoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"AsciiDecoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"Base64Encoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"ByteConversionSink":{"Sink":["List<int>"]},"ByteConversionSinkBase":{"ByteConversionSink":[],"Sink":["List<int>"]},"_ByteAdapterSink":{"ByteConversionSink":[],"Sink":["List<int>"]},"_ByteCallbackSink":{"ByteConversionSink":[],"Sink":["List<int>"]},"ChunkedConversionSink":{"Sink":["1"]},"Converter":{"StreamTransformer":["1","2"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"],"Codec.S":"Object?"},"JsonEncoder":{"Converter":["Object?","String"],"StreamTransformer":["Object?","String"]},"JsonDecoder":{"Converter":["String","Object?"],"StreamTransformer":["String","Object?"]},"Latin1Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Latin1Encoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"Latin1Decoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"Utf8Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Utf8Encoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"_Utf8EncoderSink":{"Sink":["String"]},"Utf8Decoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"Set":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"String":{"Comparable":["String"],"Pattern":[]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"TypeError":[],"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"_StringStackTrace":{"StackTrace":[]},"StringBuffer":{"StringSink":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"JsArray":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1"},"NullRejectionException":{"Exception":[]},"ByteData":{"TypedData":[]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"CanonicalizedMap":{"Map":["2","3"]},"DigestSink":{"Sink":["Digest"]},"Hash":{"Converter":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"HashSink":{"Sink":["List<int>"]},"Hmac":{"Converter":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_HmacSink":{"ByteConversionSink":[],"Sink":["List<int>"]},"_Sha1":{"Hash":[],"Converter":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"_Sha1Sink":{"Sink":["List<int>"]},"EdgeHttpClient":{"Client":[]},"HttpClientRequest":{"HttpClientRequest0":[],"EventSink":["List<int>"],"Sink":["List<int>"],"StringSink":[]},"HttpClientResponse":{"HttpClientResponse0":[],"Stream":["List<int>"]},"HttpHeaders":{"HttpHeaders0":[]},"StringValue":{"Resource":[]},"UriValue":{"Resource":[]},"RequestValue":{"Resource":[]},"ByteStream":{"StreamView":["List<int>"],"Stream":["List<int>"],"Stream.T":"List<int>","StreamView.T":"List<int>"},"Request0":{"BaseRequest":[]},"StreamedRequest":{"BaseRequest":[]},"CaseInsensitiveMap":{"CanonicalizedMap":["String","String","1"],"Map":["String","1"],"CanonicalizedMap.K":"String","CanonicalizedMap.V":"1","CanonicalizedMap.C":"String"},"PathException":{"Exception":[]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"PostgrestBuilder":{"Future":["1"]},"PostgrestFilterBuilder":{"PostgrestTransformBuilder":["1"],"PostgrestBuilder":["1","1"],"Future":["1"],"PostgrestBuilder.T":"1","PostgrestBuilder.S":"1"},"PostgrestQueryBuilder":{"PostgrestBuilder":["1","1"],"Future":["1"],"PostgrestQueryBuilder.T":"1","PostgrestBuilder.T":"1","PostgrestBuilder.S":"1"},"PostgrestTransformBuilder":{"PostgrestBuilder":["1","1"],"Future":["1"]},"PostgrestException":{"Exception":[]},"DeferStream":{"Stream":["1"],"Stream.T":"1"},"BehaviorSubject":{"Subject":["1"],"StreamController":["1"],"StreamView":["1"],"EventSink":["1"],"Stream":["1"],"Sink":["1"],"Stream.T":"1","StreamView.T":"1"},"_BehaviorSubjectStream":{"Stream":["1"],"Stream.T":"1"},"Subject":{"StreamController":["1"],"StreamView":["1"],"EventSink":["1"],"Stream":["1"],"Sink":["1"]},"_StartWithStreamSink":{"ForwardingSink":["1","1"],"ForwardingSink.R":"1"},"StartWithStreamTransformer":{"StreamTransformer":["1","1"]},"_StartWithErrorStreamSink":{"ForwardingSink":["1","1"],"ForwardingSink.R":"1"},"StartWithErrorStreamTransformer":{"StreamTransformer":["1","1"]},"_MultiControllerSink":{"EventSink":["1"],"Sink":["1"]},"FileLocation":{"SourceLocation":[],"Comparable":["SourceLocation"]},"_FileSpan":{"FileSpan":[],"SourceSpanWithContext":[],"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceLocation":{"Comparable":["SourceLocation"]},"SourceLocationMixin":{"SourceLocation":[],"Comparable":["SourceLocation"]},"SourceSpan":{"Comparable":["SourceSpan"]},"SourceSpanBase":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanException":{"Exception":[]},"SourceSpanFormatException":{"FormatException":[],"Exception":[]},"SourceSpanMixin":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanWithContext":{"SourceSpan":[],"Comparable":["SourceSpan"]},"StringScannerException":{"FormatException":[],"Exception":[]},"SupabaseQueryBuilder":{"PostgrestQueryBuilder":["@"],"PostgrestBuilder":["@","@"],"Future":["@"],"PostgrestQueryBuilder.T":"@","PostgrestBuilder.T":"@","PostgrestBuilder.S":"@"},"EdgeIsolate":{"YAJsonIsolate":[]},"TypedDataBuffer":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_IntBuffer":{"TypedDataBuffer":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8Buffer":{"TypedDataBuffer":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","TypedDataBuffer.E":"int"},"HttpClientRequest0":{"EventSink":["List<int>"],"Sink":["List<int>"],"StringSink":[]},"HttpClientResponse0":{"Stream":["List<int>"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"NativeTypedArray":1,"StreamTransformerBase":2,"_DelayedEvent":1,"IterableBase":1,"ListBase":1,"MapBase":2,"_ListBase_Object_ListMixin":1,"__SetBase_Object_SetMixin":1,"__UnmodifiableSet__SetBase__UnmodifiableSetMixin":1,"ChunkedConversionSink":1,"_JsArray_JsObject_ListMixin":1,"Iterator0":1,"AsyncIterator":1,"IteratorResult":1,"JsArray0":1,"JsIterator":1,"AsyncIterator0":1,"IteratorResult0":1,"JsIterable":1,"JsMap":2}'));
  var string$ = {
    x20must_: " must not be greater than the number of characters in the file, ",
    x27_has_: "' has been assigned during initialization.",
    x3a_URI_: ": URI should have a non-empty host name: ",
    ABCDEF: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    Broadc: "Broadcast stream controllers do not support pause callbacks",
    Cannoteff: "Cannot extract a file path from a URI with a fragment component",
    Cannotefq: "Cannot extract a file path from a URI with a query component",
    Cannoten: "Cannot extract a non-Windows file path from a file URI with an authority",
    Cannotf: "Cannot fire new event. Controller is already firing an event",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    The_er: "The error handler of Future.then must return a value of the returned future's type",
    handle: "handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      $env_1_1_dynamic: findType("@<@>"),
      $env_1_1_void: findType("@<~>"),
      AsyncError: findType("AsyncError"),
      AuthState: findType("AuthState"),
      Base64Codec: findType("Base64Codec"),
      BehaviorSubject_AuthState: findType("BehaviorSubject<AuthState>"),
      CodeUnits: findType("CodeUnits"),
      Comparable_dynamic: findType("Comparable<@>"),
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      ConstantStringMap_String_String: findType("ConstantStringMap<String,String>"),
      DateTime: findType("DateTime"),
      Duration: findType("Duration"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Error: findType("Error"),
      Exception: findType("Exception"),
      FileSpan: findType("FileSpan"),
      FormatException: findType("FormatException"),
      Function: findType("Function"),
      Future_dynamic: findType("Future<@>"),
      Future_void: findType("Future<~>"),
      HttpClientRequest: findType("HttpClientRequest0"),
      HttpClientRequest_2: findType("HttpClientRequest"),
      HttpClientResponse: findType("HttpClientResponse"),
      Invocation: findType("Invocation"),
      Iterable_String: findType("Iterable<String>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_ChannelEvents: findType("JSArray<ChannelEvents>"),
      JSArray_Function: findType("JSArray<Function>"),
      JSArray_RealtimeChannel: findType("JSArray<RealtimeChannel>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Uint8List: findType("JSArray<Uint8List>"),
      JSArray__Highlight: findType("JSArray<_Highlight>"),
      JSArray__Line: findType("JSArray<_Line>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JavaScriptObject: findType("JavaScriptObject"),
      JsArray_dynamic: findType("JsArray<@>"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      List_Function: findType("List<Function>"),
      List_String: findType("List<String>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_nullable__Highlight: findType("List<_Highlight?>"),
      MapEntry_of_Object_and_List__Highlight: findType("MapEntry<Object,List<_Highlight>>"),
      Map_String_String: findType("Map<String,String>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_of_String_and_List_String: findType("Map<String,List<String>>"),
      MappedListIterable_String_String: findType("MappedListIterable<String,String>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      MediaType: findType("MediaType"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeUint8List: findType("NativeUint8List"),
      Never: findType("0&"),
      Null: findType("Null"),
      Object: findType("Object"),
      Pattern: findType("Pattern"),
      PostgrestResponse_List_Map_String_dynamic: findType("PostgrestResponse<List<Map<String,@>>>"),
      PostgrestResponse_Map_String_dynamic: findType("PostgrestResponse<Map<String,@>>"),
      PostgrestResponse_dynamic: findType("PostgrestResponse<@>"),
      PostgrestResponse_nullable_Map_String_dynamic: findType("PostgrestResponse<Map<String,@>?>"),
      Promise_JavaScriptObject_Function_JavaScriptObject: findType("Promise<1&>(JavaScriptObject)"),
      QueueMedia: findType("QueueMedia"),
      QueueTweetModelEdge: findType("QueueTweetModelEdge"),
      ReadResult: findType("ReadResult"),
      RealtimeChannel: findType("RealtimeChannel"),
      Record: findType("Record"),
      RegExp: findType("RegExp"),
      RegExpMatch: findType("RegExpMatch"),
      RequestValue: findType("RequestValue"),
      Response: findType("Response0"),
      Response_2: findType("Response"),
      Set_String: findType("Set<String>"),
      Sink_Digest: findType("Sink<Digest>"),
      Sink_List_int: findType("Sink<List<int>>"),
      SourceLocation: findType("SourceLocation"),
      SourceSpan: findType("SourceSpan"),
      SourceSpanWithContext: findType("SourceSpanWithContext"),
      StackTrace: findType("StackTrace"),
      StreamSubscription_AuthState: findType("StreamSubscription<AuthState>"),
      Stream_List_int: findType("Stream<List<int>>"),
      Stream_dynamic: findType("Stream<@>"),
      StreamedResponse: findType("StreamedResponse"),
      String: findType("String"),
      StringValue: findType("StringValue"),
      String_Function_Match: findType("String(Match)"),
      String_Function_String: findType("String(String)"),
      Symbol: findType("Symbol0"),
      Timer: findType("Timer"),
      TwitterApiResponse: findType("TwitterApiResponse"),
      TypeError: findType("TypeError"),
      TypedData: findType("TypedData"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnmodifiableMapView_String_String: findType("UnmodifiableMapView<String,String>"),
      Uri: findType("Uri"),
      WhereTypeIterable_String: findType("WhereTypeIterable<String>"),
      _AsyncBroadcastStreamController_AuthState: findType("_AsyncBroadcastStreamController<AuthState>"),
      _AsyncCompleter_HttpClientResponse: findType("_AsyncCompleter<HttpClientResponse0>"),
      _AsyncCompleter_Uint8List: findType("_AsyncCompleter<Uint8List>"),
      _AsyncStreamController_List_int: findType("_AsyncStreamController<List<int>>"),
      _EmptyStream_List_int: findType("_EmptyStream<List<int>>"),
      _Future_HttpClientResponse: findType("_Future<HttpClientResponse0>"),
      _Future_Uint8List: findType("_Future<Uint8List>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_void: findType("_Future<~>"),
      _Highlight: findType("_Highlight"),
      _IdentityHashMap_dynamic_dynamic: findType("_IdentityHashMap<@,@>"),
      _Line: findType("_Line"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      _Wrapper_AuthState: findType("_Wrapper<AuthState>"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function__Highlight: findType("bool(_Highlight)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_String: findType("@(String)"),
      dynamic_Function_dynamic: findType("@(@)"),
      int: findType("int"),
      int_Function_int: findType("int(int)"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_JavaScriptObject: findType("JavaScriptObject?"),
      nullable_List_Map_String_dynamic: findType("List<Map<String,@>>?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_List_int: findType("List<int>?"),
      nullable_Map_String_String: findType("Map<String,String>?"),
      nullable_Map_String_dynamic: findType("Map<String,@>?"),
      nullable_Object: findType("Object?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_String: findType("String?"),
      nullable_String_Function_Match: findType("String(Match)?"),
      nullable_String_Function_String: findType("String(String)?"),
      nullable_Uint8List: findType("Uint8List?"),
      nullable_WebSocketChannel: findType("WebSocketChannel?"),
      nullable__DelayedEvent_dynamic: findType("_DelayedEvent<@>?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__Highlight: findType("_Highlight?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable_nullable_Object_Function_2_nullable_Object_and_nullable_Object: findType("Object?(Object?,Object?)?"),
      nullable_nullable_Object_Function_dynamic: findType("Object?(@)?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_List_int: findType("~(List<int>)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_2_String_and_List_String: findType("~(String,List<String>)"),
      void_Function_2_String_and_void_Function_dynamic: findType("~(String,~(@))"),
      void_Function_2_dynamic_and_void_Function_String: findType("~(@,~(String))"),
      void_Function_List_int: findType("~(List<int>)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)"),
      void_Function_String_dynamic: findType("~(String,@)"),
      void_Function_Timer: findType("~(Timer)"),
      void_Function_int_dynamic: findType("~(int,@)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeByteData_methods = A.NativeByteData.prototype;
    B.NativeUint32List_methods = A.NativeUint32List.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.AsciiDecoder_false_127 = new A.AsciiDecoder(false, 127);
    B.AsciiEncoder_127 = new A.AsciiEncoder(127);
    B.C__EmptyStream = new A._EmptyStream(type$._EmptyStream_List_int);
    B.ByteStream__EmptyStream = new A.ByteStream(B.C__EmptyStream);
    B.CONSTANT0 = new A.Instantiation1(A.utils_interop__dartify$closure(), A.findType("Instantiation1<@>"));
    B.CONSTANT = new A.Instantiation1(A.math__max$closure(), A.findType("Instantiation1<int>"));
    B.C_AsciiCodec = new A.AsciiCodec();
    B.C_Base64Encoder = new A.Base64Encoder();
    B.C_Base64Codec = new A.Base64Codec();
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_Endian = new A.Endian();
    B.C_Endian0 = new A.Endian();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_JsonCodec = new A.JsonCodec();
    B.C_Latin1Codec = new A.Latin1Codec();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.C__DelayedDone = new A._DelayedDone();
    B.C__Empty = new A._Empty();
    B.C__Required = new A._Required();
    B.C__RootZone = new A._RootZone();
    B.C__Sha1 = new A._Sha1();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.ChannelEvents_1 = new A.ChannelEvents("error");
    B.ChannelEvents_5 = new A.ChannelEvents("heartbeat");
    B.ChannelEvents_6 = new A.ChannelEvents("accessToken");
    B.ChannelEvents_7 = new A.ChannelEvents("broadcast");
    B.ChannelEvents_8 = new A.ChannelEvents("presence");
    B.ChannelEvents_9 = new A.ChannelEvents("postgresChanges");
    B.Duration_0 = new A.Duration(0);
    B.Duration_10000000 = new A.Duration(10000000);
    B.FetchOptions_false_null_false = new A.FetchOptions(false, null, false);
    B.JsonDecoder_null = new A.JsonDecoder(null);
    B.JsonEncoder_null = new A.JsonEncoder(null);
    B.Latin1Decoder_false_255 = new A.Latin1Decoder(false, 255);
    B.Latin1Encoder_255 = new A.Latin1Encoder(255);
    B.List_2Vk = A._setArrayType(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_int);
    B.List_CVk = A._setArrayType(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_JYB = A._setArrayType(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_int);
    B.List_KIf = A._setArrayType(makeConstList([0, 0, 26498, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_String);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.List_gRj = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_nxB = A._setArrayType(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_qNA = A._setArrayType(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_qg4 = A._setArrayType(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.Map_empty0 = new A.ConstantStringMap(0, {}, B.List_empty0, A.findType("ConstantStringMap<String,List<String>>"));
    B.Map_empty1 = new A.ConstantStringMap(0, {}, B.List_empty0, type$.ConstantStringMap_String_String);
    B.Map_empty2 = new A.ConstantStringMap(0, {}, B.List_empty0, A.findType("ConstantStringMap<String,@>"));
    B.List_empty1 = A._setArrayType(makeConstList([]), A.findType("JSArray<Symbol0>"));
    B.Map_empty = new A.ConstantStringMap(0, {}, B.List_empty1, A.findType("ConstantStringMap<Symbol0,@>"));
    B.List_pGz = A._setArrayType(makeConstList(["Content-Type", "X-Client-Info"]), type$.JSArray_String);
    B.Map_pGssD = new A.ConstantStringMap(2, {"Content-Type": "application/json", "X-Client-Info": "functions-dart/1.1.1"}, B.List_pGz, type$.ConstantStringMap_String_String);
    B.List_taS = A._setArrayType(makeConstList(["X-Client-Info"]), type$.JSArray_String);
    B.Map_tacWd = new A.ConstantStringMap(1, {"X-Client-Info": "gotrue-dart/1.5.7"}, B.List_taS, type$.ConstantStringMap_String_String);
    B.Map_talMQ = new A.ConstantStringMap(1, {"X-Client-Info": "postgrest-dart/1.2.3"}, B.List_taS, type$.ConstantStringMap_String_String);
    B.Map_tan7V = new A.ConstantStringMap(1, {"X-Client-Info": "realtime-dart/1.0.3"}, B.List_taS, type$.ConstantStringMap_String_String);
    B.Map_taoYl = new A.ConstantStringMap(1, {"X-Client-Info": "supabase-dart/1.6.3"}, B.List_taS, type$.ConstantStringMap_String_String);
    B.Map_tapFb = new A.ConstantStringMap(1, {"X-Client-Info": "storage-dart/1.2.5"}, B.List_taS, type$.ConstantStringMap_String_String);
    B.List_POST_PUT_PATCH_DELETE = A._setArrayType(makeConstList(["POST", "PUT", "PATCH", "DELETE"]), type$.JSArray_String);
    B.Map_07co5 = new A.ConstantStringMap(4, {POST: null, PUT: null, PATCH: null, DELETE: null}, B.List_POST_PUT_PATCH_DELETE, A.findType("ConstantStringMap<String,Null>"));
    B.Set_07W59 = new A._UnmodifiableSet(B.Map_07co5, A.findType("_UnmodifiableSet<String>"));
    B.SocketStates_0 = new A.SocketStates("connecting");
    B.SocketStates_1 = new A.SocketStates("open");
    B.SocketStates_2 = new A.SocketStates("closing");
    B.SocketStates_3 = new A.SocketStates("closed");
    B.SocketStates_4 = new A.SocketStates("disconnected");
    B.Symbol_call = new A.Symbol("call");
    B.Type_List_naM = A.typeLiteral("List<Map<String,@>>");
    B.Type_List_naM0 = A.typeLiteral("List<Map<@,@>>");
    B.Type_Map_2Zi = A.typeLiteral("Map<String,@>");
    B.Type_Object_xQ6 = A.typeLiteral("Object");
    B.Type_PostgrestResponse_Qo2 = A.typeLiteral("PostgrestResponse<List<Map<String,@>>>");
    B.Type_PostgrestResponse_Qo20 = A.typeLiteral("PostgrestResponse<Map<String,@>>");
    B.Type_PostgrestResponse_Qo21 = A.typeLiteral("PostgrestResponse<Map<String,@>?>");
    B.Type_RequestValue_EkK = A.typeLiteral("RequestValue");
    B.Type_StringValue_KTQ = A.typeLiteral("StringValue");
    B.Type_UriValue_MMc = A.typeLiteral("UriValue");
    B.Type_ccy = A.typeLiteral("Map<String,@>?");
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B._IterationMarker_null_2 = new A._IterationMarker(null, 2);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._toStringVisiting = A._setArrayType([], A.findType("JSArray<Object>"));
    $._currentUriBase = null;
    $._current = null;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "nullFuture", "$get$nullFuture", () => B.C__RootZone.run$1$1(new A.nullFuture_closure(), A.findType("Future<Null>")));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", () => A.findType("_Future<Null>")._as($.$get$nullFuture()));
    _lazyFinal($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", () => new A.Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "Utf8Decoder__decoderNonfatal", "$get$Utf8Decoder__decoderNonfatal", () => new A.Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => A.NativeInt8List__create1(A._ensureNativeList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int))));
    _lazyFinal($, "Encoding__nameToEncoding", "$get$Encoding__nameToEncoding", () => A.LinkedHashMap_LinkedHashMap$_literal(["iso_8859-1:1987", B.C_Latin1Codec, "iso-ir-100", B.C_Latin1Codec, "iso_8859-1", B.C_Latin1Codec, "iso-8859-1", B.C_Latin1Codec, "latin1", B.C_Latin1Codec, "l1", B.C_Latin1Codec, "ibm819", B.C_Latin1Codec, "cp819", B.C_Latin1Codec, "csisolatin1", B.C_Latin1Codec, "iso-ir-6", B.C_AsciiCodec, "ansi_x3.4-1968", B.C_AsciiCodec, "ansi_x3.4-1986", B.C_AsciiCodec, "iso_646.irv:1991", B.C_AsciiCodec, "iso646-us", B.C_AsciiCodec, "us-ascii", B.C_AsciiCodec, "us", B.C_AsciiCodec, "ibm367", B.C_AsciiCodec, "cp367", B.C_AsciiCodec, "csascii", B.C_AsciiCodec, "ascii", B.C_AsciiCodec, "csutf8", B.C_Utf8Codec, "utf-8", B.C_Utf8Codec], type$.String, A.findType("Encoding")));
    _lazyFinal($, "_Uri__isWindowsCached", "$get$_Uri__isWindowsCached", () => typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32");
    _lazyFinal($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", () => A.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$"));
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_xQ6));
    _lazyFinal($, "_scannerTables", "$get$_scannerTables", () => A._createTables());
    _lazyFinal($, "_context", "$get$_context", () => A._castToJsObject(A._wrapToDart(self)));
    _lazyFinal($, "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartObject"));
    _lazyFinal($, "_dartProxyCtor", "$get$_dartProxyCtor", () => function DartObject(o) {
      this.o = o;
    });
    _lazyFinal($, "Endian_host", "$get$Endian_host", () => A.NativeByteData_NativeByteData$view(A.NativeUint16List__create1(A._ensureNativeList(A._setArrayType([1], type$.JSArray_int))).buffer, 0, null).getInt8(0) === 1 ? B.C_Endian0 : B.C_Endian);
    _lazyFinal($, "BaseRequest__tokenRE", "$get$BaseRequest__tokenRE", () => A.RegExp_RegExp("^[\\w!#%&'*+\\-.^`|~]+$"));
    _lazyFinal($, "_escapedChar", "$get$_escapedChar", () => A.RegExp_RegExp('["\\x00-\\x1F\\x7F]'));
    _lazyFinal($, "token", "$get$token", () => A.RegExp_RegExp('[^()<>@,;:"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+'));
    _lazyFinal($, "_lws", "$get$_lws", () => A.RegExp_RegExp("(?:\\r\\n)?[ \\t]+"));
    _lazyFinal($, "_quotedString", "$get$_quotedString", () => A.RegExp_RegExp('"(?:[^"\\x00-\\x1F\\x7F]|\\\\.)*"'));
    _lazyFinal($, "_quotedPair", "$get$_quotedPair", () => A.RegExp_RegExp("\\\\(.)"));
    _lazyFinal($, "nonToken", "$get$nonToken", () => A.RegExp_RegExp('[()<>@,;:"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]'));
    _lazyFinal($, "whitespace", "$get$whitespace", () => A.RegExp_RegExp("(?:" + $.$get$_lws().pattern + ")*"));
    _lazyFinal($, "context", "$get$context", () => new A.Context(A.findType("InternalStyle")._as($.$get$Style_platform())));
    _lazyFinal($, "Style_posix", "$get$Style_posix", () => new A.PosixStyle(A.RegExp_RegExp("/"), A.RegExp_RegExp("[^/]$"), A.RegExp_RegExp("^/")));
    _lazyFinal($, "Style_windows", "$get$Style_windows", () => new A.WindowsStyle(A.RegExp_RegExp("[/\\\\]"), A.RegExp_RegExp("[^/\\\\]$"), A.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])"), A.RegExp_RegExp("^[/\\\\](?![/\\\\])")));
    _lazyFinal($, "Style_url", "$get$Style_url", () => new A.UrlStyle(A.RegExp_RegExp("/"), A.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$"), A.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*"), A.RegExp_RegExp("^/")));
    _lazyFinal($, "Style_platform", "$get$Style_platform", () => A.Style__getPlatformStyle());
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: J.Interceptor, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeTypedArrayOfDouble, Float64Array: A.NativeTypedArrayOfDouble, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();

//# sourceMappingURL=main.dart.js.map
